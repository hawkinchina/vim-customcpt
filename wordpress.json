{
    'test' : {
		'kind' : 'f'
    },
	'_(' : {
		'kind' : 'f',
		'menu' : '$string'
	},
	'__(' : {
		'kind' : 'f',
		'menu' : 'string $text, string $domain | string',
		'info' : "Retrieve the translation of $text."
	},
	'__autoload(' : {
		'kind' : 'f',
		'menu' : 'string $classname'
	},
	'__checked_selected_helper(' : {
		'kind' : 'f',
		'menu' : 'mixed $helper, mixed $current, boolean $echo, string $type | string',
		'info' : "Private helper function for checked, selected, and disabled."
	},
	'__clear_multi_author_cache(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'__ngettext(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'__ngettext_noop(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'__return_empty_array(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'__return_empty_string(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'__return_false(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'__return_null(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'__return_true(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'__return_zero(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'_access_denied_splash(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'_add_post_type_submenus(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'_add_themes_utility_last(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'_admin_bar_bump_cb(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'_admin_notice_post_locked(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'_admin_search_query(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'_ajax_wp_die_handler(' : {
		'kind' : 'f',
		'menu' : 'string $message, string $title, string|array $args',
		'info' : "Kill WordPress ajax execution."
	},
	'_autop_newline_preservation_helper(' : {
		'kind' : 'f',
		'menu' : 'array $matches | string'
	},
	'_c(' : {
		'kind' : 'f',
		'menu' : 'string $text, string $domain | string',
		'info' : "Retrieve translated string with vertical bar context"
	},
	'_canonical_charset(' : {
		'kind' : 'f',
		'menu' : 'string $charset | string'
	},
	'_cleanup_header_comment(' : {
		'kind' : 'f',
		'menu' : 'string $str | string'
	},
	'_cleanup_image_add_caption(' : {
		'kind' : 'f',
		'menu' : '$matches'
	},
	'_clear_modified_cache_on_transition_comment_status(' : {
		'kind' : 'f',
		'menu' : 'string $new_status, string $old_status',
		'info' : "Clear the lastcommentmodified cached value when a comment status is changed."
	},
	'_close_comments_for_old_post(' : {
		'kind' : 'f',
		'menu' : 'boolean $open, integer $post_id | boolean'
	},
	'_close_comments_for_old_posts(' : {
		'kind' : 'f',
		'menu' : '\WP_Post $posts, \WP_Query $query | array'
	},
	'_config_wp_home(' : {
		'kind' : 'f',
		'menu' : 'string $url | string',
		'info' : "Retrieve the WordPress home page URL."
	},
	'_config_wp_siteurl(' : {
		'kind' : 'f',
		'menu' : 'string $url | string',
		'info' : "Retrieve the WordPress site URL."
	},
	'_convert_urlencoded_to_entities(' : {
		'kind' : 'f',
		'menu' : 'array $match | string'
	},
	'_copy_image_file(' : {
		'kind' : 'f',
		'menu' : 'string $attachment_id | string|false'
	},
	'_count_posts_cache_key(' : {
		'kind' : 'f',
		'menu' : 'string $type, string $perm | string'
	},
	'_custom_background_cb(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'_custom_header_background_just_in_time(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'_custom_logo_header_styles(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'_deep_replace(' : {
		'kind' : 'f',
		'menu' : 'string|array $search, string $subject | string',
		'info' : "Perform a deep string replace operation to ensure the values in $search are no longer present"
	},
	'_default_wp_die_handler(' : {
		'kind' : 'f',
		'menu' : 'string|\WP_Error $message, string $title, string|array $args',
		'info' : "Kills WordPress execution and display HTML message with error message."
	},
	'_delete_attachment_theme_mod(' : {
		'kind' : 'f',
		'menu' : 'integer $id',
		'info' : "Checks an attachment being deleted to see if it's a header or background image."
	},
	'_delete_option_fresh_site(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'_deprecated_argument(' : {
		'kind' : 'f',
		'menu' : 'string $function, string $version, string $message',
		'info' : "Mark a function argument as deprecated and inform when it has been used."
	},
	'_deprecated_constructor(' : {
		'kind' : 'f',
		'menu' : 'string $class, string $version, string $parent_class',
		'info' : "Marks a constructor as deprecated and informs when it has been used."
	},
	'_deprecated_file(' : {
		'kind' : 'f',
		'menu' : 'string $file, string $version, string $replacement, string $message',
		'info' : "Mark a file as deprecated and inform when it has been used."
	},
	'_deprecated_function(' : {
		'kind' : 'f',
		'menu' : 'string $function, string $version, string $replacement',
		'info' : "Mark a function as deprecated and inform when it has been used."
	},
	'_deprecated_hook(' : {
		'kind' : 'f',
		'menu' : 'string $hook, string $version, string $replacement, string $message',
		'info' : "Marks a deprecated action or filter hook as deprecated and throws a notice."
	},
	'_device_can_upload(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'_doing_it_wrong(' : {
		'kind' : 'f',
		'menu' : 'string $function, string $message, string $version',
		'info' : "Mark something as being incorrectly called."
	},
	'_draft_or_post_title(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Post $post | string',
		'info' : "Get the post title."
	},
	'_e(' : {
		'kind' : 'f',
		'menu' : 'string $text, string $domain'
	},
	'_ex(' : {
		'kind' : 'f',
		'menu' : 'string $text, string $context, string $domain | string'
	},
	'_fetch_remote_file(' : {
		'kind' : 'f',
		'menu' : 'string $url, array $headers | \Snoopy'
	},
	'_filter_query_attachment_filenames(' : {
		'kind' : 'f',
		'menu' : 'array $clauses | array'
	},
	'_fix_attachment_links(' : {
		'kind' : 'f',
		'menu' : 'integer|object $post | void|integer|\WP_Error'
	},
	'_future_post_hook(' : {
		'kind' : 'f',
		'menu' : 'integer $deprecated, \WP_Post $post',
		'info' : "Hook used to schedule publication for a post marked for the future."
	},
	'_get_additional_user_keys(' : {
		'kind' : 'f',
		'menu' : '\WP_User $user | array',
		'info' : "Returns a list of meta keys to be (maybe) populated in wp_update_user()."
	},
	'_get_admin_bar_pref(' : {
		'kind' : 'f',
		'menu' : 'string $context, integer $user | boolean'
	},
	'_get_cron_array(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'_get_custom_object_labels(' : {
		'kind' : 'f',
		'menu' : 'object $object, array $nohier_vs_hier_defaults | object'
	},
	'_get_dropins(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'_get_last_post_time(' : {
		'kind' : 'f',
		'menu' : 'string $timezone, string $field, string $post_type | string|false'
	},
	'_get_list_table(' : {
		'kind' : 'f',
		'menu' : 'string $class, array $args | object|boolean'
	},
	'_get_meta_table(' : {
		'kind' : 'f',
		'menu' : 'string $type | string|false'
	},
	'_get_non_cached_ids(' : {
		'kind' : 'f',
		'menu' : 'array $object_ids, string $cache_key | array'
	},
	'_get_page_link(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Post $post, boolean $leavename, boolean $sample | string',
		'info' : "Retrieves the page permalink."
	},
	'_get_path_to_translation(' : {
		'kind' : 'f',
		'menu' : 'string $domain, boolean $reset | string|false',
		'info' : "Gets the path to a translation file for loading a textdomain just in time."
	},
	'_get_path_to_translation_from_lang_dir(' : {
		'kind' : 'f',
		'menu' : 'string $domain | string|false',
		'info' : "Gets the path to a translation file in the languages directory for the current locale."
	},
	'_get_plugin_data_markup_translate(' : {
		'kind' : 'f',
		'menu' : '$plugin_file, $plugin_data, $markup, $translate'
	},
	'_get_post_ancestors(' : {
		'kind' : 'f',
		'menu' : '$post',
		'info' : "Retrieve post ancestors."
	},
	'_get_random_header_data(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'_get_template_edit_filename(' : {
		'kind' : 'f',
		'menu' : 'string $fullpath, string $containingfolder | string'
	},
	'_get_term_children(' : {
		'kind' : 'f',
		'menu' : 'integer $term_id, array $terms, string $taxonomy, array $ancestors | array|\WP_Error',
		'info' : "Get the subset of $terms that are descendants of $term_id."
	},
	'_get_widget_id_base(' : {
		'kind' : 'f',
		'menu' : 'string $id | string'
	},
	'_http_build_query(' : {
		'kind' : 'f',
		'menu' : 'array|object $data, string $prefix, string $sep, string $key, boolean $urlencode | string'
	},
	'_insert_into_post_button(' : {
		'kind' : 'f',
		'menu' : '$type',
		'info' : "This was once used to display an 'Insert into Post' button."
	},
	'_ipad_meta(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'_is_valid_nav_menu_item(' : {
		'kind' : 'f',
		'menu' : 'object $item | boolean'
	},
	'_json_decode_object_helper(' : {
		'kind' : 'f',
		'menu' : 'object $data | array'
	},
	'_links_add_base(' : {
		'kind' : 'f',
		'menu' : 'string $m | string'
	},
	'_links_add_target(' : {
		'kind' : 'f',
		'menu' : 'string $m | string'
	},
	'_list_meta_row(' : {
		'kind' : 'f',
		'menu' : 'array $entry, integer $count | string'
	},
	'_load_image_to_edit_path(' : {
		'kind' : 'f',
		'menu' : 'string $attachment_id, string $size | string|false',
		'info' : "Retrieve the path or url of an attachment's attached file."
	},
	'_load_textdomain_just_in_time(' : {
		'kind' : 'f',
		'menu' : 'string $domain | boolean',
		'info' : "Loads plugin and theme textdomains just-in-time."
	},
	'_local_storage_notice(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'_make_cat_compat(' : {
		'kind' : 'f',
		'menu' : 'array|object|\WP_Term $category',
		'info' : "Update category structure to old pre 2.3 from new taxonomy structure."
	},
	'_make_email_clickable_cb(' : {
		'kind' : 'f',
		'menu' : 'array $matches | string',
		'info' : "Callback to convert email address match to HTML A element."
	},
	'_make_url_clickable_cb(' : {
		'kind' : 'f',
		'menu' : 'array $matches | string',
		'info' : "Callback to convert URI match to HTML A element."
	},
	'_make_web_ftp_clickable_cb(' : {
		'kind' : 'f',
		'menu' : 'array $matches | string',
		'info' : "Callback to convert URL match to HTML A element."
	},
	'_maybe_update_core(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'_maybe_update_plugins(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'_maybe_update_themes(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'_mce_set_direction(' : {
		'kind' : 'f',
		'menu' : 'array $mce_init | array',
		'info' : "Set the localized direction for MCE plugin."
	},
	'_media_button(' : {
		'kind' : 'f',
		'menu' : '$title, $icon, $type, $id',
		'info' : "This was once used to display a media button."
	},
	'_media_states(' : {
		'kind' : 'f',
		'menu' : '\WP_Post $post'
	},
	'_n(' : {
		'kind' : 'f',
		'menu' : 'string $single, string $plural, integer $number, string $domain | string',
		'info' : "Translates and retrieves the singular or plural form based on the supplied number."
	},
	'_n_noop(' : {
		'kind' : 'f',
		'menu' : 'string $singular, string $plural, string $domain | array',
		'info' : "Registers plural strings in POT file, but does not translate them."
	},
	'_nav_menu_item_id_use_once(' : {
		'kind' : 'f',
		'menu' : 'string $id, object $item | string'
	},
	'_navigation_markup(' : {
		'kind' : 'f',
		'menu' : 'string $links, string $class, string $screen_reader_text | string'
	},
	'_nc(' : {
		'kind' : 'f',
		'menu' : 'string $single, string $plural, integer $number, string $domain | string',
		'info' : "Legacy version of _n(), which supports contexts."
	},
	'_nx(' : {
		'kind' : 'f',
		'menu' : 'string $single, string $plural, integer $number, string $context, string $domain | string',
		'info' : "Translates and retrieves the singular or plural form based on the supplied number, with gettext context."
	},
	'_nx_noop(' : {
		'kind' : 'f',
		'menu' : 'string $singular, string $plural, string $context, string $domain | array',
		'info' : "Registers plural strings with gettext context in POT file, but does not translate them."
	},
	'_oembed_create_xml(' : {
		'kind' : 'f',
		'menu' : 'array $data, \SimpleXMLElement $node | string|false'
	},
	'_oembed_filter_feed_content(' : {
		'kind' : 'f',
		'menu' : 'string $content | string'
	},
	'_oembed_rest_pre_serve_request(' : {
		'kind' : 'f',
		'menu' : 'boolean $served, \WP_HTTP_ResponseInterface $result, \WP_REST_Request $request, \WP_REST_Server $server | true',
		'info' : "Hooks into the REST API output to print XML instead of JSON."
	},
	'_pad_term_counts(' : {
		'kind' : 'f',
		'menu' : 'array $terms, string $taxonomy',
		'info' : "Add count of children to parent count."
	},
	'_page_traverse_name(' : {
		'kind' : 'f',
		'menu' : 'integer $page_id, array $children, array $result',
		'info' : "Traverse and return all the nested children post names of a root page."
	},
	'_post_format_get_term(' : {
		'kind' : 'f',
		'menu' : 'object $term | object'
	},
	'_post_format_get_terms(' : {
		'kind' : 'f',
		'menu' : 'array $terms, string|array $taxonomies, array $args | array'
	},
	'_post_format_link(' : {
		'kind' : 'f',
		'menu' : 'string $link, object $term, string $taxonomy | string'
	},
	'_post_format_request(' : {
		'kind' : 'f',
		'menu' : 'array $qvs | array'
	},
	'_post_format_wp_get_object_terms(' : {
		'kind' : 'f',
		'menu' : 'array $terms | array'
	},
	'_post_states(' : {
		'kind' : 'f',
		'menu' : '\WP_Post $post'
	},
	'_post_type_meta_capabilities(' : {
		'kind' : 'f',
		'menu' : 'array $capabilities'
	},
	'_preview_theme_stylesheet_filter(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'_preview_theme_template_filter(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'_prime_comment_caches(' : {
		'kind' : 'f',
		'menu' : 'array $comment_ids, boolean $update_meta_cache'
	},
	'_prime_network_caches(' : {
		'kind' : 'f',
		'menu' : 'array $network_ids'
	},
	'_prime_post_caches(' : {
		'kind' : 'f',
		'menu' : 'array $ids, boolean $update_term_cache, boolean $update_meta_cache'
	},
	'_prime_site_caches(' : {
		'kind' : 'f',
		'menu' : 'array $ids'
	},
	'_prime_term_caches(' : {
		'kind' : 'f',
		'menu' : 'array $term_ids, boolean $update_meta_cache'
	},
	'_publish_post_hook(' : {
		'kind' : 'f',
		'menu' : 'integer $post_id',
		'info' : "Hook to schedule pings and enclosures when a post is published."
	},
	'_redirect_to_about_wordpress(' : {
		'kind' : 'f',
		'menu' : 'string $new_version',
		'info' : "Redirect to the About WordPress page after a successful upgrade."
	},
	'_register_widget_form_callback(' : {
		'kind' : 'f',
		'menu' : 'integer|string $id, string $name, callable $form_callback, array $options'
	},
	'_register_widget_update_callback(' : {
		'kind' : 'f',
		'menu' : 'string $id_base, callable $update_callback, array $options'
	},
	'_relocate_children(' : {
		'kind' : 'f',
		'menu' : 'integer $old_ID, integer $new_ID'
	},
	'_remove_qs_args_if_not_in_url(' : {
		'kind' : 'f',
		'menu' : 'string $query_string, array $args_to_check, string $url | string'
	},
	'_remove_theme_support(' : {
		'kind' : 'f',
		'menu' : 'string $feature'
	},
	'_reset_front_page_settings_for_post(' : {
		'kind' : 'f',
		'menu' : 'integer $post_id',
		'info' : "Reset the page_on_front, show_on_front, and page_for_post settings when a linked page is deleted or trashed."
	},
	'_response_to_rss(' : {
		'kind' : 'f',
		'menu' : 'array $resp | \MagpieRSS|boolean'
	},
	'_sanitize_text_fields(' : {
		'kind' : 'f',
		'menu' : 'string $str, boolean $keep_newlines | string'
	},
	'_save_post_hook(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'_scalar_wp_die_handler(' : {
		'kind' : 'f',
		'menu' : 'string $message',
		'info' : "Kill WordPress execution."
	},
	'_search_terms_tidy(' : {
		'kind' : 'f',
		'menu' : 'string $t | string'
	},
	'_set_cron_array(' : {
		'kind' : 'f',
		'menu' : 'array $cron'
	},
	'_set_preview(' : {
		'kind' : 'f',
		'menu' : '\WP_Post $post | \WP_Post|false'
	},
	'_show_post_preview(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'_sort_name_callback(' : {
		'kind' : 'f',
		'menu' : '$a, $b | integer'
	},
	'_sort_nav_menu_items(' : {
		'kind' : 'f',
		'menu' : 'object $a, object $b | integer'
	},
	'_sort_uname_callback(' : {
		'kind' : 'f',
		'menu' : '$a, $b'
	},
	'_split_str_by_whitespace(' : {
		'kind' : 'f',
		'menu' : 'string $string, integer $goal | array',
		'info' : "Breaks a string into chunks by splitting at whitespace characters."
	},
	'_thickbox_path_admin_subfolder(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'_transition_post_status(' : {
		'kind' : 'f',
		'menu' : 'string $new_status, string $old_status, \WP_Post $post'
	},
	'_truncate_post_slug(' : {
		'kind' : 'f',
		'menu' : 'string $slug, integer $length | string'
	},
	'_unzip_file_pclzip(' : {
		'kind' : 'f',
		'menu' : 'string $file, string $to, array $needed_dirs | mixed',
		'info' : "This function should not be called directly, use unzip_file instead. Attempts to unzip an archive using the PclZip library."
	},
	'_unzip_file_ziparchive(' : {
		'kind' : 'f',
		'menu' : 'string $file, string $to, array $needed_dirs | mixed',
		'info' : "This function should not be called directly, use unzip_file instead. Attempts to unzip an archive using the ZipArchive class."
	},
	'_update_blog_date_on_post_delete(' : {
		'kind' : 'f',
		'menu' : 'integer $post_id'
	},
	'_update_blog_date_on_post_publish(' : {
		'kind' : 'f',
		'menu' : 'string $new_status, string $old_status, object $post'
	},
	'_update_generic_term_count(' : {
		'kind' : 'f',
		'menu' : 'array $terms, object $taxonomy',
		'info' : "Will update term count based on number of objects."
	},
	'_update_post_term_count(' : {
		'kind' : 'f',
		'menu' : 'array $terms, object $taxonomy',
		'info' : "Will update term count based on object types of the current taxonomy."
	},
	'_update_posts_count_on_delete(' : {
		'kind' : 'f',
		'menu' : 'integer $post_id'
	},
	'_update_posts_count_on_transition_post_status(' : {
		'kind' : 'f',
		'menu' : 'string $new_status, string $old_status'
	},
	'_update_term_count_on_transition_post_status(' : {
		'kind' : 'f',
		'menu' : 'string $new_status, string $old_status, \WP_Post $post',
		'info' : "Update the custom taxonomies' term counts when a post's status is changed."
	},
	'_upgrade_422_remove_genericons(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'_upgrade_cron_array(' : {
		'kind' : 'f',
		'menu' : 'array $cron | array',
		'info' : "Upgrade a Cron info array."
	},
	'_usort_by_first_member(' : {
		'kind' : 'f',
		'menu' : 'array $a, array $b | integer',
		'info' : "Sorts a multidimensional array by first member of each top level member"
	},
	'_usort_terms_by_ID(' : {
		'kind' : 'f',
		'menu' : 'object $a, object $b | integer',
		'info' : "Sort categories by ID."
	},
	'_usort_terms_by_name(' : {
		'kind' : 'f',
		'menu' : 'object $a, object $b | integer',
		'info' : "Sort categories by name."
	},
	'_walk_bookmarks(' : {
		'kind' : 'f',
		'menu' : 'array $bookmarks, string|array $args | string',
		'info' : "The formatted output of a list of bookmarks."
	},
	'_wp_add_global_attributes(' : {
		'kind' : 'f',
		'menu' : 'array $value | array'
	},
	'_wp_admin_bar_init(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'_wp_admin_html_begin(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'_wp_ajax_add_hierarchical_term(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'_wp_ajax_delete_comment_response(' : {
		'kind' : 'f',
		'menu' : 'integer $comment_id, integer $delta',
		'info' : "Sends back current comment total and new page links if they need to be updated."
	},
	'_wp_ajax_menu_quick_search(' : {
		'kind' : 'f',
		'menu' : 'array $request'
	},
	'_wp_auto_add_pages_to_menu(' : {
		'kind' : 'f',
		'menu' : 'string $new_status, string $old_status, object $post'
	},
	'_wp_batch_split_terms(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'_wp_call_all_hook(' : {
		'kind' : 'f',
		'menu' : 'array $args',
		'info' : "Call the 'all' hook, which will process the functions hooked into it."
	},
	'_wp_credits_add_profile_link(' : {
		'kind' : 'f',
		'menu' : 'string $display_name, string $username, string $profiles'
	},
	'_wp_credits_build_object_link(' : {
		'kind' : 'f',
		'menu' : 'string $data'
	},
	'_wp_customize_changeset_filter_insert_post_data(' : {
		'kind' : 'f',
		'menu' : 'array $post_data, array $supplied_post_data',
		'info' : "Filters changeset post data upon insert to ensure post_name is intact."
	},
	'_wp_customize_include(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'_wp_customize_loader_settings(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'_wp_customize_publish_changeset(' : {
		'kind' : 'f',
		'menu' : 'string $new_status, string $old_status, \WP_Post $changeset_post'
	},
	'_wp_dashboard_control_callback(' : {
		'kind' : 'f',
		'menu' : 'mixed $dashboard, array $meta_box'
	},
	'_wp_dashboard_recent_comments_row(' : {
		'kind' : 'f',
		'menu' : '\WP_Comment $comment, boolean $show_date'
	},
	'_wp_delete_orphaned_draft_menu_items(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'_wp_delete_post_menu_item(' : {
		'kind' : 'f',
		'menu' : 'integer $object_id'
	},
	'_wp_delete_tax_menu_item(' : {
		'kind' : 'f',
		'menu' : 'integer $object_id, integer $tt_id, string $taxonomy'
	},
	'_wp_filter_build_unique_id(' : {
		'kind' : 'f',
		'menu' : 'string $tag, callable $function, integer|boolean $priority | string|false',
		'info' : "Build Unique ID for storage and retrieval."
	},
	'_wp_filter_taxonomy_base(' : {
		'kind' : 'f',
		'menu' : 'string $base | string',
		'info' : "Filters the URL base for taxonomies."
	},
	'_wp_footer_scripts(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'_wp_get_attachment_relative_path(' : {
		'kind' : 'f',
		'menu' : 'string $file | string'
	},
	'_wp_get_current_user(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'_wp_get_image_size_from_meta(' : {
		'kind' : 'f',
		'menu' : 'string $size_name, array $image_meta | array|boolean',
		'info' : "Get the image size as array from its meta data."
	},
	'_wp_get_post_revision_version(' : {
		'kind' : 'f',
		'menu' : '\WP_Post $revision | integer|false'
	},
	'_wp_get_user_contactmethods(' : {
		'kind' : 'f',
		'menu' : '\WP_User $user | array',
		'info' : "The old private function for setting up user contact methods."
	},
	'_wp_handle_upload(' : {
		'kind' : 'f',
		'menu' : 'array $file, array|false $overrides, string $time, string $action | array'
	},
	'_wp_http_get_object(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'_wp_iso_convert(' : {
		'kind' : 'f',
		'menu' : 'array $match | string'
	},
	'_wp_kses_decode_entities_chr(' : {
		'kind' : 'f',
		'menu' : 'array $match | string'
	},
	'_wp_kses_decode_entities_chr_hexdec(' : {
		'kind' : 'f',
		'menu' : 'array $match | string'
	},
	'_wp_kses_split_callback(' : {
		'kind' : 'f',
		'menu' : '$match | string'
	},
	'_wp_link_page(' : {
		'kind' : 'f',
		'menu' : 'integer $i | string'
	},
	'_wp_menu_item_classes_by_context(' : {
		'kind' : 'f',
		'menu' : 'array $menu_items'
	},
	'_wp_menu_output(' : {
		'kind' : 'f',
		'menu' : 'array $menu, array $submenu, boolean $submenu_as_parent'
	},
	'_wp_nav_menu_meta_box_object(' : {
		'kind' : 'f',
		'menu' : 'object $object | object'
	},
	'_wp_object_count_sort_cb(' : {
		'kind' : 'f',
		'menu' : 'object $a, object $b | boolean',
		'info' : "Serves as a callback for comparing objects based on count."
	},
	'_wp_object_name_sort_cb(' : {
		'kind' : 'f',
		'menu' : 'object $a, object $b | integer',
		'info' : "Serves as a callback for comparing objects based on name."
	},
	'_wp_oembed_get_object(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'_wp_post_revision_data(' : {
		'kind' : 'f',
		'menu' : 'array|\WP_Post $post, boolean $autosave | array'
	},
	'_wp_post_revision_fields(' : {
		'kind' : 'f',
		'menu' : 'array|\WP_Post $post, boolean $deprecated | array'
	},
	'_wp_post_thumbnail_html(' : {
		'kind' : 'f',
		'menu' : 'integer $thumbnail_id, mixed $post | string'
	},
	'_wp_preview_post_thumbnail_filter(' : {
		'kind' : 'f',
		'menu' : 'null|array|string $value, integer $post_id, string $meta_key | null|array'
	},
	'_wp_preview_terms_filter(' : {
		'kind' : 'f',
		'menu' : 'array $terms, integer $post_id, string $taxonomy | array'
	},
	'_wp_put_post_revision(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Post|array|null $post, boolean $autosave | integer|\WP_Error'
	},
	'_wp_register_meta_args_whitelist(' : {
		'kind' : 'f',
		'menu' : 'array $args, array $default_args | array',
		'info' : "Filter out `register_meta()` args based on a whitelist."
	},
	'_wp_relative_upload_path(' : {
		'kind' : 'f',
		'menu' : 'string $path | string',
		'info' : "Return relative path to an uploaded file."
	},
	'_wp_sidebars_changed(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'_wp_specialchars(' : {
		'kind' : 'f',
		'menu' : 'string $string, integer|string $quote_style, string $charset, boolean $double_encode | string',
		'info' : "Converts a number of special characters into their HTML entities."
	},
	'_wp_timezone_choice_usort_callback(' : {
		'kind' : 'f',
		'menu' : 'array $a, array $b | integer'
	},
	'_wp_translate_postdata(' : {
		'kind' : 'f',
		'menu' : 'boolean $update, array $post_data | object|boolean',
		'info' : "Rename $_POST data from form names to DB post columns."
	},
	'_wp_upgrade_revisions_of_post(' : {
		'kind' : 'f',
		'menu' : '\WP_Post $post, array $revisions | boolean'
	},
	'_wp_upload_dir(' : {
		'kind' : 'f',
		'menu' : 'string $time | array'
	},
	'_wptexturize_pushpop_element(' : {
		'kind' : 'f',
		'menu' : 'string $text, array $stack, array $disabled_elements',
		'info' : "Search for disabled element tags. Push element to stack on tag open and pop on tag close."
	},
	'_x(' : {
		'kind' : 'f',
		'menu' : 'string $text, string $context, string $domain | string',
		'info' : "Retrieve translated string with gettext context."
	},
	'_xmlrpc_wp_die_handler(' : {
		'kind' : 'f',
		'menu' : 'string $message, string $title, string|array $args',
		'info' : "Kill WordPress execution and display XML message with error message."
	},
	'absint(' : {
		'kind' : 'f',
		'menu' : 'mixed $maybeint | integer'
	},
	'activate_plugin(' : {
		'kind' : 'f',
		'menu' : 'string $plugin, string $redirect, boolean $network_wide, boolean $silent | \WP_Error|null',
		'info' : "Attempts activation of plugin in a 'sandbox' and redirects on success."
	},
	'activate_plugins(' : {
		'kind' : 'f',
		'menu' : 'string|array $plugins, string $redirect, boolean $network_wide, boolean $silent | boolean|\WP_Error',
		'info' : "Activate multiple plugins."
	},
	'activate_sitewide_plugin(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'add_action(' : {
		'kind' : 'f',
		'menu' : 'string $tag, callable $function_to_add, integer $priority, integer $accepted_args | true',
		'info' : "Hooks a function on to a specific action."
	},
	'add_blog_option(' : {
		'kind' : 'f',
		'menu' : 'integer $id, string $option, mixed $value | boolean',
		'info' : "Add a new option for a given blog id."
	},
	'add_clean_index(' : {
		'kind' : 'f',
		'menu' : 'string $table, string $index | true'
	},
	'add_comment_meta(' : {
		'kind' : 'f',
		'menu' : 'integer $comment_id, string $meta_key, mixed $meta_value, boolean $unique | integer|boolean'
	},
	'add_comments_page(' : {
		'kind' : 'f',
		'menu' : 'string $page_title, string $menu_title, string $capability, string $menu_slug, callable $function | false|string',
		'info' : "Add submenu page to the Comments main menu."
	},
	'add_contextual_help(' : {
		'kind' : 'f',
		'menu' : 'string $screen, string $help',
		'info' : "Add contextual help text for a page."
	},
	'add_cssclass(' : {
		'kind' : 'f',
		'menu' : 'string $add, string $class | string'
	},
	'add_custom_background(' : {
		'kind' : 'f',
		'menu' : 'callable $wp_head_callback, callable $admin_head_callback, callable $admin_preview_callback'
	},
	'add_custom_image_header(' : {
		'kind' : 'f',
		'menu' : 'callable $wp_head_callback, callable $admin_head_callback, callable $admin_preview_callback'
	},
	'add_dashboard_page(' : {
		'kind' : 'f',
		'menu' : 'string $page_title, string $menu_title, string $capability, string $menu_slug, callable $function | false|string',
		'info' : "Add submenu page to the Dashboard main menu."
	},
	'add_editor_style(' : {
		'kind' : 'f',
		'menu' : 'array|string $stylesheet',
		'info' : "Add callback for custom TinyMCE editor stylesheets."
	},
	'add_existing_user_to_blog(' : {
		'kind' : 'f',
		'menu' : 'array $details | true|\WP_Error|void'
	},
	'add_feed(' : {
		'kind' : 'f',
		'menu' : 'string $feedname, callable $function | string'
	},
	'add_filter(' : {
		'kind' : 'f',
		'menu' : 'string $tag, callable $function_to_add, integer $priority, integer $accepted_args | true',
		'info' : "Hook a function or method to a specific filter action."
	},
	'add_image_size(' : {
		'kind' : 'f',
		'menu' : 'string $name, integer $width, integer $height, boolean|array $crop',
		'info' : "Register a new image size."
	},
	'add_link(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'add_links_page(' : {
		'kind' : 'f',
		'menu' : 'string $page_title, string $menu_title, string $capability, string $menu_slug, callable $function | false|string',
		'info' : "Add submenu page to the Links main menu."
	},
	'add_magic_quotes(' : {
		'kind' : 'f',
		'menu' : 'array $array | array'
	},
	'add_management_page(' : {
		'kind' : 'f',
		'menu' : 'string $page_title, string $menu_title, string $capability, string $menu_slug, callable $function | false|string',
		'info' : "Add submenu page to the Tools main menu."
	},
	'add_media_page(' : {
		'kind' : 'f',
		'menu' : 'string $page_title, string $menu_title, string $capability, string $menu_slug, callable $function | false|string',
		'info' : "Add submenu page to the Media main menu."
	},
	'add_menu_classes(' : {
		'kind' : 'f',
		'menu' : 'array $menu | array'
	},
	'add_menu_page(' : {
		'kind' : 'f',
		'menu' : 'string $page_title, string $menu_title, string $capability, string $menu_slug, callable $function, string $icon_url, integer $position | string',
		'info' : "Add a top-level menu page."
	},
	'add_meta(' : {
		'kind' : 'f',
		'menu' : 'integer $post_ID | integer|boolean'
	},
	'add_meta_box(' : {
		'kind' : 'f',
		'menu' : 'string $id, string $title, callable $callback, string|array|\WP_Screen $screen, string $context, string $priority, array $callback_args'
	},
	'add_metadata(' : {
		'kind' : 'f',
		'menu' : 'string $meta_type, integer $object_id, string $meta_key, mixed $meta_value, boolean $unique | integer|false'
	},
	'add_network_option(' : {
		'kind' : 'f',
		'menu' : 'integer $network_id, string $option, mixed $value | boolean',
		'info' : "Add a new network option."
	},
	'add_new_user_to_blog(' : {
		'kind' : 'f',
		'menu' : 'integer $user_id, mixed $password, array $meta',
		'info' : "Adds a newly created user to the appropriate blog"
	},
	'add_object_page(' : {
		'kind' : 'f',
		'menu' : 'string $page_title, string $menu_title, string $capability, string $menu_slug, callable $function, string $icon_url | string',
		'info' : "Add a top-level menu page in the 'objects' section."
	},
	'add_option(' : {
		'kind' : 'f',
		'menu' : 'string $option, mixed $value, string $deprecated, string|boolean $autoload | boolean',
		'info' : "Add a new option."
	},
	'add_option_update_handler(' : {
		'kind' : 'f',
		'menu' : 'string $option_group, string $option_name, callable $sanitize_callback'
	},
	'add_option_whitelist(' : {
		'kind' : 'f',
		'menu' : 'array $new_options, string|array $options | array'
	},
	'add_options_page(' : {
		'kind' : 'f',
		'menu' : 'string $page_title, string $menu_title, string $capability, string $menu_slug, callable $function | false|string',
		'info' : "Add submenu page to the Settings main menu."
	},
	'add_pages_page(' : {
		'kind' : 'f',
		'menu' : 'string $page_title, string $menu_title, string $capability, string $menu_slug, callable $function | false|string',
		'info' : "Add submenu page to the Pages main menu."
	},
	'add_permastruct(' : {
		'kind' : 'f',
		'menu' : 'string $name, string $struct, array $args'
	},
	'add_ping(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Post $post_id, string|array $uri | integer|false'
	},
	'add_plugins_page(' : {
		'kind' : 'f',
		'menu' : 'string $page_title, string $menu_title, string $capability, string $menu_slug, callable $function | false|string',
		'info' : "Add submenu page to the Plugins main menu."
	},
	'add_post_meta(' : {
		'kind' : 'f',
		'menu' : 'integer $post_id, string $meta_key, mixed $meta_value, boolean $unique | integer|false',
		'info' : "Add meta data field to a post."
	},
	'add_post_type_support(' : {
		'kind' : 'f',
		'menu' : 'string $post_type, string|array $feature',
		'info' : "Register support of certain features for a post type."
	},
	'add_posts_page(' : {
		'kind' : 'f',
		'menu' : 'string $page_title, string $menu_title, string $capability, string $menu_slug, callable $function | false|string',
		'info' : "Add submenu page to the Posts main menu."
	},
	'add_query_arg(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'add_rewrite_endpoint(' : {
		'kind' : 'f',
		'menu' : 'string $name, integer $places, string|boolean $query_var',
		'info' : "Add an endpoint, like /trackback/."
	},
	'add_rewrite_rule(' : {
		'kind' : 'f',
		'menu' : 'string $regex, string|array $query, string $after',
		'info' : "Adds a rewrite rule that transforms a URL structure to a set of query vars."
	},
	'add_rewrite_tag(' : {
		'kind' : 'f',
		'menu' : 'string $tag, string $regex, string $query',
		'info' : "Add a new rewrite tag (like %postname%)."
	},
	'add_role(' : {
		'kind' : 'f',
		'menu' : 'string $role, string $display_name, array $capabilities | \WP_Role|null'
	},
	'add_screen_option(' : {
		'kind' : 'f',
		'menu' : 'string $option, mixed $args'
	},
	'add_settings_error(' : {
		'kind' : 'f',
		'menu' : 'string $setting, string $code, string $message, string $type',
		'info' : "Register a settings error to be displayed to the user"
	},
	'add_settings_field(' : {
		'kind' : 'f',
		'menu' : 'string $id, string $title, callable $callback, string $page, string $section, array $args',
		'info' : "Add a new field to a section of a settings page"
	},
	'add_settings_section(' : {
		'kind' : 'f',
		'menu' : 'string $id, string $title, callable $callback, string $page',
		'info' : "Add a new section to a settings page."
	},
	'add_shortcode(' : {
		'kind' : 'f',
		'menu' : 'string $tag, callable $func',
		'info' : "Add hook for shortcode tag."
	},
	'add_site_option(' : {
		'kind' : 'f',
		'menu' : 'string $option, mixed $value | boolean',
		'info' : "Add a new option for the current network."
	},
	'add_submenu_page(' : {
		'kind' : 'f',
		'menu' : 'string $parent_slug, string $page_title, string $menu_title, string $capability, string $menu_slug, callable $function | false|string',
		'info' : "Add a submenu page."
	},
	'add_term_meta(' : {
		'kind' : 'f',
		'menu' : 'integer $term_id, string $meta_key, mixed $meta_value, boolean $unique | integer|\WP_Error|boolean'
	},
	'add_theme_page(' : {
		'kind' : 'f',
		'menu' : 'string $page_title, string $menu_title, string $capability, string $menu_slug, callable $function | false|string',
		'info' : "Add submenu page to the Appearance main menu."
	},
	'add_theme_support(' : {
		'kind' : 'f',
		'menu' : 'string $feature | void|boolean',
		'info' : "Registers theme support for a given feature."
	},
	'add_thickbox(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'add_user(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'add_user_meta(' : {
		'kind' : 'f',
		'menu' : 'integer $user_id, string $meta_key, mixed $meta_value, boolean $unique | integer|false',
		'info' : "Add meta data field to a user."
	},
	'add_user_to_blog(' : {
		'kind' : 'f',
		'menu' : 'integer $blog_id, integer $user_id, string $role | true|\WP_Error',
		'info' : "Adds a user to a blog."
	},
	'add_users_page(' : {
		'kind' : 'f',
		'menu' : 'string $page_title, string $menu_title, string $capability, string $menu_slug, callable $function | false|string',
		'info' : "Add submenu page to the Users/Profile main menu."
	},
	'add_utility_page(' : {
		'kind' : 'f',
		'menu' : 'string $page_title, string $menu_title, string $capability, string $menu_slug, callable $function, string $icon_url | string',
		'info' : "Add a top-level menu page in the 'utility' section."
	},
	'addslashes_gpc(' : {
		'kind' : 'f',
		'menu' : 'string $gpc | string',
		'info' : "Adds slashes to escape strings."
	},
	'adjacent_image_link(' : {
		'kind' : 'f',
		'menu' : 'boolean $prev, string|array $size, boolean $text',
		'info' : "Displays next or previous image link that has the same post parent."
	},
	'adjacent_post_link(' : {
		'kind' : 'f',
		'menu' : 'string $format, string $link, boolean $in_same_term, array|string $excluded_terms, boolean $previous, string $taxonomy',
		'info' : "Displays the adjacent post link."
	},
	'adjacent_posts_rel_link(' : {
		'kind' : 'f',
		'menu' : 'string $title, boolean $in_same_term, array|string $excluded_terms, string $taxonomy'
	},
	'adjacent_posts_rel_link_wp_head(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'admin_color_scheme_picker(' : {
		'kind' : 'f',
		'menu' : 'integer $user_id'
	},
	'admin_created_user_email(' : {
		'kind' : 'f',
		'menu' : 'string $text | string'
	},
	'admin_url(' : {
		'kind' : 'f',
		'menu' : 'string $path, string $scheme | string'
	},
	'akismet_add_comment_author_url(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'akismet_add_comment_nonce(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'akismet_admin_init(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'akismet_admin_menu(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'akismet_admin_warnings(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'akismet_auto_check_comment(' : {
		'kind' : 'f',
		'menu' : '$commentdata'
	},
	'akismet_auto_check_update_meta(' : {
		'kind' : 'f',
		'menu' : '$id, $comment'
	},
	'akismet_caught(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'akismet_check_db_comment(' : {
		'kind' : 'f',
		'menu' : '$id, $recheck_reason'
	},
	'akismet_check_for_spam_button(' : {
		'kind' : 'f',
		'menu' : '$comment_status'
	},
	'akismet_check_key_status(' : {
		'kind' : 'f',
		'menu' : '$key, $ip'
	},
	'akismet_check_server_connectivity(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'akismet_cmp_time(' : {
		'kind' : 'f',
		'menu' : '$a, $b'
	},
	'akismet_comment_column_row(' : {
		'kind' : 'f',
		'menu' : '$column, $comment_id'
	},
	'akismet_comment_row_action(' : {
		'kind' : 'f',
		'menu' : '$a, $comment'
	},
	'akismet_comment_status_meta_box(' : {
		'kind' : 'f',
		'menu' : '$comment'
	},
	'akismet_comments_columns(' : {
		'kind' : 'f',
		'menu' : '$columns'
	},
	'akismet_conf(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'akismet_cron_recheck(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'akismet_delete_old(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'akismet_delete_old_metadata(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'akismet_fix_scheduled_recheck(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'akismet_get_comment_history(' : {
		'kind' : 'f',
		'menu' : '$comment_id'
	},
	'akismet_get_ip_address(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'akismet_get_key(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'akismet_get_server_connectivity(' : {
		'kind' : 'f',
		'menu' : '$cache_timeout'
	},
	'akismet_get_user_comments_approved(' : {
		'kind' : 'f',
		'menu' : '$user_id, $comment_author_email, $comment_author, $comment_author_url'
	},
	'akismet_get_user_roles(' : {
		'kind' : 'f',
		'menu' : '$user_id'
	},
	'akismet_http_post(' : {
		'kind' : 'f',
		'menu' : '$request, $host, $path, $port, $ip'
	},
	'akismet_init(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'akismet_kill_proxy_check(' : {
		'kind' : 'f',
		'menu' : '$option'
	},
	'akismet_load_js_and_css(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'akismet_load_menu(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'akismet_manage_page(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'akismet_microtime(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'akismet_nonce_field(' : {
		'kind' : 'f',
		'menu' : '$action'
	},
	'akismet_pingback_forwarded_for(' : {
		'kind' : 'f',
		'menu' : '$r, $url'
	},
	'akismet_plugin_action_links(' : {
		'kind' : 'f',
		'menu' : '$links, $file'
	},
	'akismet_pre_check_pingback(' : {
		'kind' : 'f',
		'menu' : '$method'
	},
	'akismet_recheck_queue(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'akismet_register_widgets(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'akismet_remove_comment_author_url(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'akismet_result_hold(' : {
		'kind' : 'f',
		'menu' : '$approved'
	},
	'akismet_result_spam(' : {
		'kind' : 'f',
		'menu' : '$approved'
	},
	'akismet_rightnow(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'akismet_server_connectivity_ok(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'akismet_spam_comments(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'akismet_spam_count(' : {
		'kind' : 'f',
		'menu' : '$type'
	},
	'akismet_spam_totals(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'akismet_stats(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'akismet_stats_display(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'akismet_submit_nonspam_comment(' : {
		'kind' : 'f',
		'menu' : '$comment_id'
	},
	'akismet_submit_spam_comment(' : {
		'kind' : 'f',
		'menu' : '$comment_id'
	},
	'akismet_test_mode(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'akismet_text_add_link_callback(' : {
		'kind' : 'f',
		'menu' : '$m'
	},
	'akismet_text_add_link_class(' : {
		'kind' : 'f',
		'menu' : '$comment_text'
	},
	'akismet_transition_comment_status(' : {
		'kind' : 'f',
		'menu' : '$new_status, $old_status, $comment'
	},
	'akismet_update_alert(' : {
		'kind' : 'f',
		'menu' : '$response'
	},
	'akismet_update_comment_history(' : {
		'kind' : 'f',
		'menu' : '$comment_id, $message, $event'
	},
	'akismet_verify_key(' : {
		'kind' : 'f',
		'menu' : '$key, $ip'
	},
	'akismet_version_warning(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'allow_subdirectory_install(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'allow_subdomain_install(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'allowed_http_request_hosts(' : {
		'kind' : 'f',
		'menu' : 'boolean $is_external, string $host | boolean',
		'info' : "Whitelists allowed redirect hosts for safe HTTP requests as well."
	},
	'allowed_tags(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'antispambot(' : {
		'kind' : 'f',
		'menu' : 'string $email_address, integer $hex_encoding | string'
	},
	'apache_mod_loaded(' : {
		'kind' : 'f',
		'menu' : 'string $mod, boolean $default | boolean'
	},
	'apply_filters(' : {
		'kind' : 'f',
		'menu' : 'string $tag, mixed $value | mixed',
		'info' : "Call the functions added to a filter hook."
	},
	'apply_filters_deprecated(' : {
		'kind' : 'f',
		'menu' : 'string $tag, array $args, string $version, string $replacement, string $message',
		'info' : "Fires functions attached to a deprecated filter hook."
	},
	'apply_filters_ref_array(' : {
		'kind' : 'f',
		'menu' : 'string $tag, array $args | mixed'
	},
	'array_replace_recursive(' : {
		'kind' : 'f',
		'menu' : 'array $base, array $replacements | array',
		'info' : "PHP-agnostic version of {@link array_replace_recursive()}."
	},
	'atom_enclosure(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'atom_site_icon(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'attachment_id3_data_meta_box(' : {
		'kind' : 'f',
		'menu' : '\WP_Post $post'
	},
	'attachment_submit_meta_box(' : {
		'kind' : 'f',
		'menu' : 'object $post'
	},
	'attachment_submitbox_metadata(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'attachment_url_to_postid(' : {
		'kind' : 'f',
		'menu' : 'string $url | integer'
	},
	'attribute_escape(' : {
		'kind' : 'f',
		'menu' : 'string $text | string'
	},
	'auth_redirect(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'author_can(' : {
		'kind' : 'f',
		'menu' : 'integer|object $post, string $capability | boolean'
	},
	'automatic_feed_links(' : {
		'kind' : 'f',
		'menu' : 'boolean $add'
	},
	'avoid_blog_page_permalink_collision(' : {
		'kind' : 'f',
		'menu' : 'array $data, array $postarr | array',
		'info' : "Avoids a collision between a site slug and a permalink slug."
	},
	'background_color(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'background_image(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'backslashit(' : {
		'kind' : 'f',
		'menu' : 'string $string | string'
	},
	'balanceTags(' : {
		'kind' : 'f',
		'menu' : 'string $text, boolean $force | string'
	},
	'before_last_bar(' : {
		'kind' : 'f',
		'menu' : 'string $string | string',
		'info' : "Remove last item on a pipe-delimited string."
	},
	'bloginfo(' : {
		'kind' : 'f',
		'menu' : 'string $show'
	},
	'bloginfo_rss(' : {
		'kind' : 'f',
		'menu' : 'string $show',
		'info' : "Display RSS container for the bloginfo function."
	},
	'body_class(' : {
		'kind' : 'f',
		'menu' : 'string|array $class'
	},
	'bool_from_yn(' : {
		'kind' : 'f',
		'menu' : 'string $yn | boolean',
		'info' : "Whether input is yes or no."
	},
	'build_query(' : {
		'kind' : 'f',
		'menu' : 'array $data | string',
		'info' : "Build URL query based on an associative and, or indexed array."
	},
	'bulk_edit_posts(' : {
		'kind' : 'f',
		'menu' : 'array $post_data | array',
		'info' : "Process the post data for the bulk editing of posts."
	},
	'cache_javascript_headers(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'cache_users(' : {
		'kind' : 'f',
		'menu' : 'array $user_ids'
	},
	'calendar_week_mod(' : {
		'kind' : 'f',
		'menu' : 'integer $num | integer'
	},
	'can_edit_network(' : {
		'kind' : 'f',
		'menu' : 'integer $site_id | boolean',
		'info' : "Whether or not we can edit this network from this page."
	},
	'cancel_comment_reply_link(' : {
		'kind' : 'f',
		'menu' : 'string $text'
	},
	'capital_P_dangit(' : {
		'kind' : 'f',
		'menu' : 'string $text | string',
		'info' : "Forever eliminate 'Wordpress' from the planet (or at least the little bit we can influence)."
	},
	'cat_is_ancestor_of(' : {
		'kind' : 'f',
		'menu' : 'integer|object $cat1, integer|object $cat2 | boolean',
		'info' : "Check if a category is an ancestor of another category."
	},
	'category_description(' : {
		'kind' : 'f',
		'menu' : 'integer $category | string'
	},
	'category_exists(' : {
		'kind' : 'f',
		'menu' : 'integer|string $cat_name, integer $parent | mixed'
	},
	'check_admin_referer(' : {
		'kind' : 'f',
		'menu' : 'integer|string $action, string $query_arg | false|integer',
		'info' : "Makes sure that a user was referred from another admin page."
	},
	'check_ajax_referer(' : {
		'kind' : 'f',
		'menu' : 'integer|string $action, false|string $query_arg, boolean $die | false|integer'
	},
	'check_and_publish_future_post(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Post $post_id',
		'info' : "Publish future post and make sure post ID has future post status."
	},
	'check_column(' : {
		'kind' : 'f',
		'menu' : 'string $table_name, string $col_name, string $col_type, boolean $is_null, mixed $key, mixed $default, mixed $extra | boolean',
		'info' : "Check column matches criteria."
	},
	'check_comment(' : {
		'kind' : 'f',
		'menu' : 'string $author, string $email, string $url, string $comment, string $user_ip, string $user_agent, string $comment_type | boolean',
		'info' : "Check whether a comment passes internal checks to be allowed to add."
	},
	'check_comment_flood_db(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'check_import_new_users(' : {
		'kind' : 'f',
		'menu' : 'string $permission | boolean'
	},
	'check_password_reset_key(' : {
		'kind' : 'f',
		'menu' : 'string $key, string $login | \WP_User|\WP_Error',
		'info' : "Retrieves a user row based on password reset key and login"
	},
	'check_theme_switched(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'check_upload_mimes(' : {
		'kind' : 'f',
		'menu' : 'array $mimes | array',
		'info' : "Check an array of MIME types against a whitelist."
	},
	'check_upload_size(' : {
		'kind' : 'f',
		'menu' : 'array $file | array'
	},
	'checked(' : {
		'kind' : 'f',
		'menu' : 'mixed $checked, mixed $current, boolean $echo | string',
		'info' : "Outputs the html checked attribute."
	},
	'choose_primary_blog(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'clean_attachment_cache(' : {
		'kind' : 'f',
		'menu' : 'integer $id, boolean $clean_terms',
		'info' : "Will clean the attachment in the cache."
	},
	'clean_blog_cache(' : {
		'kind' : 'f',
		'menu' : '\WP_Site $blog'
	},
	'clean_bookmark_cache(' : {
		'kind' : 'f',
		'menu' : 'integer $bookmark_id'
	},
	'clean_category_cache(' : {
		'kind' : 'f',
		'menu' : 'integer $id'
	},
	'clean_comment_cache(' : {
		'kind' : 'f',
		'menu' : 'integer|array $ids'
	},
	'clean_network_cache(' : {
		'kind' : 'f',
		'menu' : 'integer|array $ids'
	},
	'clean_object_term_cache(' : {
		'kind' : 'f',
		'menu' : 'integer|array $object_ids, array|string $object_type',
		'info' : "Removes the taxonomy relationship to terms from the cache."
	},
	'clean_page_cache(' : {
		'kind' : 'f',
		'menu' : 'integer $id',
		'info' : "Will clean the page in the cache."
	},
	'clean_post_cache(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Post $post',
		'info' : "Will clean the post in the cache."
	},
	'clean_pre(' : {
		'kind' : 'f',
		'menu' : 'array|string $matches | string',
		'info' : "Accepts matches array from preg_replace_callback in wpautop() or a string."
	},
	'clean_term_cache(' : {
		'kind' : 'f',
		'menu' : 'integer|array $ids, string $taxonomy, boolean $clean_taxonomy'
	},
	'clean_url(' : {
		'kind' : 'f',
		'menu' : 'string $url, array $protocols, string $context | string',
		'info' : "Checks and cleans a URL."
	},
	'clean_user_cache(' : {
		'kind' : 'f',
		'menu' : '\WP_User|integer $user'
	},
	'clear_global_post_cache(' : {
		'kind' : 'f',
		'menu' : 'integer $post_id'
	},
	'codepress_footer_js(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'codepress_get_lang(' : {
		'kind' : 'f',
		'menu' : 'string $filename'
	},
	'comment_author(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Comment $comment_ID'
	},
	'comment_author_email(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Comment $comment_ID',
		'info' : "Display the email of the author of the current global $comment."
	},
	'comment_author_email_link(' : {
		'kind' : 'f',
		'menu' : 'string $linktext, string $before, string $after, integer|\WP_Comment $comment',
		'info' : "Display the html email link to the author of the current comment."
	},
	'comment_author_IP(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Comment $comment_ID'
	},
	'comment_author_link(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Comment $comment_ID'
	},
	'comment_author_rss(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'comment_author_url(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Comment $comment_ID'
	},
	'comment_author_url_link(' : {
		'kind' : 'f',
		'menu' : 'string $linktext, string $before, string $after, integer|\WP_Comment $comment'
	},
	'comment_class(' : {
		'kind' : 'f',
		'menu' : 'string|array $class, integer|\WP_Comment $comment, integer|\WP_Post $post_id, boolean $echo | string'
	},
	'comment_date(' : {
		'kind' : 'f',
		'menu' : 'string $d, integer|\WP_Comment $comment_ID'
	},
	'comment_excerpt(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Comment $comment_ID'
	},
	'comment_exists(' : {
		'kind' : 'f',
		'menu' : 'string $comment_author, string $comment_date, string $timezone | mixed',
		'info' : "Determine if a comment exists based on author and date."
	},
	'comment_footer_die(' : {
		'kind' : 'f',
		'menu' : 'string $msg'
	},
	'comment_form(' : {
		'kind' : 'f',
		'menu' : 'array $args, integer|\WP_Post $post_id',
		'info' : "Outputs a complete commenting form for use within a template."
	},
	'comment_guid(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Comment $comment_id'
	},
	'comment_ID(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'comment_id_fields(' : {
		'kind' : 'f',
		'menu' : 'integer $id'
	},
	'comment_link(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Comment $comment'
	},
	'comment_reply_link(' : {
		'kind' : 'f',
		'menu' : 'array $args, integer $comment, integer|\WP_Post $post | mixed'
	},
	'comment_text(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Comment $comment_ID, array $args'
	},
	'comment_text_rss(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'comment_time(' : {
		'kind' : 'f',
		'menu' : 'string $d'
	},
	'comment_type(' : {
		'kind' : 'f',
		'menu' : 'string $commenttxt, string $trackbacktxt, string $pingbacktxt'
	},
	'comments_link(' : {
		'kind' : 'f',
		'menu' : 'string $deprecated, string $deprecated_2'
	},
	'comments_link_feed(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'comments_number(' : {
		'kind' : 'f',
		'menu' : 'string $zero, string $one, string $more, string $deprecated'
	},
	'comments_open(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Post $post_id | boolean'
	},
	'comments_popup_link(' : {
		'kind' : 'f',
		'menu' : 'string $zero, string $one, string $more, string $css_class, string $none'
	},
	'comments_popup_script(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'comments_rss(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'comments_rss_link(' : {
		'kind' : 'f',
		'menu' : 'string $link_text'
	},
	'comments_template(' : {
		'kind' : 'f',
		'menu' : 'string $file, boolean $separate_comments',
		'info' : "Load the comment template specified in $file."
	},
	'compression_test(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'confirm_another_blog_signup(' : {
		'kind' : 'f',
		'menu' : 'string $domain, string $path, string $blog_title, string $user_name, string $user_email, array $meta, integer $blog_id'
	},
	'confirm_blog_signup(' : {
		'kind' : 'f',
		'menu' : 'string $domain, string $path, string $blog_title, string $user_name, string $user_email, array $meta'
	},
	'confirm_delete_users(' : {
		'kind' : 'f',
		'menu' : 'array $users'
	},
	'confirm_user_signup(' : {
		'kind' : 'f',
		'menu' : 'string $user_name, string $user_email'
	},
	'content_url(' : {
		'kind' : 'f',
		'menu' : 'string $path | string'
	},
	'convert_chars(' : {
		'kind' : 'f',
		'menu' : 'string $content, string $deprecated | string'
	},
	'convert_invalid_entities(' : {
		'kind' : 'f',
		'menu' : 'string $content | string'
	},
	'convert_smilies(' : {
		'kind' : 'f',
		'menu' : 'string $text | string',
		'info' : "Convert text equivalent of smilies to images."
	},
	'convert_to_screen(' : {
		'kind' : 'f',
		'menu' : 'string $hook_name | \WP_Screen'
	},
	'copy_dir(' : {
		'kind' : 'f',
		'menu' : 'string $from, string $to, array $skip_list | mixed',
		'info' : "Copies a directory from one location to another via the WordPress Filesystem Abstraction."
	},
	'core_update_footer(' : {
		'kind' : 'f',
		'menu' : 'string $msg | string'
	},
	'core_upgrade_preamble(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'count_many_users_posts(' : {
		'kind' : 'f',
		'menu' : 'array $users, string|array $post_type, boolean $public_only | array'
	},
	'count_user_posts(' : {
		'kind' : 'f',
		'menu' : 'integer $userid, array|string $post_type, boolean $public_only | string'
	},
	'count_users(' : {
		'kind' : 'f',
		'menu' : 'string $strategy | array',
		'info' : "Count number of users who have each of the user roles."
	},
	'create_empty_blog(' : {
		'kind' : 'f',
		'menu' : 'string $domain, string $path, string $weblog_title, integer $site_id | string|integer'
	},
	'create_initial_post_types(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'create_initial_rest_routes(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'create_initial_taxonomies(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'create_user(' : {
		'kind' : 'f',
		'menu' : 'string $username, string $password, string $email | integer'
	},
	'current_action(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'current_filter(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'current_theme_info(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'current_theme_supports(' : {
		'kind' : 'f',
		'menu' : 'string $feature | boolean'
	},
	'current_time(' : {
		'kind' : 'f',
		'menu' : 'string $type, integer|boolean $gmt | integer|string',
		'info' : "Retrieve the current time based on specified type."
	},
	'current_user_can(' : {
		'kind' : 'f',
		'menu' : 'string $capability | boolean',
		'info' : "Whether the current user has a specific capability."
	},
	'current_user_can_for_blog(' : {
		'kind' : 'f',
		'menu' : 'integer $blog_id, string $capability | boolean'
	},
	'customize_themes_print_templates(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'dashboard_browser_nag_class(' : {
		'kind' : 'f',
		'menu' : 'array $classes | array'
	},
	'date_i18n(' : {
		'kind' : 'f',
		'menu' : 'string $dateformatstring, boolean|integer $unixtimestamp, boolean $gmt | string',
		'info' : "Retrieve the date in localized format, based on timestamp."
	},
	'dbDelta(' : {
		'kind' : 'f',
		'menu' : 'string|array $queries, boolean $execute | array',
		'info' : "Modifies the database based on specified SQL statements."
	},
	'deactivate_plugins(' : {
		'kind' : 'f',
		'menu' : 'string|array $plugins, boolean $silent, mixed $network_wide',
		'info' : "Deactivate a single plugin or multiple plugins."
	},
	'deactivate_sitewide_plugin(' : {
		'kind' : 'f',
		'menu' : '$plugin'
	},
	'dead_db(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'debug_fclose(' : {
		'kind' : 'f',
		'menu' : 'mixed $fp'
	},
	'debug_fopen(' : {
		'kind' : 'f',
		'menu' : 'string $filename, string $mode | false'
	},
	'debug_fwrite(' : {
		'kind' : 'f',
		'menu' : 'mixed $fp, string $string'
	},
	'default_password_nag(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'default_password_nag_edit_user(' : {
		'kind' : 'f',
		'menu' : 'integer $user_ID, object $old_data'
	},
	'default_password_nag_handler(' : {
		'kind' : 'f',
		'menu' : 'false $errors'
	},
	'default_topic_count_scale(' : {
		'kind' : 'f',
		'menu' : 'integer $count | integer'
	},
	'default_topic_count_text(' : {
		'kind' : 'f',
		'menu' : 'integer $count | integer'
	},
	'delete_all_user_settings(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'delete_blog_option(' : {
		'kind' : 'f',
		'menu' : 'integer $id, string $option | boolean'
	},
	'delete_comment_meta(' : {
		'kind' : 'f',
		'menu' : 'integer $comment_id, string $meta_key, mixed $meta_value | boolean',
		'info' : "Remove metadata matching criteria from a comment."
	},
	'delete_get_calendar_cache(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'delete_meta(' : {
		'kind' : 'f',
		'menu' : 'integer $mid | boolean'
	},
	'delete_metadata(' : {
		'kind' : 'f',
		'menu' : 'string $meta_type, integer $object_id, string $meta_key, mixed $meta_value, boolean $delete_all | boolean'
	},
	'delete_metadata_by_mid(' : {
		'kind' : 'f',
		'menu' : 'string $meta_type, integer $meta_id | boolean'
	},
	'delete_network_option(' : {
		'kind' : 'f',
		'menu' : 'integer $network_id, string $option | boolean'
	},
	'delete_option(' : {
		'kind' : 'f',
		'menu' : 'string $option | boolean'
	},
	'delete_plugins(' : {
		'kind' : 'f',
		'menu' : 'array $plugins, string $deprecated | boolean|null|\WP_Error'
	},
	'delete_post_meta(' : {
		'kind' : 'f',
		'menu' : 'integer $post_id, string $meta_key, mixed $meta_value | boolean',
		'info' : "Remove metadata matching criteria from a post."
	},
	'delete_post_meta_by_key(' : {
		'kind' : 'f',
		'menu' : 'string $post_meta_key | boolean'
	},
	'delete_post_thumbnail(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Post $post | boolean'
	},
	'delete_site_option(' : {
		'kind' : 'f',
		'menu' : 'string $option | boolean'
	},
	'delete_site_transient(' : {
		'kind' : 'f',
		'menu' : 'string $transient | boolean'
	},
	'delete_term_meta(' : {
		'kind' : 'f',
		'menu' : 'integer $term_id, string $meta_key, mixed $meta_value | boolean'
	},
	'delete_theme(' : {
		'kind' : 'f',
		'menu' : 'string $stylesheet, string $redirect | void|boolean|\WP_Error'
	},
	'delete_transient(' : {
		'kind' : 'f',
		'menu' : 'string $transient | boolean'
	},
	'delete_user_meta(' : {
		'kind' : 'f',
		'menu' : 'integer $user_id, string $meta_key, mixed $meta_value | boolean',
		'info' : "Remove metadata matching criteria from a user."
	},
	'delete_user_option(' : {
		'kind' : 'f',
		'menu' : 'integer $user_id, string $option_name, boolean $global | boolean',
		'info' : "Delete user option with global blog capability."
	},
	'delete_user_setting(' : {
		'kind' : 'f',
		'menu' : 'string $names | boolean|null',
		'info' : "Delete user interface settings."
	},
	'delete_usermeta(' : {
		'kind' : 'f',
		'menu' : 'integer $user_id, string $meta_key, mixed $meta_value | boolean'
	},
	'delete_users_add_js(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'deslash(' : {
		'kind' : 'f',
		'menu' : 'string $content | string'
	},
	'did_action(' : {
		'kind' : 'f',
		'menu' : 'string $tag | integer'
	},
	'disabled(' : {
		'kind' : 'f',
		'menu' : 'mixed $disabled, mixed $current, boolean $echo | string',
		'info' : "Outputs the html disabled attribute."
	},
	'discover_pingback_server_uri(' : {
		'kind' : 'f',
		'menu' : 'string $url, integer $deprecated | false|string',
		'info' : "Finds a pingback server URI based on the given URL."
	},
	'dismiss_core_update(' : {
		'kind' : 'f',
		'menu' : 'object $update | boolean'
	},
	'dismissed_updates(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'display_header(' : {
		'kind' : 'f',
		'menu' : 'string $body_classes'
	},
	'display_header_text(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'display_plugins_table(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'display_setup_form(' : {
		'kind' : 'f',
		'menu' : 'string|null $error'
	},
	'display_space_usage(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'display_theme(' : {
		'kind' : 'f',
		'menu' : 'object $theme'
	},
	'display_themes(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'do_accordion_sections(' : {
		'kind' : 'f',
		'menu' : 'string|object $screen, string $context, mixed $object | integer',
		'info' : "Meta Box Accordion Template Function"
	},
	'do_action(' : {
		'kind' : 'f',
		'menu' : 'string $tag, $arg',
		'info' : "Execute functions hooked on a specific action hook."
	},
	'do_action_deprecated(' : {
		'kind' : 'f',
		'menu' : 'string $tag, array $args, string $version, string $replacement, string $message',
		'info' : "Fires functions attached to a deprecated action hook."
	},
	'do_action_ref_array(' : {
		'kind' : 'f',
		'menu' : 'string $tag, array $args'
	},
	'do_activate_header(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'do_all_pings(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'do_core_upgrade(' : {
		'kind' : 'f',
		'menu' : 'boolean $reinstall'
	},
	'do_dismiss_core_update(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'do_enclose(' : {
		'kind' : 'f',
		'menu' : 'string $content, integer $post_ID',
		'info' : "Check content for video and audio links to add as enclosures."
	},
	'do_feed(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'do_feed_atom(' : {
		'kind' : 'f',
		'menu' : 'boolean $for_comments'
	},
	'do_feed_rdf(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'do_feed_rss(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'do_feed_rss2(' : {
		'kind' : 'f',
		'menu' : 'boolean $for_comments'
	},
	'do_meta_boxes(' : {
		'kind' : 'f',
		'menu' : 'string|\WP_Screen $screen, string $context, mixed $object | integer'
	},
	'do_robots(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'do_settings_fields(' : {
		'kind' : 'f',
		'menu' : 'string $page, string $section',
		'info' : "Print out the settings fields for a particular settings section"
	},
	'do_settings_sections(' : {
		'kind' : 'f',
		'menu' : 'string $page',
		'info' : "Prints out all settings sections added to a particular settings page"
	},
	'do_shortcode(' : {
		'kind' : 'f',
		'menu' : 'string $content, boolean $ignore_html | string',
		'info' : "Search content for shortcodes and filter shortcodes through their hooks."
	},
	'do_shortcode_tag(' : {
		'kind' : 'f',
		'menu' : 'array $m | string|false'
	},
	'do_shortcodes_in_html_tags(' : {
		'kind' : 'f',
		'menu' : 'string $content, boolean $ignore_html, array $tagnames | string',
		'info' : "Search only inside HTML elements for shortcodes and process them."
	},
	'do_signup_header(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'do_trackbacks(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Post $post_id'
	},
	'do_undismiss_core_update(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'documentation_link(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'doing_action(' : {
		'kind' : 'f',
		'menu' : 'string|null $action | boolean'
	},
	'doing_filter(' : {
		'kind' : 'f',
		'menu' : 'null|string $filter | boolean',
		'info' : "Retrieve the name of a filter currently being processed."
	},
	'dolly_css(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'domain_exists(' : {
		'kind' : 'f',
		'menu' : 'string $domain, string $path, integer $site_id | integer',
		'info' : "Check whether a blogname is already taken."
	},
	'download_url(' : {
		'kind' : 'f',
		'menu' : 'string $url, integer $timeout | mixed',
		'info' : "Downloads a URL to a local temporary file using the WordPress HTTP Class."
	},
	'drop_index(' : {
		'kind' : 'f',
		'menu' : 'string $table, string $index | true'
	},
	'dropdown_categories(' : {
		'kind' : 'f',
		'menu' : 'integer $default, integer $parent, array $popular_ids'
	},
	'dropdown_cats(' : {
		'kind' : 'f',
		'menu' : 'integer $optionall, string $all, string $orderby, string $order, integer $show_last_update, integer $show_count, integer $hide_empty, boolean $optionnone, integer $selected, integer $exclude | string'
	},
	'dropdown_link_categories(' : {
		'kind' : 'f',
		'menu' : 'integer $default'
	},
	'dynamic_sidebar(' : {
		'kind' : 'f',
		'menu' : 'integer|string $index | boolean',
		'info' : "Display dynamic sidebar."
	},
	'edit_bookmark_link(' : {
		'kind' : 'f',
		'menu' : 'string $link, string $before, string $after, integer $bookmark'
	},
	'edit_comment(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'edit_comment_link(' : {
		'kind' : 'f',
		'menu' : 'string $text, string $before, string $after'
	},
	'edit_form_image_editor(' : {
		'kind' : 'f',
		'menu' : '\WP_Post $post'
	},
	'edit_link(' : {
		'kind' : 'f',
		'menu' : 'integer $link_id | integer|\WP_Error'
	},
	'edit_post(' : {
		'kind' : 'f',
		'menu' : 'array $post_data | integer'
	},
	'edit_post_link(' : {
		'kind' : 'f',
		'menu' : 'string $text, string $before, string $after, integer $id, string $class'
	},
	'edit_tag_link(' : {
		'kind' : 'f',
		'menu' : 'string $link, string $before, string $after, \WP_Term $tag'
	},
	'edit_term_link(' : {
		'kind' : 'f',
		'menu' : 'string $link, string $before, string $after, object $term, boolean $echo | string|void'
	},
	'edit_user(' : {
		'kind' : 'f',
		'menu' : 'integer $user_id | integer|\WP_Error',
		'info' : "Edit user settings based on contents of $_POST"
	},
	'email_exists(' : {
		'kind' : 'f',
		'menu' : 'string $email | integer|false'
	},
	'endElement(' : {
		'kind' : 'f',
		'menu' : 'mixed $parser, string $tagName'
	},
	'enqueue_comment_hotkeys_js(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'enqueue_embed_scripts(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'ent2ncr(' : {
		'kind' : 'f',
		'menu' : 'string $text | string'
	},
	'esc_attr(' : {
		'kind' : 'f',
		'menu' : 'string $text | string'
	},
	'esc_attr__(' : {
		'kind' : 'f',
		'menu' : 'string $text, string $domain | string',
		'info' : "Retrieve the translation of $text and escapes it for safe use in an attribute."
	},
	'esc_attr_e(' : {
		'kind' : 'f',
		'menu' : 'string $text, string $domain'
	},
	'esc_attr_x(' : {
		'kind' : 'f',
		'menu' : 'string $text, string $context, string $domain | string'
	},
	'esc_html(' : {
		'kind' : 'f',
		'menu' : 'string $text | string'
	},
	'esc_html__(' : {
		'kind' : 'f',
		'menu' : 'string $text, string $domain | string',
		'info' : "Retrieve the translation of $text and escapes it for safe use in HTML output."
	},
	'esc_html_e(' : {
		'kind' : 'f',
		'menu' : 'string $text, string $domain'
	},
	'esc_html_x(' : {
		'kind' : 'f',
		'menu' : 'string $text, string $context, string $domain | string'
	},
	'esc_js(' : {
		'kind' : 'f',
		'menu' : 'string $text | string',
		'info' : "Escape single quotes, htmlspecialchar ' < > &, and fix line endings."
	},
	'esc_sql(' : {
		'kind' : 'f',
		'menu' : 'string|array $data | string|array',
		'info' : "Escapes data for use in a MySQL query."
	},
	'esc_textarea(' : {
		'kind' : 'f',
		'menu' : 'string $text | string'
	},
	'esc_url(' : {
		'kind' : 'f',
		'menu' : 'string $url, array $protocols, string $_context | string',
		'info' : "Checks and cleans a URL."
	},
	'esc_url_raw(' : {
		'kind' : 'f',
		'menu' : 'string $url, array $protocols | string'
	},
	'export_add_js(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'export_date_options(' : {
		'kind' : 'f',
		'menu' : 'string $post_type'
	},
	'export_wp(' : {
		'kind' : 'f',
		'menu' : 'array $args',
		'info' : "Generates the WXR export file for download."
	},
	'extract_from_markers(' : {
		'kind' : 'f',
		'menu' : 'string $filename, string $marker | array'
	},
	'favorite_actions(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'feed_content_type(' : {
		'kind' : 'f',
		'menu' : 'string $type'
	},
	'feed_links(' : {
		'kind' : 'f',
		'menu' : 'array $args'
	},
	'feed_links_extra(' : {
		'kind' : 'f',
		'menu' : 'array $args'
	},
	'fetch_feed(' : {
		'kind' : 'f',
		'menu' : 'mixed $url | \WP_Error|\SimplePie'
	},
	'fetch_rss(' : {
		'kind' : 'f',
		'menu' : 'string $url | boolean|\MagpieRSS'
	},
	'file_is_displayable_image(' : {
		'kind' : 'f',
		'menu' : 'string $path | boolean'
	},
	'file_is_valid_image(' : {
		'kind' : 'f',
		'menu' : 'string $path | boolean'
	},
	'filter_default_option(' : {
		'kind' : 'f',
		'menu' : 'mixed $default, string $option, boolean $passed_default | mixed',
		'info' : "Filter the default value for the option."
	},
	'filter_SSL(' : {
		'kind' : 'f',
		'menu' : 'string $url | string',
		'info' : "Formats a URL to use https."
	},
	'find_core_auto_update(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'find_core_update(' : {
		'kind' : 'f',
		'menu' : 'string $version, string $locale | object|false'
	},
	'find_posts_div(' : {
		'kind' : 'f',
		'menu' : 'string $found_action'
	},
	'fix_import_form_size(' : {
		'kind' : 'f',
		'menu' : 'integer $size | integer'
	},
	'fix_phpmailer_messageid(' : {
		'kind' : 'f',
		'menu' : '\PHPMailer $phpmailer'
	},
	'floated_admin_avatar(' : {
		'kind' : 'f',
		'menu' : 'string $name | string'
	},
	'flush_rewrite_rules(' : {
		'kind' : 'f',
		'menu' : 'boolean $hard'
	},
	'force_ssl_admin(' : {
		'kind' : 'f',
		'menu' : 'string|boolean $force | boolean'
	},
	'force_ssl_content(' : {
		'kind' : 'f',
		'menu' : 'boolean $force | boolean'
	},
	'force_ssl_login(' : {
		'kind' : 'f',
		'menu' : 'string|boolean $force | boolean'
	},
	'form_option(' : {
		'kind' : 'f',
		'menu' : 'string $option'
	},
	'format_code_lang(' : {
		'kind' : 'f',
		'menu' : 'string $code | string'
	},
	'format_for_editor(' : {
		'kind' : 'f',
		'menu' : 'string $text, string $default_editor | string',
		'info' : "Formats text for the editor."
	},
	'format_to_edit(' : {
		'kind' : 'f',
		'menu' : 'string $content, boolean $rich_text | string',
		'info' : "Acts on text which is about to be edited."
	},
	'format_to_post(' : {
		'kind' : 'f',
		'menu' : 'string $content | string',
		'info' : "Formerly used to escape strings before inserting into the DB."
	},
	'funky_javascript_callback(' : {
		'kind' : 'f',
		'menu' : 'array $matches | string'
	},
	'funky_javascript_fix(' : {
		'kind' : 'f',
		'menu' : 'string $text | string',
		'info' : "Fixes JavaScript bugs in browsers."
	},
	'gallery_shortcode(' : {
		'kind' : 'f',
		'menu' : 'array $attr | string',
		'info' : "Builds the Gallery shortcode output."
	},
	'gd_edit_image_support(' : {
		'kind' : 'f',
		'menu' : 'string $mime_type | boolean'
	},
	'generate_random_password(' : {
		'kind' : 'f',
		'menu' : 'integer $len'
	},
	'generic_ping(' : {
		'kind' : 'f',
		'menu' : 'integer $post_id | integer'
	},
	'get_404_template(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_active_blog_for_user(' : {
		'kind' : 'f',
		'menu' : 'integer $user_id | \WP_Site|void',
		'info' : "Get one of a user's active blogs"
	},
	'get_adjacent_post(' : {
		'kind' : 'f',
		'menu' : 'boolean $in_same_term, array|string $excluded_terms, boolean $previous, string $taxonomy | null|string|\WP_Post',
		'info' : "Retrieves the adjacent post."
	},
	'get_adjacent_post_link(' : {
		'kind' : 'f',
		'menu' : 'string $format, string $link, boolean $in_same_term, array|string $excluded_terms, boolean $previous, string $taxonomy | string',
		'info' : "Retrieves the adjacent post link."
	},
	'get_adjacent_post_rel_link(' : {
		'kind' : 'f',
		'menu' : 'string $title, boolean $in_same_term, array|string $excluded_terms, boolean $previous, string $taxonomy | string|void',
		'info' : "Retrieves the adjacent post relational link."
	},
	'get_admin_page_parent(' : {
		'kind' : 'f',
		'menu' : '$parent'
	},
	'get_admin_page_title(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_admin_url(' : {
		'kind' : 'f',
		'menu' : 'integer $blog_id, string $path, string $scheme | string'
	},
	'get_admin_users_for_domain(' : {
		'kind' : 'f',
		'menu' : 'string $sitedomain, string $path | array|false'
	},
	'get_all_category_ids(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_all_page_ids(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_all_post_type_supports(' : {
		'kind' : 'f',
		'menu' : 'string $post_type | array'
	},
	'get_all_user_settings(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_alloptions(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_alloptions_110(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_allowed_http_origins(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_allowed_mime_types(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_User $user | array'
	},
	'get_allowed_themes(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_ancestors(' : {
		'kind' : 'f',
		'menu' : 'integer $object_id, string $object_type, string $resource_type | array'
	},
	'get_approved_comments(' : {
		'kind' : 'f',
		'menu' : 'integer $post_id, array $args | integer|array'
	},
	'get_archive_template(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_archives(' : {
		'kind' : 'f',
		'menu' : 'string $type, string $limit, string $format, string $before, string $after, boolean $show_post_count | string|null'
	},
	'get_archives_link(' : {
		'kind' : 'f',
		'menu' : 'string $url, string $text, string $format, string $before, string $after | string',
		'info' : "Retrieve archive link content based on predefined or custom code."
	},
	'get_attached_file(' : {
		'kind' : 'f',
		'menu' : 'integer $attachment_id, boolean $unfiltered | string|false',
		'info' : "Retrieve attached file path based on attachment ID."
	},
	'get_attached_media(' : {
		'kind' : 'f',
		'menu' : 'string $type, integer|\WP_Post $post | array'
	},
	'get_attachment_fields_to_edit(' : {
		'kind' : 'f',
		'menu' : '\WP_Post $post, array $errors | array'
	},
	'get_attachment_icon(' : {
		'kind' : 'f',
		'menu' : 'integer $id, boolean $fullsize, array $max_dims | false|string'
	},
	'get_attachment_icon_src(' : {
		'kind' : 'f',
		'menu' : 'integer $id, boolean $fullsize | array'
	},
	'get_attachment_innerHTML(' : {
		'kind' : 'f',
		'menu' : 'integer $id, boolean $fullsize, array $max_dims | false|string'
	},
	'get_attachment_link(' : {
		'kind' : 'f',
		'menu' : 'integer|object $post, boolean $leavename | string',
		'info' : "Retrieves the permalink for an attachment."
	},
	'get_attachment_taxonomies(' : {
		'kind' : 'f',
		'menu' : 'integer|array|object $attachment, string $output | array'
	},
	'get_attachment_template(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_author_feed_link(' : {
		'kind' : 'f',
		'menu' : 'integer $author_id, string $feed | string',
		'info' : "Retrieves the feed link for a given author."
	},
	'get_author_link(' : {
		'kind' : 'f',
		'menu' : 'boolean $echo, integer $author_id, string $author_nicename | string|null'
	},
	'get_author_name(' : {
		'kind' : 'f',
		'menu' : 'integer $auth_id | string'
	},
	'get_author_posts_url(' : {
		'kind' : 'f',
		'menu' : 'integer $author_id, string $author_nicename | string'
	},
	'get_author_rss_link(' : {
		'kind' : 'f',
		'menu' : 'boolean $echo, integer $author_id | string'
	},
	'get_author_template(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_author_user_ids(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_autotoggle(' : {
		'kind' : 'f',
		'menu' : 'integer $id | integer'
	},
	'get_available_languages(' : {
		'kind' : 'f',
		'menu' : 'string $dir | array',
		'info' : "Get all available languages based on the presence of *.mo files in a given directory."
	},
	'get_available_post_mime_types(' : {
		'kind' : 'f',
		'menu' : 'string $type | mixed'
	},
	'get_available_post_statuses(' : {
		'kind' : 'f',
		'menu' : 'string $type | array'
	},
	'get_avatar(' : {
		'kind' : 'f',
		'menu' : 'mixed $id_or_email, integer $size, string $default, string $alt, array $args | false|string'
	},
	'get_avatar_data(' : {
		'kind' : 'f',
		'menu' : 'mixed $id_or_email, array $args | array'
	},
	'get_avatar_url(' : {
		'kind' : 'f',
		'menu' : 'mixed $id_or_email, array $args | false|string'
	},
	'get_background_color(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_background_image(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_blog_count(' : {
		'kind' : 'f',
		'menu' : 'integer $network_id | integer',
		'info' : "The number of active sites on your installation."
	},
	'get_blog_details(' : {
		'kind' : 'f',
		'menu' : 'integer|string|array $fields, boolean $get_all | \WP_Site|false'
	},
	'get_blog_id_from_url(' : {
		'kind' : 'f',
		'menu' : 'string $domain, string $path | integer',
		'info' : "Get a blog's numeric ID from its URL."
	},
	'get_blog_list(' : {
		'kind' : 'f',
		'menu' : 'integer $start, integer $num, string $deprecated'
	},
	'get_blog_option(' : {
		'kind' : 'f',
		'menu' : 'integer $id, string $option, mixed $default | mixed',
		'info' : "Retrieve option value for a given blog id based on name of option."
	},
	'get_blog_permalink(' : {
		'kind' : 'f',
		'menu' : 'integer $blog_id, integer $post_id | string'
	},
	'get_blog_post(' : {
		'kind' : 'f',
		'menu' : 'integer $blog_id, integer $post_id | \WP_Post|null'
	},
	'get_blog_status(' : {
		'kind' : 'f',
		'menu' : 'integer $id, string $pref | boolean|string|null'
	},
	'get_blogaddress_by_domain(' : {
		'kind' : 'f',
		'menu' : 'string $domain, string $path | string'
	},
	'get_blogaddress_by_id(' : {
		'kind' : 'f',
		'menu' : 'integer $blog_id | string'
	},
	'get_blogaddress_by_name(' : {
		'kind' : 'f',
		'menu' : 'string $blogname | string'
	},
	'get_bloginfo(' : {
		'kind' : 'f',
		'menu' : 'string $show, string $filter | string',
		'info' : "Retrieves information about the current site."
	},
	'get_bloginfo_rss(' : {
		'kind' : 'f',
		'menu' : 'string $show | string',
		'info' : "RSS container for the bloginfo function."
	},
	'get_blogs_of_user(' : {
		'kind' : 'f',
		'menu' : 'integer $user_id, boolean $all | array'
	},
	'get_body_class(' : {
		'kind' : 'f',
		'menu' : 'string|array $class | array'
	},
	'get_bookmark(' : {
		'kind' : 'f',
		'menu' : 'integer|\stdClass $bookmark, string $output, string $filter | array|object|null'
	},
	'get_bookmark_field(' : {
		'kind' : 'f',
		'menu' : 'string $field, integer $bookmark, string $context | string|\WP_Error'
	},
	'get_bookmarks(' : {
		'kind' : 'f',
		'menu' : 'string|array $args | array',
		'info' : "Retrieves the list of bookmarks"
	},
	'get_boundary_post(' : {
		'kind' : 'f',
		'menu' : 'boolean $in_same_term, array|string $excluded_terms, boolean $start, string $taxonomy | null|array',
		'info' : "Retrieves the boundary post."
	},
	'get_boundary_post_rel_link(' : {
		'kind' : 'f',
		'menu' : 'string $title, boolean $in_same_cat, string $excluded_categories, boolean $start | string',
		'info' : "Get boundary post relational link."
	},
	'get_broken_themes(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_calendar(' : {
		'kind' : 'f',
		'menu' : 'boolean $initial, boolean $echo | string|void',
		'info' : "Display calendar with days that have posts as links."
	},
	'get_cancel_comment_reply_link(' : {
		'kind' : 'f',
		'menu' : 'string $text | string'
	},
	'get_cat_ID(' : {
		'kind' : 'f',
		'menu' : 'string $cat_name | integer'
	},
	'get_cat_name(' : {
		'kind' : 'f',
		'menu' : 'integer $cat_id | string'
	},
	'get_categories(' : {
		'kind' : 'f',
		'menu' : 'string|array $args | array',
		'info' : "Retrieve list of category objects."
	},
	'get_category(' : {
		'kind' : 'f',
		'menu' : 'integer|object $category, string $output, string $filter | object|array|\WP_Error|null',
		'info' : "Retrieves category data given a category ID or category object."
	},
	'get_category_by_path(' : {
		'kind' : 'f',
		'menu' : 'string $category_path, boolean $full_match, string $output | \WP_Term|array|\WP_Error|null',
		'info' : "Retrieve category based on URL containing the category slug."
	},
	'get_category_by_slug(' : {
		'kind' : 'f',
		'menu' : 'string $slug | object'
	},
	'get_category_children(' : {
		'kind' : 'f',
		'menu' : 'integer $id, string $before, string $after, array $visited | string'
	},
	'get_category_feed_link(' : {
		'kind' : 'f',
		'menu' : 'integer $cat_id, string $feed | string',
		'info' : "Retrieves the feed link for a category."
	},
	'get_category_link(' : {
		'kind' : 'f',
		'menu' : 'integer|object $category | string'
	},
	'get_category_parents(' : {
		'kind' : 'f',
		'menu' : 'integer $id, boolean $link, string $separator, boolean $nicename, array $visited | string|\WP_Error'
	},
	'get_category_rss_link(' : {
		'kind' : 'f',
		'menu' : 'boolean $echo, integer $cat_ID | string'
	},
	'get_category_template(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_category_to_edit(' : {
		'kind' : 'f',
		'menu' : 'integer $id | object'
	},
	'get_catname(' : {
		'kind' : 'f',
		'menu' : 'integer $cat_ID | string'
	},
	'get_children(' : {
		'kind' : 'f',
		'menu' : 'mixed $args, string $output | array',
		'info' : "Retrieve all children of the post parent ID."
	},
	'get_clean_basedomain(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_cli_args(' : {
		'kind' : 'f',
		'menu' : 'string $param, boolean $required | mixed',
		'info' : "Returns value of command line params."
	},
	'get_column_headers(' : {
		'kind' : 'f',
		'menu' : 'string|\WP_Screen $screen | array'
	},
	'get_comment(' : {
		'kind' : 'f',
		'menu' : '\WP_Comment|string|integer $comment, string $output | \WP_Comment|array|null',
		'info' : "Retrieves comment data given a comment ID or comment object."
	},
	'get_comment_author(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Comment $comment_ID | string',
		'info' : "Retrieve the author of the current comment."
	},
	'get_comment_author_email(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Comment $comment_ID | string'
	},
	'get_comment_author_email_link(' : {
		'kind' : 'f',
		'menu' : 'string $linktext, string $before, string $after, integer|\WP_Comment $comment | string',
		'info' : "Return the html email link to the author of the current comment."
	},
	'get_comment_author_IP(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Comment $comment_ID | string'
	},
	'get_comment_author_link(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Comment $comment_ID | string',
		'info' : "Retrieve the HTML link to the URL of the author of the current comment."
	},
	'get_comment_author_rss(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_comment_author_url(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Comment $comment_ID | string'
	},
	'get_comment_author_url_link(' : {
		'kind' : 'f',
		'menu' : 'string $linktext, string $before, string $after, integer|\WP_Comment $comment | string',
		'info' : "Retrieves the HTML link of the url of the author of the current comment."
	},
	'get_comment_class(' : {
		'kind' : 'f',
		'menu' : 'string|array $class, integer|\WP_Comment $comment_id, integer|\WP_Post $post_id | array'
	},
	'get_comment_count(' : {
		'kind' : 'f',
		'menu' : 'integer $post_id | array',
		'info' : "The amount of comments in a post or total comments."
	},
	'get_comment_date(' : {
		'kind' : 'f',
		'menu' : 'string $d, integer|\WP_Comment $comment_ID | string'
	},
	'get_comment_excerpt(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Comment $comment_ID | string',
		'info' : "Retrieve the excerpt of the current comment."
	},
	'get_comment_guid(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Comment $comment_id | false|string'
	},
	'get_comment_ID(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_comment_id_fields(' : {
		'kind' : 'f',
		'menu' : 'integer $id | string'
	},
	'get_comment_link(' : {
		'kind' : 'f',
		'menu' : '\WP_Comment|integer|null $comment, array $args | string'
	},
	'get_comment_meta(' : {
		'kind' : 'f',
		'menu' : 'integer $comment_id, string $key, boolean $single | mixed'
	},
	'get_comment_pages_count(' : {
		'kind' : 'f',
		'menu' : 'array $comments, integer $per_page, boolean $threaded | integer'
	},
	'get_comment_reply_link(' : {
		'kind' : 'f',
		'menu' : 'array $args, integer|\WP_Comment $comment, integer|\WP_Post $post | void|false|string'
	},
	'get_comment_statuses(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_comment_text(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Comment $comment_ID, array $args | string'
	},
	'get_comment_time(' : {
		'kind' : 'f',
		'menu' : 'string $d, boolean $gmt, boolean $translate | string'
	},
	'get_comment_to_edit(' : {
		'kind' : 'f',
		'menu' : 'integer $id | \WP_Comment|false'
	},
	'get_comment_type(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Comment $comment_ID | string'
	},
	'get_commentdata(' : {
		'kind' : 'f',
		'menu' : 'integer $comment_ID, integer $no_cache, boolean $include_unapproved | array'
	},
	'get_comments(' : {
		'kind' : 'f',
		'menu' : 'string|array $args | integer|array',
		'info' : "Retrieve a list of comments."
	},
	'get_comments_link(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Post $post_id | string'
	},
	'get_comments_number(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Post $post_id | integer'
	},
	'get_comments_number_text(' : {
		'kind' : 'f',
		'menu' : 'string $zero, string $one, string $more'
	},
	'get_comments_pagenum_link(' : {
		'kind' : 'f',
		'menu' : 'integer $pagenum, integer $max_page | string'
	},
	'get_comments_popup_template(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_compat_media_markup(' : {
		'kind' : 'f',
		'menu' : 'integer $attachment_id, array $args | array'
	},
	'get_core_checksums(' : {
		'kind' : 'f',
		'menu' : 'string $version, string $locale | boolean|array'
	},
	'get_core_updates(' : {
		'kind' : 'f',
		'menu' : 'array $options | array|false'
	},
	'get_current_blog_id(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_current_network_id(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_current_screen(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_current_site(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_current_site_name(' : {
		'kind' : 'f',
		'menu' : 'object $current_site | object',
		'info' : "This deprecated function formerly set the site_name property of the $current_site object."
	},
	'get_current_theme(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_current_user_id(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_currentuserinfo(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_custom_header(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_custom_header_markup(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_custom_logo(' : {
		'kind' : 'f',
		'menu' : 'integer $blog_id | string'
	},
	'get_dashboard_blog(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_dashboard_url(' : {
		'kind' : 'f',
		'menu' : 'integer $user_id, string $path, string $scheme | string',
		'info' : "Retrieves the URL to the user's dashboard."
	},
	'get_date_from_gmt(' : {
		'kind' : 'f',
		'menu' : 'string $string, string $format | string',
		'info' : "Converts a GMT date into the correct format for the blog."
	},
	'get_date_template(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_day_link(' : {
		'kind' : 'f',
		'menu' : 'boolean|integer $year, boolean|integer $month, boolean|integer $day | string'
	},
	'get_default_comment_status(' : {
		'kind' : 'f',
		'menu' : 'string $post_type, string $comment_type | string'
	},
	'get_default_feed(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_default_link_to_edit(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_default_page_to_edit(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_default_post_to_edit(' : {
		'kind' : 'f',
		'menu' : 'string $post_type, boolean $create_in_db | \WP_Post'
	},
	'get_delete_post_link(' : {
		'kind' : 'f',
		'menu' : 'integer $id, string $deprecated, boolean $force_delete | string|void',
		'info' : "Retrieves the delete posts link for post."
	},
	'get_dirsize(' : {
		'kind' : 'f',
		'menu' : 'string $directory | integer',
		'info' : "Get the size of a directory."
	},
	'get_dropins(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_edit_bookmark_link(' : {
		'kind' : 'f',
		'menu' : 'integer|\stdClass $link | string|void'
	},
	'get_edit_comment_link(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Comment $comment_id | string|void'
	},
	'get_edit_post_link(' : {
		'kind' : 'f',
		'menu' : 'integer $id, string $context | string|null',
		'info' : "Retrieves the edit post link for post."
	},
	'get_edit_profile_url(' : {
		'kind' : 'f',
		'menu' : 'integer $user_id, string $scheme | string'
	},
	'get_edit_tag_link(' : {
		'kind' : 'f',
		'menu' : 'integer $tag_id, string $taxonomy | string'
	},
	'get_edit_term_link(' : {
		'kind' : 'f',
		'menu' : 'integer $term_id, string $taxonomy, string $object_type | string|null'
	},
	'get_edit_user_link(' : {
		'kind' : 'f',
		'menu' : 'integer $user_id | string'
	},
	'get_editable_authors(' : {
		'kind' : 'f',
		'menu' : 'integer $user_id | array|boolean'
	},
	'get_editable_roles(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_editable_user_ids(' : {
		'kind' : 'f',
		'menu' : 'integer $user_id, boolean $exclude_zeros, $post_type | array'
	},
	'get_editor_stylesheets(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_embed_template(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_enclosed(' : {
		'kind' : 'f',
		'menu' : 'integer $post_id | array'
	},
	'get_extended(' : {
		'kind' : 'f',
		'menu' : 'string $post | array',
		'info' : "Get extended entry info ()."
	},
	'get_feed_link(' : {
		'kind' : 'f',
		'menu' : 'string $feed | string'
	},
	'get_file(' : {
		'kind' : 'f',
		'menu' : '$path'
	},
	'get_file_data(' : {
		'kind' : 'f',
		'menu' : 'string $file, array $default_headers, string $context | array',
		'info' : "Retrieve metadata from a file."
	},
	'get_file_description(' : {
		'kind' : 'f',
		'menu' : 'string $file | string'
	},
	'get_filesystem_method(' : {
		'kind' : 'f',
		'menu' : 'array $args, string $context, boolean $allow_relaxed_file_ownership | string',
		'info' : "Determines which method to use for reading, writing, modifying, or deleting files on the filesystem."
	},
	'get_footer(' : {
		'kind' : 'f',
		'menu' : 'string $name',
		'info' : "Load footer template."
	},
	'get_front_page_template(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_gmt_from_date(' : {
		'kind' : 'f',
		'menu' : 'string $string, string $format | string',
		'info' : "Returns a date in the GMT equivalent."
	},
	'get_header(' : {
		'kind' : 'f',
		'menu' : 'string $name',
		'info' : "Load header template."
	},
	'get_header_image(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_header_image_tag(' : {
		'kind' : 'f',
		'menu' : 'array $attr | string'
	},
	'get_header_textcolor(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_header_video_settings(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_header_video_url(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_hidden_columns(' : {
		'kind' : 'f',
		'menu' : 'string|\WP_Screen $screen | array'
	},
	'get_hidden_meta_boxes(' : {
		'kind' : 'f',
		'menu' : 'string|\WP_Screen $screen | array'
	},
	'get_home_path(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_home_template(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_home_url(' : {
		'kind' : 'f',
		'menu' : 'integer $blog_id, string $path, string|null $scheme | string',
		'info' : "Retrieves the URL for a given site where the front end is accessible."
	},
	'get_html_split_regex(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_http_origin(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_id_from_blogname(' : {
		'kind' : 'f',
		'menu' : 'string $slug | integer|null'
	},
	'get_image_send_to_editor(' : {
		'kind' : 'f',
		'menu' : 'integer $id, string $caption, string $title, string $align, string $url, boolean|string $rel, string|array $size, string $alt | string'
	},
	'get_image_tag(' : {
		'kind' : 'f',
		'menu' : 'integer $id, string $alt, string $title, string $align, string|array $size | string',
		'info' : "Gets an img tag for an image attachment, scaling it down if requested."
	},
	'get_importers(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_index_rel_link(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_index_template(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_inline_data(' : {
		'kind' : 'f',
		'menu' : '\WP_Post $post'
	},
	'get_intermediate_image_sizes(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_language_attributes(' : {
		'kind' : 'f',
		'menu' : 'string $doctype',
		'info' : "Gets the language attributes for the html tag."
	},
	'get_last_updated(' : {
		'kind' : 'f',
		'menu' : 'mixed $deprecated, integer $start, integer $quantity | array'
	},
	'get_lastcommentmodified(' : {
		'kind' : 'f',
		'menu' : 'string $timezone | string|false'
	},
	'get_lastpostdate(' : {
		'kind' : 'f',
		'menu' : 'string $timezone, string $post_type | string',
		'info' : "Retrieve the date that the last post was published."
	},
	'get_lastpostmodified(' : {
		'kind' : 'f',
		'menu' : 'string $timezone, string $post_type | string',
		'info' : "Get the timestamp of the last time any post was modified."
	},
	'get_link(' : {
		'kind' : 'f',
		'menu' : 'integer $bookmark_id, string $output, string $filter | object|array'
	},
	'get_link_to_edit(' : {
		'kind' : 'f',
		'menu' : 'integer|\stdClass $link | object'
	},
	'get_linkcatname(' : {
		'kind' : 'f',
		'menu' : 'integer $id | string'
	},
	'get_linkobjects(' : {
		'kind' : 'f',
		'menu' : 'integer $category, string $orderby, integer $limit | array',
		'info' : "Gets an array of link objects associated with category n."
	},
	'get_linkobjectsbyname(' : {
		'kind' : 'f',
		'menu' : 'string $cat_name, string $orderby, integer $limit | array',
		'info' : "Gets an array of link objects associated with category $cat_name."
	},
	'get_linkrating(' : {
		'kind' : 'f',
		'menu' : 'object $link | mixed'
	},
	'get_links(' : {
		'kind' : 'f',
		'menu' : 'integer $category, string $before, string $after, string $between, boolean $show_images, string $orderby, boolean $show_description, boolean $show_rating, integer $limit, integer $show_updated, boolean $echo | null|string'
	},
	'get_links_list(' : {
		'kind' : 'f',
		'menu' : 'string $order',
		'info' : "Output entire list of links by category."
	},
	'get_links_withrating(' : {
		'kind' : 'f',
		'menu' : 'integer $category, string $before, string $after, string $between, boolean $show_images, string $orderby, boolean $show_description, integer $limit, integer $show_updated'
	},
	'get_linksbyname(' : {
		'kind' : 'f',
		'menu' : 'string $cat_name, string $before, string $after, string $between, boolean $show_images, string $orderby, boolean $show_description, boolean $show_rating, integer $limit, integer $show_updated'
	},
	'get_linksbyname_withrating(' : {
		'kind' : 'f',
		'menu' : 'string $cat_name, string $before, string $after, string $between, boolean $show_images, string $orderby, boolean $show_description, integer $limit, integer $show_updated'
	},
	'get_locale(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_locale_stylesheet_uri(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_main_network_id(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_media_embedded_in_content(' : {
		'kind' : 'f',
		'menu' : 'string $content, array $types | array'
	},
	'get_media_item(' : {
		'kind' : 'f',
		'menu' : 'integer $attachment_id, string|array $args | string'
	},
	'get_media_items(' : {
		'kind' : 'f',
		'menu' : 'integer $post_id, array $errors | string',
		'info' : "Retrieve HTML for media items of post gallery."
	},
	'get_meta_keys(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_meta_sql(' : {
		'kind' : 'f',
		'menu' : 'array $meta_query, string $type, string $primary_table, string $primary_id_column, object $context | array'
	},
	'get_metadata(' : {
		'kind' : 'f',
		'menu' : 'string $meta_type, integer $object_id, string $meta_key, boolean $single | mixed'
	},
	'get_metadata_by_mid(' : {
		'kind' : 'f',
		'menu' : 'string $meta_type, integer $meta_id | object|false'
	},
	'get_month_link(' : {
		'kind' : 'f',
		'menu' : 'boolean|integer $year, boolean|integer $month | string'
	},
	'get_most_active_blogs(' : {
		'kind' : 'f',
		'menu' : 'integer $num, boolean $display | array'
	},
	'get_most_recent_post_of_user(' : {
		'kind' : 'f',
		'menu' : 'integer $user_id | array',
		'info' : "Get a user's most recent post."
	},
	'get_mu_plugins(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_nav_menu_locations(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_network(' : {
		'kind' : 'f',
		'menu' : '\WP_Network|integer|null $network | \WP_Network|null',
		'info' : "Retrieves network data given a network ID or network object."
	},
	'get_network_option(' : {
		'kind' : 'f',
		'menu' : 'integer $network_id, string $option, mixed $default | mixed'
	},
	'get_networks(' : {
		'kind' : 'f',
		'menu' : 'string|array $args | integer|array'
	},
	'get_next_comments_link(' : {
		'kind' : 'f',
		'menu' : 'string $label, integer $max_page | string|void'
	},
	'get_next_post(' : {
		'kind' : 'f',
		'menu' : 'boolean $in_same_term, array|string $excluded_terms, string $taxonomy | null|string|\WP_Post'
	},
	'get_next_post_link(' : {
		'kind' : 'f',
		'menu' : 'string $format, string $link, boolean $in_same_term, array|string $excluded_terms, string $taxonomy | string'
	},
	'get_next_posts_link(' : {
		'kind' : 'f',
		'menu' : 'string $label, integer $max_page | string|void'
	},
	'get_next_posts_page_link(' : {
		'kind' : 'f',
		'menu' : 'integer $max_page | string|void',
		'info' : "Retrieves the next posts page link."
	},
	'get_nonauthor_user_ids(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_num_queries(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_object_taxonomies(' : {
		'kind' : 'f',
		'menu' : 'array|string|\WP_Post $object, string $output | array',
		'info' : "Return the names or objects of the taxonomies which are registered for the requested object or object type, such as a post object or post type name."
	},
	'get_object_term_cache(' : {
		'kind' : 'f',
		'menu' : 'integer $id, string $taxonomy | boolean|array|\WP_Error',
		'info' : "Retrieves the taxonomy relationship to the term object id."
	},
	'get_objects_in_term(' : {
		'kind' : 'f',
		'menu' : 'integer|array $term_ids, string|array $taxonomies, array|string $args | \WP_Error|array',
		'info' : "Retrieve object_ids of valid taxonomy and term."
	},
	'get_oembed_endpoint_url(' : {
		'kind' : 'f',
		'menu' : 'string $permalink, string $format | string',
		'info' : "Retrieves the oEmbed endpoint URL for a given permalink."
	},
	'get_oembed_response_data(' : {
		'kind' : 'f',
		'menu' : '\WP_Post|integer $post, integer $width | array|false'
	},
	'get_oembed_response_data_rich(' : {
		'kind' : 'f',
		'menu' : 'array $data, \WP_Post $post, integer $width, integer $height | array'
	},
	'get_option(' : {
		'kind' : 'f',
		'menu' : 'string $option, mixed $default | mixed',
		'info' : "Retrieves an option value based on an option name."
	},
	'get_others_drafts(' : {
		'kind' : 'f',
		'menu' : 'integer $user_id | array'
	},
	'get_others_pending(' : {
		'kind' : 'f',
		'menu' : 'integer $user_id | array'
	},
	'get_others_unpublished_posts(' : {
		'kind' : 'f',
		'menu' : 'integer $user_id, string $type | array'
	},
	'get_page(' : {
		'kind' : 'f',
		'menu' : 'mixed $page, string $output, string $filter | \WP_Post|array|null',
		'info' : "Retrieves page data given a page ID or page object."
	},
	'get_page_by_path(' : {
		'kind' : 'f',
		'menu' : 'string $page_path, string $output, string|array $post_type | \WP_Post|array|null'
	},
	'get_page_by_title(' : {
		'kind' : 'f',
		'menu' : 'string $page_title, string $output, string|array $post_type | \WP_Post|array|null'
	},
	'get_page_children(' : {
		'kind' : 'f',
		'menu' : 'integer $page_id, array $pages | array',
		'info' : "Identify descendants of a given page ID in a list of page objects."
	},
	'get_page_hierarchy(' : {
		'kind' : 'f',
		'menu' : 'array $pages, integer $page_id | array',
		'info' : "Order the pages with children under parents in a flat list."
	},
	'get_page_link(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Post $post, boolean $leavename, boolean $sample | string',
		'info' : "Retrieves the permalink for the current page or page ID."
	},
	'get_page_of_comment(' : {
		'kind' : 'f',
		'menu' : 'integer $comment_ID, array $args | integer|null'
	},
	'get_page_statuses(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_page_template(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_page_template_slug(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Post $post | string|false'
	},
	'get_page_templates(' : {
		'kind' : 'f',
		'menu' : '\WP_Post|null $post, string $post_type | array'
	},
	'get_page_uri(' : {
		'kind' : 'f',
		'menu' : '\WP_Post|object|integer $page | string|false',
		'info' : "Build the URI path for a page."
	},
	'get_paged_template(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_pagenum_link(' : {
		'kind' : 'f',
		'menu' : 'integer $pagenum, boolean $escape | string'
	},
	'get_pages(' : {
		'kind' : 'f',
		'menu' : 'array|string $args | array|false'
	},
	'get_parent_post_rel_link(' : {
		'kind' : 'f',
		'menu' : 'string $title | string'
	},
	'get_parent_theme_file_path(' : {
		'kind' : 'f',
		'menu' : 'string $file | string'
	},
	'get_parent_theme_file_uri(' : {
		'kind' : 'f',
		'menu' : 'string $file | string'
	},
	'get_password_reset_key(' : {
		'kind' : 'f',
		'menu' : '\WP_User $user | string|\WP_Error'
	},
	'get_pending_comments_num(' : {
		'kind' : 'f',
		'menu' : 'integer|array $post_id | integer|array'
	},
	'get_permalink(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Post $post, boolean $leavename | string|false'
	},
	'get_plugin_data(' : {
		'kind' : 'f',
		'menu' : 'string $plugin_file, boolean $markup, boolean $translate | array',
		'info' : "Parses the plugin contents to retrieve plugin's metadata."
	},
	'get_plugin_files(' : {
		'kind' : 'f',
		'menu' : 'string $plugin | array'
	},
	'get_plugin_page_hook(' : {
		'kind' : 'f',
		'menu' : 'string $plugin_page, string $parent_page | string|null'
	},
	'get_plugin_page_hookname(' : {
		'kind' : 'f',
		'menu' : 'string $plugin_page, string $parent_page'
	},
	'get_plugin_updates(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_plugins(' : {
		'kind' : 'f',
		'menu' : 'string $plugin_folder | array',
		'info' : "Check the plugins directory and retrieve all plugin files with plugin data."
	},
	'get_post(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Post|null $post, string $output, string $filter | \WP_Post|array|null',
		'info' : "Retrieves post data given a post ID or post object."
	},
	'get_post_ancestors(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Post $post | array'
	},
	'get_post_class(' : {
		'kind' : 'f',
		'menu' : 'string|array $class, integer|\WP_Post $post_id | array',
		'info' : "Retrieves the classes for the post div as an array."
	},
	'get_post_comments_feed_link(' : {
		'kind' : 'f',
		'menu' : 'integer $post_id, string $feed | string'
	},
	'get_post_custom(' : {
		'kind' : 'f',
		'menu' : 'integer $post_id | array',
		'info' : "Retrieve post meta fields, based on post ID."
	},
	'get_post_custom_keys(' : {
		'kind' : 'f',
		'menu' : 'integer $post_id | array|void',
		'info' : "Retrieve meta field names for a post."
	},
	'get_post_custom_values(' : {
		'kind' : 'f',
		'menu' : 'string $key, integer $post_id | array|null',
		'info' : "Retrieve values for a custom post field."
	},
	'get_post_embed_html(' : {
		'kind' : 'f',
		'menu' : 'integer $width, integer $height, integer|\WP_Post $post | string|false'
	},
	'get_post_embed_url(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Post $post | string|false'
	},
	'get_post_field(' : {
		'kind' : 'f',
		'menu' : 'string $field, integer|\WP_Post $post, string $context | string',
		'info' : "Retrieve data from a post field based on Post ID."
	},
	'get_post_format(' : {
		'kind' : 'f',
		'menu' : 'integer|object|null $post | string|false'
	},
	'get_post_format_link(' : {
		'kind' : 'f',
		'menu' : 'string $format | string|\WP_Error|false'
	},
	'get_post_format_slugs(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_post_format_string(' : {
		'kind' : 'f',
		'menu' : 'string $slug | string'
	},
	'get_post_format_strings(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_post_galleries(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Post $post, boolean $html | array'
	},
	'get_post_galleries_images(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Post $post | array'
	},
	'get_post_gallery(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Post $post, boolean $html | string|array'
	},
	'get_post_gallery_images(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Post $post | array'
	},
	'get_post_meta(' : {
		'kind' : 'f',
		'menu' : 'integer $post_id, string $key, boolean $single | mixed'
	},
	'get_post_meta_by_id(' : {
		'kind' : 'f',
		'menu' : 'integer $mid | object|boolean'
	},
	'get_post_mime_type(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Post $ID | string|false',
		'info' : "Retrieve the mime type of an attachment based on the ID."
	},
	'get_post_mime_types(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_post_modified_time(' : {
		'kind' : 'f',
		'menu' : 'string $d, boolean $gmt, integer|\WP_Post $post, boolean $translate | string|integer|false'
	},
	'get_post_permalink(' : {
		'kind' : 'f',
		'menu' : 'integer $id, boolean $leavename, boolean $sample | string|\WP_Error'
	},
	'get_post_reply_link(' : {
		'kind' : 'f',
		'menu' : 'array $args, integer|\WP_Post $post | false|null|string'
	},
	'get_post_stati(' : {
		'kind' : 'f',
		'menu' : 'array|string $args, string $output, string $operator | array'
	},
	'get_post_status(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Post $ID | string|false',
		'info' : "Retrieve the post status based on the Post ID."
	},
	'get_post_status_object(' : {
		'kind' : 'f',
		'menu' : 'string $post_status | object|null'
	},
	'get_post_statuses(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_post_taxonomies(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Post $post | array'
	},
	'get_post_thumbnail_id(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Post $post | string|integer'
	},
	'get_post_time(' : {
		'kind' : 'f',
		'menu' : 'string $d, boolean $gmt, integer|\WP_Post $post, boolean $translate | string|integer|false'
	},
	'get_post_to_edit(' : {
		'kind' : 'f',
		'menu' : 'integer $id | object'
	},
	'get_post_type(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Post|null $post | string|false'
	},
	'get_post_type_archive_feed_link(' : {
		'kind' : 'f',
		'menu' : 'string $post_type, string $feed | string|false'
	},
	'get_post_type_archive_link(' : {
		'kind' : 'f',
		'menu' : 'string $post_type | string|false'
	},
	'get_post_type_archive_template(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_post_type_capabilities(' : {
		'kind' : 'f',
		'menu' : 'object $args | object',
		'info' : "Build an object with all post type capabilities out of a post type object"
	},
	'get_post_type_labels(' : {
		'kind' : 'f',
		'menu' : 'object|\WP_Post_Type $post_type_object | object',
		'info' : "Builds an object with all post type labels out of a post type object."
	},
	'get_post_type_object(' : {
		'kind' : 'f',
		'menu' : 'string $post_type | \WP_Post_Type|null'
	},
	'get_post_types(' : {
		'kind' : 'f',
		'menu' : 'array|string $args, string $output, string $operator | array'
	},
	'get_post_types_by_support(' : {
		'kind' : 'f',
		'menu' : 'array|string $feature, string $operator | array'
	},
	'get_postdata(' : {
		'kind' : 'f',
		'menu' : 'integer $postid | array'
	},
	'get_posts(' : {
		'kind' : 'f',
		'menu' : 'array $args | array',
		'info' : "Retrieve list of latest posts or posts matching criteria."
	},
	'get_posts_by_author_sql(' : {
		'kind' : 'f',
		'menu' : 'array|string $post_type, boolean $full, integer $post_author, boolean $public_only | string'
	},
	'get_posts_nav_link(' : {
		'kind' : 'f',
		'menu' : 'string|array $args | string'
	},
	'get_preferred_from_update_core(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_preview_post_link(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Post $post, array $query_args, string $preview_link | string|null',
		'info' : "Retrieves the URL used for the post preview."
	},
	'get_previous_comments_link(' : {
		'kind' : 'f',
		'menu' : 'string $label | string|void'
	},
	'get_previous_post(' : {
		'kind' : 'f',
		'menu' : 'boolean $in_same_term, array|string $excluded_terms, string $taxonomy | null|string|\WP_Post'
	},
	'get_previous_post_link(' : {
		'kind' : 'f',
		'menu' : 'string $format, string $link, boolean $in_same_term, array|string $excluded_terms, string $taxonomy | string'
	},
	'get_previous_posts_link(' : {
		'kind' : 'f',
		'menu' : 'string $label | string|void'
	},
	'get_previous_posts_page_link(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_private_posts_cap_sql(' : {
		'kind' : 'f',
		'menu' : 'string|array $post_type | string',
		'info' : "Retrieve the private post SQL based on capability."
	},
	'get_profile(' : {
		'kind' : 'f',
		'menu' : 'string $field, false|integer $user | string'
	},
	'get_pung(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Post $post_id | array'
	},
	'get_queried_object(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_queried_object_id(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_query_template(' : {
		'kind' : 'f',
		'menu' : 'string $type, array $templates | string',
		'info' : "Retrieve path to a template"
	},
	'get_query_var(' : {
		'kind' : 'f',
		'menu' : 'string $var, mixed $default | mixed'
	},
	'get_random_header_image(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_raw_theme_root(' : {
		'kind' : 'f',
		'menu' : 'string $stylesheet_or_template, boolean $skip_cache | string'
	},
	'get_real_file_to_edit(' : {
		'kind' : 'f',
		'menu' : 'string $file | string'
	},
	'get_registered_meta_keys(' : {
		'kind' : 'f',
		'menu' : 'string $object_type | array'
	},
	'get_registered_metadata(' : {
		'kind' : 'f',
		'menu' : 'string $object_type, integer $object_id, string $meta_key | mixed'
	},
	'get_registered_nav_menus(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_registered_settings(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_rest_url(' : {
		'kind' : 'f',
		'menu' : 'integer $blog_id, string $path, string $scheme | string',
		'info' : "Retrieves the URL to a REST endpoint on a site."
	},
	'get_role(' : {
		'kind' : 'f',
		'menu' : 'string $role | \WP_Role|null'
	},
	'get_rss(' : {
		'kind' : 'f',
		'menu' : 'string $url, integer $num_items | boolean',
		'info' : "Display RSS items in HTML list items."
	},
	'get_sample_permalink(' : {
		'kind' : 'f',
		'menu' : 'integer $id, string $title, string $name | array'
	},
	'get_sample_permalink_html(' : {
		'kind' : 'f',
		'menu' : 'integer $id, string $new_title, string $new_slug | string'
	},
	'get_screen_icon(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_search_comments_feed_link(' : {
		'kind' : 'f',
		'menu' : 'string $search_query, string $feed | string'
	},
	'get_search_feed_link(' : {
		'kind' : 'f',
		'menu' : 'string $search_query, string $feed | string'
	},
	'get_search_form(' : {
		'kind' : 'f',
		'menu' : 'boolean $echo | string|void',
		'info' : "Display search form."
	},
	'get_search_link(' : {
		'kind' : 'f',
		'menu' : 'string $query | string'
	},
	'get_search_query(' : {
		'kind' : 'f',
		'menu' : 'boolean $escaped | string',
		'info' : "Retrieves the contents of the search WordPress query variable."
	},
	'get_search_template(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_settings(' : {
		'kind' : 'f',
		'menu' : 'string $option | string'
	},
	'get_settings_errors(' : {
		'kind' : 'f',
		'menu' : 'string $setting, boolean $sanitize | array',
		'info' : "Fetch settings errors registered by add_settings_error()"
	},
	'get_shortcode_atts_regex(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_shortcode_regex(' : {
		'kind' : 'f',
		'menu' : 'array $tagnames | string',
		'info' : "Retrieve the shortcode regular expression for searching."
	},
	'get_shortcut_link(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_sidebar(' : {
		'kind' : 'f',
		'menu' : 'string $name',
		'info' : "Load sidebar template."
	},
	'get_single_template(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_singular_template(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_site(' : {
		'kind' : 'f',
		'menu' : '\WP_Site|integer|null $site | \WP_Site|null',
		'info' : "Retrieves site data given a site ID or site object."
	},
	'get_site_allowed_themes(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_site_by_path(' : {
		'kind' : 'f',
		'menu' : 'string $domain, string $path, integer|null $segments | \WP_Site|false',
		'info' : "Retrieves the closest matching site object by its domain and path."
	},
	'get_site_icon_url(' : {
		'kind' : 'f',
		'menu' : 'integer $size, string $url, integer $blog_id | string'
	},
	'get_site_option(' : {
		'kind' : 'f',
		'menu' : 'string $option, mixed $default, boolean $deprecated | mixed'
	},
	'get_site_transient(' : {
		'kind' : 'f',
		'menu' : 'string $transient | mixed',
		'info' : "Get the value of a site transient."
	},
	'get_site_url(' : {
		'kind' : 'f',
		'menu' : 'integer $blog_id, string $path, string $scheme | string',
		'info' : "Retrieves the URL for a given site where WordPress application files (e.g. wp-blog-header.php or the wp-admin/ folder) are accessible."
	},
	'get_sites(' : {
		'kind' : 'f',
		'menu' : 'string|array $args | array'
	},
	'get_sitestats(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_space_allowed(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_space_used(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_status_header_desc(' : {
		'kind' : 'f',
		'menu' : 'integer $code | string'
	},
	'get_stylesheet(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_stylesheet_directory(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_stylesheet_directory_uri(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_stylesheet_uri(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_subdirectory_reserved_names(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_submit_button(' : {
		'kind' : 'f',
		'menu' : 'string $text, string $type, string $name, boolean $wrap, array|string $other_attributes | string'
	},
	'get_super_admins(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_tag(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Term|object $tag, string $output, string $filter | \WP_Term|array|\WP_Error|null',
		'info' : "Retrieve post tag by tag ID or tag object."
	},
	'get_tag_feed_link(' : {
		'kind' : 'f',
		'menu' : 'integer $tag_id, string $feed | string'
	},
	'get_tag_link(' : {
		'kind' : 'f',
		'menu' : 'integer|object $tag | string'
	},
	'get_tag_regex(' : {
		'kind' : 'f',
		'menu' : 'string $tag | string',
		'info' : "Return RegEx body to liberally match an opening HTML tag."
	},
	'get_tag_template(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_tags(' : {
		'kind' : 'f',
		'menu' : 'string|array $args | array'
	},
	'get_tags_to_edit(' : {
		'kind' : 'f',
		'menu' : 'integer $post_id, string $taxonomy | string|boolean|\WP_Error'
	},
	'get_tax_sql(' : {
		'kind' : 'f',
		'menu' : 'array $tax_query, string $primary_table, string $primary_id_column | array'
	},
	'get_taxonomies(' : {
		'kind' : 'f',
		'menu' : 'array $args, string $output, string $operator | array'
	},
	'get_taxonomies_for_attachments(' : {
		'kind' : 'f',
		'menu' : 'string $output | array',
		'info' : "Retrieves all of the taxonomy names that are registered for attachments."
	},
	'get_taxonomy(' : {
		'kind' : 'f',
		'menu' : 'string $taxonomy | \WP_Taxonomy|false',
		'info' : "Retrieves the taxonomy object of $taxonomy."
	},
	'get_taxonomy_labels(' : {
		'kind' : 'f',
		'menu' : '\WP_Taxonomy $tax | object',
		'info' : "Builds an object with all taxonomy labels out of a taxonomy object"
	},
	'get_taxonomy_template(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_temp_dir(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_template(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_template_directory(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_template_directory_uri(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_template_part(' : {
		'kind' : 'f',
		'menu' : 'string $slug, string $name',
		'info' : "Load a template part into a template"
	},
	'get_term(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Term|object $term, string $taxonomy, string $output, string $filter | array|\WP_Term|\WP_Error|null',
		'info' : "Get all Term data from database by Term ID."
	},
	'get_term_by(' : {
		'kind' : 'f',
		'menu' : 'string $field, string|integer $value, string $taxonomy, string $output, string $filter | \WP_Term|array|false',
		'info' : "Get all Term data from database by Term field and data."
	},
	'get_term_children(' : {
		'kind' : 'f',
		'menu' : 'string $term_id, string $taxonomy | array|\WP_Error',
		'info' : "Merge all term children into a single array of their IDs."
	},
	'get_term_feed_link(' : {
		'kind' : 'f',
		'menu' : 'integer $term_id, string $taxonomy, string $feed | string|false',
		'info' : "Retrieves the feed link for a term."
	},
	'get_term_field(' : {
		'kind' : 'f',
		'menu' : 'string $field, integer|\WP_Term $term, string $taxonomy, string $context | string|integer|null|\WP_Error',
		'info' : "Get sanitized Term field."
	},
	'get_term_link(' : {
		'kind' : 'f',
		'menu' : 'object|integer|string $term, string $taxonomy | string|\WP_Error'
	},
	'get_term_meta(' : {
		'kind' : 'f',
		'menu' : 'integer $term_id, string $key, boolean $single | mixed'
	},
	'get_term_to_edit(' : {
		'kind' : 'f',
		'menu' : 'integer|object $id, string $taxonomy | string|integer|null|\WP_Error',
		'info' : "Sanitizes Term for editing."
	},
	'get_terms_to_edit(' : {
		'kind' : 'f',
		'menu' : 'integer $post_id, string $taxonomy | string|boolean|\WP_Error'
	},
	'get_the_archive_description(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_the_archive_title(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_the_attachment_link(' : {
		'kind' : 'f',
		'menu' : 'integer $id, boolean $fullsize, array $max_dims, boolean $permalink | string'
	},
	'get_the_author(' : {
		'kind' : 'f',
		'menu' : 'string $deprecated | string|null'
	},
	'get_the_author_aim(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_the_author_description(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_the_author_email(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_the_author_firstname(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_the_author_icq(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_the_author_ID(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_the_author_lastname(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_the_author_link(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_the_author_login(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_the_author_meta(' : {
		'kind' : 'f',
		'menu' : 'string $field, integer $user_id | string'
	},
	'get_the_author_msn(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_the_author_nickname(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_the_author_posts(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_the_author_posts_link(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_the_author_url(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_the_author_yim(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_the_category(' : {
		'kind' : 'f',
		'menu' : 'integer $id | array',
		'info' : "Retrieve post categories."
	},
	'get_the_category_by_ID(' : {
		'kind' : 'f',
		'menu' : 'integer $cat_ID | string|\WP_Error'
	},
	'get_the_category_list(' : {
		'kind' : 'f',
		'menu' : 'string $separator, string $parents, integer $post_id | string'
	},
	'get_the_category_rss(' : {
		'kind' : 'f',
		'menu' : 'string $type | string',
		'info' : "Retrieve all of the post categories, formatted for use in feeds."
	},
	'get_the_comments_navigation(' : {
		'kind' : 'f',
		'menu' : 'array $args | string'
	},
	'get_the_comments_pagination(' : {
		'kind' : 'f',
		'menu' : 'array $args | string'
	},
	'get_the_content(' : {
		'kind' : 'f',
		'menu' : 'string $more_link_text, boolean $strip_teaser | string'
	},
	'get_the_content_feed(' : {
		'kind' : 'f',
		'menu' : 'string $feed_type | string'
	},
	'get_the_date(' : {
		'kind' : 'f',
		'menu' : 'string $d, integer|\WP_Post $post | false|string',
		'info' : "Retrieve the date on which the post was written."
	},
	'get_the_excerpt(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Post $post | string'
	},
	'get_the_generator(' : {
		'kind' : 'f',
		'menu' : 'string $type | string|void',
		'info' : "Creates the generator XML or Comment for RSS, ATOM, etc."
	},
	'get_the_guid(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Post $post | string',
		'info' : "Retrieve the Post Global Unique Identifier (guid)."
	},
	'get_the_ID(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_the_modified_author(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_the_modified_date(' : {
		'kind' : 'f',
		'menu' : 'string $d, integer|\WP_Post $post | false|string'
	},
	'get_the_modified_time(' : {
		'kind' : 'f',
		'menu' : 'string $d, integer|\WP_Post $post | false|string'
	},
	'get_the_password_form(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Post $post | string'
	},
	'get_the_permalink(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Post $post, boolean $leavename | string|false',
		'info' : "Retrieves the full permalink for the current post or post ID."
	},
	'get_the_post_navigation(' : {
		'kind' : 'f',
		'menu' : 'array $args | string'
	},
	'get_the_post_thumbnail(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Post $post, string|array $size, string|array $attr | string',
		'info' : "Retrieve the post thumbnail."
	},
	'get_the_post_thumbnail_caption(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Post $post | string'
	},
	'get_the_post_thumbnail_url(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Post $post, string|array $size | string|false'
	},
	'get_the_posts_navigation(' : {
		'kind' : 'f',
		'menu' : 'array $args | string'
	},
	'get_the_posts_pagination(' : {
		'kind' : 'f',
		'menu' : 'array $args | string'
	},
	'get_the_tag_list(' : {
		'kind' : 'f',
		'menu' : 'string $before, string $sep, string $after, integer $id | string|false|\WP_Error'
	},
	'get_the_tags(' : {
		'kind' : 'f',
		'menu' : 'integer $id | array|false|\WP_Error'
	},
	'get_the_taxonomies(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Post $post, array $args | array',
		'info' : "Retrieve all taxonomies associated with a post."
	},
	'get_the_term_list(' : {
		'kind' : 'f',
		'menu' : 'integer $id, string $taxonomy, string $before, string $sep, string $after | string|false|\WP_Error'
	},
	'get_the_terms(' : {
		'kind' : 'f',
		'menu' : 'integer|object $post, string $taxonomy | array|false|\WP_Error'
	},
	'get_the_time(' : {
		'kind' : 'f',
		'menu' : 'string $d, integer|\WP_Post $post | string|integer|false'
	},
	'get_the_title(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Post $post | string',
		'info' : "Retrieve post title."
	},
	'get_the_title_rss(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_theme(' : {
		'kind' : 'f',
		'menu' : 'string $theme | array|null'
	},
	'get_theme_data(' : {
		'kind' : 'f',
		'menu' : 'string $theme_file | array'
	},
	'get_theme_feature_list(' : {
		'kind' : 'f',
		'menu' : 'boolean $api | array'
	},
	'get_theme_file_path(' : {
		'kind' : 'f',
		'menu' : 'string $file | string',
		'info' : "Retrieves the path of a file in the theme."
	},
	'get_theme_file_uri(' : {
		'kind' : 'f',
		'menu' : 'string $file | string',
		'info' : "Retrieves the URL of a file in the theme."
	},
	'get_theme_mod(' : {
		'kind' : 'f',
		'menu' : 'string $name, boolean|string $default | string',
		'info' : "Retrieve theme modification value for the current theme."
	},
	'get_theme_mods(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_theme_root(' : {
		'kind' : 'f',
		'menu' : 'string $stylesheet_or_template | string',
		'info' : "Retrieve path to themes directory."
	},
	'get_theme_root_uri(' : {
		'kind' : 'f',
		'menu' : 'string $stylesheet_or_template, string $theme_root | string',
		'info' : "Retrieve URI for themes directory."
	},
	'get_theme_roots(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_theme_starter_content(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_theme_support(' : {
		'kind' : 'f',
		'menu' : 'string $feature | mixed'
	},
	'get_theme_update_available(' : {
		'kind' : 'f',
		'menu' : '\WP_Theme $theme | false|string',
		'info' : "Retrieve the update link if there is a theme update available."
	},
	'get_theme_updates(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_themes(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_to_ping(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Post $post_id | array'
	},
	'get_trackback_url(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_transient(' : {
		'kind' : 'f',
		'menu' : 'string $transient | mixed',
		'info' : "Get the value of a transient."
	},
	'get_translations_for_domain(' : {
		'kind' : 'f',
		'menu' : 'string $domain | \Translations|\NOOP_Translations',
		'info' : "Return the Translations instance for a text domain."
	},
	'get_udims(' : {
		'kind' : 'f',
		'menu' : 'integer $width, integer $height | array'
	},
	'get_upload_iframe_src(' : {
		'kind' : 'f',
		'menu' : 'string $type, integer $post_id, string $tab | string'
	},
	'get_upload_space_available(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_uploaded_header_images(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_url_in_content(' : {
		'kind' : 'f',
		'menu' : 'string $content | string|false'
	},
	'get_user_by(' : {
		'kind' : 'f',
		'menu' : 'string $field, integer|string $value | \WP_User|false'
	},
	'get_user_by_email(' : {
		'kind' : 'f',
		'menu' : 'string $email | boolean|object'
	},
	'get_user_count(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'get_user_details(' : {
		'kind' : 'f',
		'menu' : 'string $username'
	},
	'get_user_id_from_string(' : {
		'kind' : 'f',
		'menu' : 'string $string | integer',
		'info' : "Get a numeric user ID from either an email address or a login."
	},
	'get_user_locale(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_User $user_id | string',
		'info' : "Retrieves the locale of a user."
	},
	'get_user_meta(' : {
		'kind' : 'f',
		'menu' : 'integer $user_id, string $key, boolean $single | mixed'
	},
	'get_user_metavalues(' : {
		'kind' : 'f',
		'menu' : 'array $ids | array'
	},
	'get_user_option(' : {
		'kind' : 'f',
		'menu' : 'string $option, integer $user, string $deprecated | mixed',
		'info' : "Retrieve user option that can be either per Site or per Network."
	},
	'get_user_setting(' : {
		'kind' : 'f',
		'menu' : 'string $name, string $default | mixed'
	},
	'get_user_to_edit(' : {
		'kind' : 'f',
		'menu' : 'integer $user_id | \WP_User|boolean'
	},
	'get_userdata(' : {
		'kind' : 'f',
		'menu' : 'integer $user_id | \WP_User|false'
	},
	'get_userdatabylogin(' : {
		'kind' : 'f',
		'menu' : 'string $user_login | boolean|object'
	},
	'get_usermeta(' : {
		'kind' : 'f',
		'menu' : 'integer $user_id, string $meta_key | mixed',
		'info' : "Retrieve user metadata."
	},
	'get_usernumposts(' : {
		'kind' : 'f',
		'menu' : 'integer $userid | integer'
	},
	'get_users(' : {
		'kind' : 'f',
		'menu' : 'array $args | array'
	},
	'get_users_drafts(' : {
		'kind' : 'f',
		'menu' : 'integer $user_id | array'
	},
	'get_users_of_blog(' : {
		'kind' : 'f',
		'menu' : 'integer $id | array',
		'info' : "Get users for the site."
	},
	'get_weekstartend(' : {
		'kind' : 'f',
		'menu' : 'string $mysqlstring, integer|string $start_of_week | array'
	},
	'get_wp_title_rss(' : {
		'kind' : 'f',
		'menu' : 'string $deprecated | string'
	},
	'get_year_link(' : {
		'kind' : 'f',
		'menu' : 'integer|boolean $year | string'
	},
	'global_terms(' : {
		'kind' : 'f',
		'menu' : 'integer $term_id, string $deprecated | integer'
	},
	'global_terms_enabled(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'got_mod_rewrite(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'got_url_rewrite(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'graceful_fail(' : {
		'kind' : 'f',
		'menu' : '$message'
	},
	'grant_super_admin(' : {
		'kind' : 'f',
		'menu' : 'integer $user_id | boolean'
	},
	'gzip_compression(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'has_action(' : {
		'kind' : 'f',
		'menu' : 'string $tag, callable|boolean $function_to_check | boolean|integer'
	},
	'has_category(' : {
		'kind' : 'f',
		'menu' : 'string|integer|array $category, integer|object $post | boolean'
	},
	'has_custom_header(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'has_custom_logo(' : {
		'kind' : 'f',
		'menu' : 'integer $blog_id | boolean'
	},
	'has_excerpt(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Post $id | boolean'
	},
	'has_filter(' : {
		'kind' : 'f',
		'menu' : 'string $tag, callable|boolean $function_to_check | false|integer'
	},
	'has_header_image(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'has_header_video(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'has_image_size(' : {
		'kind' : 'f',
		'menu' : 'string $name | boolean'
	},
	'has_meta(' : {
		'kind' : 'f',
		'menu' : 'integer $postid | mixed'
	},
	'has_nav_menu(' : {
		'kind' : 'f',
		'menu' : 'string $location | boolean'
	},
	'has_post_format(' : {
		'kind' : 'f',
		'menu' : 'string|array $format, object|integer|null $post | boolean'
	},
	'has_post_thumbnail(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Post $post | boolean'
	},
	'has_shortcode(' : {
		'kind' : 'f',
		'menu' : 'string $content, string $tag | boolean'
	},
	'has_site_icon(' : {
		'kind' : 'f',
		'menu' : 'integer $blog_id | boolean'
	},
	'has_tag(' : {
		'kind' : 'f',
		'menu' : 'string|integer|array $tag, integer|object $post | boolean',
		'info' : "Check if the current post has any of given tags."
	},
	'has_term(' : {
		'kind' : 'f',
		'menu' : 'string|integer|array $term, string $taxonomy, integer|object $post | boolean',
		'info' : "Check if the current post has any of given terms."
	},
	'hash_equals(' : {
		'kind' : 'f',
		'menu' : 'string $a, string $b | boolean',
		'info' : "Timing attack safe string comparison"
	},
	'have_comments(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'have_posts(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'header_image(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'header_textcolor(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'heartbeat_autosave(' : {
		'kind' : 'f',
		'menu' : 'array $response, array $data | array'
	},
	'hello_dolly(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'hello_dolly_get_lyric(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'home_url(' : {
		'kind' : 'f',
		'menu' : 'string $path, string|null $scheme | string',
		'info' : "Retrieves the URL for the current site where the front end is accessible."
	},
	'html_type_rss(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'htmlentities2(' : {
		'kind' : 'f',
		'menu' : 'string $myHTML | string'
	},
	'human_time_diff(' : {
		'kind' : 'f',
		'menu' : 'integer $from, integer $to | string',
		'info' : "Determines the difference between two timestamps."
	},
	'iframe_footer(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'iframe_header(' : {
		'kind' : 'f',
		'menu' : 'string $title, boolean $deprecated'
	},
	'iis7_add_rewrite_rule(' : {
		'kind' : 'f',
		'menu' : 'string $filename, string $rewrite_rule | boolean'
	},
	'iis7_delete_rewrite_rule(' : {
		'kind' : 'f',
		'menu' : 'string $filename | boolean'
	},
	'iis7_rewrite_rule_exists(' : {
		'kind' : 'f',
		'menu' : 'string $filename | boolean'
	},
	'iis7_save_url_rewrite_rules(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'iis7_supports_permalinks(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'image_add_caption(' : {
		'kind' : 'f',
		'menu' : 'string $html, integer $id, string $caption, string $title, string $align, string $url, string $size, string $alt | string'
	},
	'image_align_input_fields(' : {
		'kind' : 'f',
		'menu' : '\WP_Post $post, string $checked | string'
	},
	'image_attachment_fields_to_edit(' : {
		'kind' : 'f',
		'menu' : 'array $form_fields, object $post | array'
	},
	'image_attachment_fields_to_save(' : {
		'kind' : 'f',
		'menu' : 'array $post, array $attachment | array',
		'info' : "Filters input from media_upload_form_handler() and assigns a default post_title from the file name if none supplied."
	},
	'image_constrain_size_for_editor(' : {
		'kind' : 'f',
		'menu' : 'integer $width, integer $height, string|array $size, string $context | array',
		'info' : "Scale down the default size of an image."
	},
	'image_downsize(' : {
		'kind' : 'f',
		'menu' : 'integer $id, array|string $size | false|array',
		'info' : "Scale an image to fit a particular size (such as 'thumb' or 'medium')."
	},
	'image_edit_apply_changes(' : {
		'kind' : 'f',
		'menu' : '\WP_Image_Editor $image, array $changes | \WP_Image_Editor'
	},
	'image_get_intermediate_size(' : {
		'kind' : 'f',
		'menu' : 'integer $post_id, array|string $size | false|array',
		'info' : "Retrieves the image's intermediate size (resized) path, width, and height."
	},
	'image_hwstring(' : {
		'kind' : 'f',
		'menu' : 'integer|string $width, integer|string $height | string',
		'info' : "Retrieve width and height attributes using given width and height values."
	},
	'image_link_input_fields(' : {
		'kind' : 'f',
		'menu' : '\WP_Post $post, string $url_type | string'
	},
	'image_make_intermediate_size(' : {
		'kind' : 'f',
		'menu' : 'string $file, integer $width, integer $height, boolean $crop | false|array',
		'info' : "Resizes an image to make a thumbnail or intermediate size."
	},
	'image_media_send_to_editor(' : {
		'kind' : 'f',
		'menu' : 'string $html, integer $attachment_id, array $attachment | string'
	},
	'image_resize(' : {
		'kind' : 'f',
		'menu' : 'string $file, integer $max_w, integer $max_h, boolean $crop, string $suffix, string $dest_path, integer $jpeg_quality | mixed',
		'info' : "Scale down an image to fit a particular size and save a new copy of the image."
	},
	'image_resize_dimensions(' : {
		'kind' : 'f',
		'menu' : 'integer $orig_w, integer $orig_h, integer $dest_w, integer $dest_h, boolean|array $crop | false|array',
		'info' : "Retrieves calculated resize dimensions for use in WP_Image_Editor."
	},
	'image_size_input_fields(' : {
		'kind' : 'f',
		'menu' : '\WP_Post $post, boolean|string $check | array'
	},
	'img_caption_shortcode(' : {
		'kind' : 'f',
		'menu' : 'array $attr, string $content | string',
		'info' : "Builds the Caption shortcode output."
	},
	'in_category(' : {
		'kind' : 'f',
		'menu' : 'integer|string|array $category, integer|object $post | boolean',
		'info' : "Check if the current post is within any of the given categories."
	},
	'in_the_loop(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'includes_url(' : {
		'kind' : 'f',
		'menu' : 'string $path, string $scheme | string'
	},
	'index_rel_link(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'init(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'insert_blog(' : {
		'kind' : 'f',
		'menu' : 'string $domain, string $path, integer $site_id | integer|false',
		'info' : "Store basic site info in the blogs table."
	},
	'insert_with_markers(' : {
		'kind' : 'f',
		'menu' : 'string $filename, string $marker, array|string $insertion | boolean',
		'info' : "Inserts an array of strings into a file (.htaccess ), placing it between BEGIN and END markers."
	},
	'install_blog(' : {
		'kind' : 'f',
		'menu' : 'integer $blog_id, string $blog_title',
		'info' : "Install an empty blog."
	},
	'install_blog_defaults(' : {
		'kind' : 'f',
		'menu' : 'integer $blog_id, integer $user_id',
		'info' : "Set blog defaults."
	},
	'install_dashboard(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'install_global_terms(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'install_network(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'install_plugin_information(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'install_plugin_install_status(' : {
		'kind' : 'f',
		'menu' : 'array|object $api, boolean $loop | array'
	},
	'install_plugins_favorites_form(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'install_plugins_upload(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'install_popular_tags(' : {
		'kind' : 'f',
		'menu' : 'array $args | array'
	},
	'install_search_form(' : {
		'kind' : 'f',
		'menu' : 'boolean $deprecated'
	},
	'install_theme_information(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'install_theme_search_form(' : {
		'kind' : 'f',
		'menu' : 'boolean $type_selector'
	},
	'install_themes_dashboard(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'install_themes_feature_list(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'install_themes_upload(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'is_404(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'is_active_sidebar(' : {
		'kind' : 'f',
		'menu' : 'string|integer $index | boolean'
	},
	'is_active_widget(' : {
		'kind' : 'f',
		'menu' : 'string|false $callback, integer|false $widget_id, string|false $id_base, boolean $skip_inactive | string|false',
		'info' : "Whether widget is displayed on the front end."
	},
	'is_admin(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'is_admin_bar_showing(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'is_allowed_http_origin(' : {
		'kind' : 'f',
		'menu' : 'null|string $origin | string'
	},
	'is_archive(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'is_archived(' : {
		'kind' : 'f',
		'menu' : 'integer $id | string'
	},
	'is_attachment(' : {
		'kind' : 'f',
		'menu' : 'integer|string|array|object $attachment | boolean'
	},
	'is_author(' : {
		'kind' : 'f',
		'menu' : 'mixed $author | boolean',
		'info' : "Is the query for an existing author archive page?"
	},
	'is_blog_admin(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'is_blog_installed(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'is_blog_user(' : {
		'kind' : 'f',
		'menu' : 'integer $blog_id | boolean'
	},
	'is_category(' : {
		'kind' : 'f',
		'menu' : 'mixed $category | boolean',
		'info' : "Is the query for an existing category archive page?"
	},
	'is_child_theme(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'is_client_error(' : {
		'kind' : 'f',
		'menu' : '$sc'
	},
	'is_comment_feed(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'is_comments_popup(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'is_customize_preview(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'is_date(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'is_day(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'is_dynamic_sidebar(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'is_email(' : {
		'kind' : 'f',
		'menu' : 'string $email, boolean $deprecated | string|boolean',
		'info' : "Verifies that an email is valid."
	},
	'is_email_address_unsafe(' : {
		'kind' : 'f',
		'menu' : 'string $user_email | boolean',
		'info' : "Checks an email address against a list of banned domains."
	},
	'is_embed(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'is_error(' : {
		'kind' : 'f',
		'menu' : '$sc'
	},
	'is_feed(' : {
		'kind' : 'f',
		'menu' : 'string|array $feeds | boolean'
	},
	'is_front_page(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'is_header_video_active(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'is_home(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'is_info(' : {
		'kind' : 'f',
		'menu' : '$sc'
	},
	'is_lighttpd_before_150(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'is_local_attachment(' : {
		'kind' : 'f',
		'menu' : 'string $url | boolean'
	},
	'is_locale_switched(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'is_main_blog(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'is_main_network(' : {
		'kind' : 'f',
		'menu' : 'integer $network_id | boolean'
	},
	'is_main_query(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'is_main_site(' : {
		'kind' : 'f',
		'menu' : 'integer $site_id | boolean'
	},
	'is_month(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'is_multi_author(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'is_multisite(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'is_nav_menu(' : {
		'kind' : 'f',
		'menu' : 'integer|string $menu | boolean',
		'info' : "Check if the given ID is a navigation menu."
	},
	'is_nav_menu_item(' : {
		'kind' : 'f',
		'menu' : 'integer $menu_item_id | boolean'
	},
	'is_network_admin(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'is_network_only_plugin(' : {
		'kind' : 'f',
		'menu' : 'string $plugin | boolean',
		'info' : "Checks for 'Network: true' in the plugin header to see if this should be activated only as a network wide plugin. The plugin would also work when Multisite is not enabled."
	},
	'is_new_day(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'is_object_in_taxonomy(' : {
		'kind' : 'f',
		'menu' : 'string $object_type, string $taxonomy | boolean'
	},
	'is_object_in_term(' : {
		'kind' : 'f',
		'menu' : 'integer $object_id, string $taxonomy, integer|string|array $terms | boolean|\WP_Error',
		'info' : "Determine if the given object is associated with any of the given terms."
	},
	'is_page(' : {
		'kind' : 'f',
		'menu' : 'integer|string|array $page | boolean',
		'info' : "Is the query for an existing single page?"
	},
	'is_page_template(' : {
		'kind' : 'f',
		'menu' : 'string|array $template | boolean',
		'info' : "Whether currently in a page template."
	},
	'is_paged(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'is_plugin_active(' : {
		'kind' : 'f',
		'menu' : 'string $plugin | boolean',
		'info' : "Check whether a plugin is active."
	},
	'is_plugin_active_for_network(' : {
		'kind' : 'f',
		'menu' : 'string $plugin | boolean',
		'info' : "Check whether the plugin is active for the entire network."
	},
	'is_plugin_inactive(' : {
		'kind' : 'f',
		'menu' : 'string $plugin | boolean',
		'info' : "Check whether the plugin is inactive."
	},
	'is_plugin_page(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'is_post_type_archive(' : {
		'kind' : 'f',
		'menu' : 'string|array $post_types | boolean'
	},
	'is_post_type_hierarchical(' : {
		'kind' : 'f',
		'menu' : 'string $post_type | boolean',
		'info' : "Whether the post type is hierarchical."
	},
	'is_post_type_viewable(' : {
		'kind' : 'f',
		'menu' : 'string|\WP_Post_Type $post_type | boolean',
		'info' : "Determines whether a post type is considered 'viewable'."
	},
	'is_preview(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'is_protected_meta(' : {
		'kind' : 'f',
		'menu' : 'string $meta_key, string|null $meta_type | boolean'
	},
	'is_random_header_image(' : {
		'kind' : 'f',
		'menu' : 'string $type | boolean',
		'info' : "Check if random header image is in use."
	},
	'is_redirect(' : {
		'kind' : 'f',
		'menu' : '$sc'
	},
	'is_registered_sidebar(' : {
		'kind' : 'f',
		'menu' : 'string|integer $sidebar_id | boolean'
	},
	'is_robots(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'is_rtl(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'is_search(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'is_serialized(' : {
		'kind' : 'f',
		'menu' : 'string $data, boolean $strict | boolean',
		'info' : "Check value to find if it was serialized."
	},
	'is_serialized_string(' : {
		'kind' : 'f',
		'menu' : 'string $data | boolean'
	},
	'is_server_error(' : {
		'kind' : 'f',
		'menu' : '$sc'
	},
	'is_single(' : {
		'kind' : 'f',
		'menu' : 'integer|string|array $post | boolean',
		'info' : "Is the query for an existing single post?"
	},
	'is_singular(' : {
		'kind' : 'f',
		'menu' : 'string|array $post_types | boolean',
		'info' : "Is the query for an existing single post of any post type (post, attachment, page, ."
	},
	'is_site_admin(' : {
		'kind' : 'f',
		'menu' : 'string $user_login',
		'info' : "Determine if user is a site admin."
	},
	'is_ssl(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'is_sticky(' : {
		'kind' : 'f',
		'menu' : 'integer $post_id | boolean',
		'info' : "Check if post is sticky."
	},
	'is_subdomain_install(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'is_success(' : {
		'kind' : 'f',
		'menu' : '$sc'
	},
	'is_super_admin(' : {
		'kind' : 'f',
		'menu' : 'integer $user_id | boolean'
	},
	'is_tag(' : {
		'kind' : 'f',
		'menu' : 'mixed $tag | boolean',
		'info' : "Is the query for an existing tag archive page?"
	},
	'is_tax(' : {
		'kind' : 'f',
		'menu' : 'string|array $taxonomy, integer|string|array $term | boolean',
		'info' : "Is the query for an existing custom taxonomy archive page?"
	},
	'is_taxonomy(' : {
		'kind' : 'f',
		'menu' : 'string $taxonomy | boolean'
	},
	'is_taxonomy_hierarchical(' : {
		'kind' : 'f',
		'menu' : 'string $taxonomy | boolean',
		'info' : "Whether the taxonomy object is hierarchical."
	},
	'is_term(' : {
		'kind' : 'f',
		'menu' : 'integer|string $term, string $taxonomy, integer $parent | mixed'
	},
	'is_textdomain_loaded(' : {
		'kind' : 'f',
		'menu' : 'string $domain | boolean'
	},
	'is_time(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'is_trackback(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'is_uninstallable_plugin(' : {
		'kind' : 'f',
		'menu' : 'string $plugin | boolean'
	},
	'is_upload_space_available(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'is_user_admin(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'is_user_logged_in(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'is_user_member_of_blog(' : {
		'kind' : 'f',
		'menu' : 'integer $user_id, integer $blog_id | boolean'
	},
	'is_user_option_local(' : {
		'kind' : 'f',
		'menu' : 'string $key, integer $user_id, integer $blog_id | boolean'
	},
	'is_user_spammy(' : {
		'kind' : 'f',
		'menu' : 'string|\WP_User $user | boolean'
	},
	'is_wp_error(' : {
		'kind' : 'f',
		'menu' : 'mixed $thing | boolean',
		'info' : "Check whether variable is a WordPress Error."
	},
	'is_wpmu_sitewide_plugin(' : {
		'kind' : 'f',
		'menu' : '$file'
	},
	'is_year(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'iso8601_timezone_to_offset(' : {
		'kind' : 'f',
		'menu' : 'string $timezone | integer|float'
	},
	'iso8601_to_datetime(' : {
		'kind' : 'f',
		'menu' : 'string $date_string, string $timezone | string'
	},
	'js_escape(' : {
		'kind' : 'f',
		'menu' : 'string $text | string',
		'info' : "Escape single quotes, specialchar double quotes, and fix line endings."
	},
	'json_decode(' : {
		'kind' : 'f',
		'menu' : 'string $string, boolean $assoc_array | object|array'
	},
	'json_encode(' : {
		'kind' : 'f',
		'menu' : '$string'
	},
	'kses_init(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'kses_init_filters(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'kses_remove_filters(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'language_attributes(' : {
		'kind' : 'f',
		'menu' : 'string $doctype',
		'info' : "Displays the language attributes for the html tag."
	},
	'like_escape(' : {
		'kind' : 'f',
		'menu' : 'string $text | string'
	},
	'link_advanced_meta_box(' : {
		'kind' : 'f',
		'menu' : 'object $link'
	},
	'link_categories_meta_box(' : {
		'kind' : 'f',
		'menu' : 'object $link'
	},
	'link_pages(' : {
		'kind' : 'f',
		'menu' : 'string $before, string $after, string $next_or_number, string $nextpagelink, string $previouspagelink, string $pagelink, string $more_file | string'
	},
	'link_submit_meta_box(' : {
		'kind' : 'f',
		'menu' : 'object $link'
	},
	'link_target_meta_box(' : {
		'kind' : 'f',
		'menu' : 'object $link'
	},
	'link_xfn_meta_box(' : {
		'kind' : 'f',
		'menu' : 'object $link'
	},
	'links_add_base_url(' : {
		'kind' : 'f',
		'menu' : 'string $content, string $base, array $attrs | string',
		'info' : "Add a Base url to relative links in passed content."
	},
	'links_add_target(' : {
		'kind' : 'f',
		'menu' : 'string $content, string $target, array $tags | string',
		'info' : "Adds a Target attribute to all links in passed content."
	},
	'links_popup_script(' : {
		'kind' : 'f',
		'menu' : 'string $text, integer $width, integer $height, string $file, boolean $count'
	},
	'list_authors(' : {
		'kind' : 'f',
		'menu' : 'boolean $optioncount, boolean $exclude_admin, boolean $show_fullname, boolean $hide_empty, string $feed, string $feed_image | null|string'
	},
	'list_cats(' : {
		'kind' : 'f',
		'menu' : 'integer $optionall, string $all, string $sort_column, string $sort_order, string $file, boolean $list, integer $optiondates, integer $optioncount, integer $hide_empty, integer $use_desc_for_title, boolean $children, integer $child_of, integer $categories, integer $recurse, string $feed, string $feed_image, string $exclude, boolean $hierarchical | false|null'
	},
	'list_core_update(' : {
		'kind' : 'f',
		'menu' : 'object $update'
	},
	'list_files(' : {
		'kind' : 'f',
		'menu' : 'string $folder, integer $levels | boolean|array',
		'info' : "Returns a listing of all files in the specified folder and all subdirectories up to 100 levels deep."
	},
	'list_meta(' : {
		'kind' : 'f',
		'menu' : 'array $meta'
	},
	'list_plugin_updates(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'list_theme_updates(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'list_translation_updates(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'load_child_theme_textdomain(' : {
		'kind' : 'f',
		'menu' : 'string $domain, string $path | boolean',
		'info' : "Load the child themes translated strings."
	},
	'load_default_textdomain(' : {
		'kind' : 'f',
		'menu' : 'string $locale | boolean',
		'info' : "Load default translated strings based on locale."
	},
	'load_image_to_edit(' : {
		'kind' : 'f',
		'menu' : 'string $attachment_id, string $mime_type, string $size | resource|false'
	},
	'load_muplugin_textdomain(' : {
		'kind' : 'f',
		'menu' : 'string $domain, string $mu_plugin_rel_path | boolean'
	},
	'load_plugin_textdomain(' : {
		'kind' : 'f',
		'menu' : 'string $domain, string $deprecated, string $plugin_rel_path | boolean',
		'info' : "Loads a plugin's translated strings."
	},
	'load_template(' : {
		'kind' : 'f',
		'menu' : 'string $_template_file, boolean $require_once',
		'info' : "Require the template file with WordPress environment."
	},
	'load_textdomain(' : {
		'kind' : 'f',
		'menu' : 'string $domain, string $mofile | boolean',
		'info' : "Load a .mo file into the text domain $domain."
	},
	'load_theme_textdomain(' : {
		'kind' : 'f',
		'menu' : 'string $domain, string $path | boolean',
		'info' : "Load the theme's translated strings."
	},
	'locale_stylesheet(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'locate_template(' : {
		'kind' : 'f',
		'menu' : 'string|array $template_names, boolean $load, boolean $require_once | string',
		'info' : "Retrieve the name of the highest priority template file that exists."
	},
	'login_footer(' : {
		'kind' : 'f',
		'menu' : 'string $input_id'
	},
	'login_header(' : {
		'kind' : 'f',
		'menu' : 'string $title, string $message, \WP_Error $wp_error'
	},
	'logIO(' : {
		'kind' : 'f',
		'menu' : 'string $io, string $msg'
	},
	'maintenance_nag(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'make_clickable(' : {
		'kind' : 'f',
		'menu' : 'string $text | string',
		'info' : "Convert plaintext URI to HTML links."
	},
	'make_db_current(' : {
		'kind' : 'f',
		'menu' : 'string $tables',
		'info' : "Updates the database tables to a new schema."
	},
	'make_db_current_silent(' : {
		'kind' : 'f',
		'menu' : 'string $tables',
		'info' : "Updates the database tables to a new schema, but without displaying results."
	},
	'make_site_theme(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'make_site_theme_from_default(' : {
		'kind' : 'f',
		'menu' : 'string $theme_name, string $template | false|void'
	},
	'make_site_theme_from_oldschool(' : {
		'kind' : 'f',
		'menu' : 'string $theme_name, string $template | boolean'
	},
	'make_url_footnote(' : {
		'kind' : 'f',
		'menu' : 'string $content | string',
		'info' : "Strip HTML and put links at the bottom of stripped content."
	},
	'map_deep(' : {
		'kind' : 'f',
		'menu' : 'mixed $value, callable $callback | mixed',
		'info' : "Maps a function to all non-iterable elements of an array or an object."
	},
	'map_meta_cap(' : {
		'kind' : 'f',
		'menu' : 'string $cap, integer $user_id | array',
		'info' : "Map meta capabilities to primitive capabilities."
	},
	'maybe_add_column(' : {
		'kind' : 'f',
		'menu' : 'string $table_name, string $column_name, string $create_ddl | boolean'
	},
	'maybe_add_existing_user_to_blog(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'maybe_convert_table_to_utf8mb4(' : {
		'kind' : 'f',
		'menu' : 'string $table | boolean'
	},
	'maybe_create_table(' : {
		'kind' : 'f',
		'menu' : 'string $table_name, string $create_ddl | boolean',
		'info' : "Creates a table in the database if it doesn't already exist."
	},
	'maybe_disable_automattic_widgets(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'maybe_disable_link_manager(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'maybe_drop_column(' : {
		'kind' : 'f',
		'menu' : 'string $table_name, string $column_name, string $drop_ddl | boolean'
	},
	'maybe_hash_hex_color(' : {
		'kind' : 'f',
		'menu' : 'string $color | string',
		'info' : "Ensures that any hex color is properly hashed."
	},
	'maybe_redirect_404(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'maybe_serialize(' : {
		'kind' : 'f',
		'menu' : 'string|array|object $data | mixed'
	},
	'maybe_unserialize(' : {
		'kind' : 'f',
		'menu' : 'string $original | mixed'
	},
	'mbstring_binary_safe_encoding(' : {
		'kind' : 'f',
		'menu' : 'boolean $reset',
		'info' : "Set the mbstring internal encoding to a binary safe encoding when func_overload is enabled."
	},
	'media_buttons(' : {
		'kind' : 'f',
		'menu' : 'string $editor_id'
	},
	'media_handle_sideload(' : {
		'kind' : 'f',
		'menu' : 'array $file_array, integer $post_id, string $desc, array $post_data | integer|object'
	},
	'media_handle_upload(' : {
		'kind' : 'f',
		'menu' : 'string $file_id, integer $post_id, array $post_data, array $overrides | integer|\WP_Error'
	},
	'media_post_single_attachment_fields_to_edit(' : {
		'kind' : 'f',
		'menu' : 'array $form_fields, \WP_Post $post | array'
	},
	'media_send_to_editor(' : {
		'kind' : 'f',
		'menu' : 'string $html'
	},
	'media_sideload_image(' : {
		'kind' : 'f',
		'menu' : 'string $file, integer $post_id, string $desc, string $return | string|\WP_Error'
	},
	'media_single_attachment_fields_to_edit(' : {
		'kind' : 'f',
		'menu' : 'array $form_fields, \WP_Post $post | array'
	},
	'media_upload_audio(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'media_upload_file(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'media_upload_flash_bypass(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'media_upload_form(' : {
		'kind' : 'f',
		'menu' : 'array $errors'
	},
	'media_upload_form_handler(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'media_upload_gallery(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'media_upload_gallery_form(' : {
		'kind' : 'f',
		'menu' : 'array $errors'
	},
	'media_upload_header(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'media_upload_html_bypass(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'media_upload_image(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'media_upload_library(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'media_upload_library_form(' : {
		'kind' : 'f',
		'menu' : 'array $errors'
	},
	'media_upload_max_image_resize(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'media_upload_tabs(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'media_upload_text_after(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'media_upload_type_form(' : {
		'kind' : 'f',
		'menu' : 'string $type, object $errors, integer $id'
	},
	'media_upload_type_url_form(' : {
		'kind' : 'f',
		'menu' : 'string $type, object $errors, integer $id'
	},
	'media_upload_video(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'menu_page_url(' : {
		'kind' : 'f',
		'menu' : 'string $menu_slug, boolean $echo | string',
		'info' : "Get the url to access a particular menu page based on the slug it was registered with."
	},
	'meta_box_prefs(' : {
		'kind' : 'f',
		'menu' : '\WP_Screen $screen'
	},
	'meta_form(' : {
		'kind' : 'f',
		'menu' : '\WP_Post $post'
	},
	'metadata_exists(' : {
		'kind' : 'f',
		'menu' : 'string $meta_type, integer $object_id, string $meta_key | boolean'
	},
	'ms_allowed_http_request_hosts(' : {
		'kind' : 'f',
		'menu' : 'boolean $is_external, string $host | boolean',
		'info' : "Whitelists any domain in a multisite installation for safe HTTP requests."
	},
	'ms_cookie_constants(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'ms_deprecated_blogs_file(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'ms_file_constants(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'ms_is_switched(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'ms_load_current_site_and_network(' : {
		'kind' : 'f',
		'menu' : 'string $domain, string $path, boolean $subdomain | boolean|string',
		'info' : "Identifies the network and site of a requested domain and path and populates the corresponding network and site global objects as part of the multisite bootstrap process."
	},
	'ms_not_installed(' : {
		'kind' : 'f',
		'menu' : 'string $domain, string $path',
		'info' : "Displays a failure message."
	},
	'ms_site_check(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'ms_subdomain_constants(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'ms_upload_constants(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'mu_dropdown_languages(' : {
		'kind' : 'f',
		'menu' : 'array $lang_files, string $current'
	},
	'mu_options(' : {
		'kind' : 'f',
		'menu' : '$options'
	},
	'multisite_over_quota_message(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'mysql2date(' : {
		'kind' : 'f',
		'menu' : 'string $format, string $date, boolean $translate | string|integer|boolean',
		'info' : "Convert given date string into a different format."
	},
	'mysql_to_rfc3339(' : {
		'kind' : 'f',
		'menu' : 'string $date_string | string',
		'info' : "Parses and formats a MySQL datetime (Y-m-d H:i:s) for ISO8601/RFC3339."
	},
	'network_admin_url(' : {
		'kind' : 'f',
		'menu' : 'string $path, string $scheme | string'
	},
	'network_domain_check(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'network_edit_site_nav(' : {
		'kind' : 'f',
		'menu' : '$args'
	},
	'network_home_url(' : {
		'kind' : 'f',
		'menu' : 'string $path, string $scheme | string',
		'info' : "Retrieves the home URL for the current network."
	},
	'network_settings_add_js(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'network_site_url(' : {
		'kind' : 'f',
		'menu' : 'string $path, string $scheme | string',
		'info' : "Retrieves the site URL for the current network."
	},
	'network_step1(' : {
		'kind' : 'f',
		'menu' : '\WP_Error $errors'
	},
	'network_step2(' : {
		'kind' : 'f',
		'menu' : '\WP_Error $errors'
	},
	'new_user_email_admin_notice(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'newblog_notify_siteadmin(' : {
		'kind' : 'f',
		'menu' : 'integer $blog_id, string $deprecated | boolean',
		'info' : "Notifies the network admin that a new site has been activated."
	},
	'newuser_notify_siteadmin(' : {
		'kind' : 'f',
		'menu' : 'integer $user_id | boolean',
		'info' : "Notifies the network admin that a new user has been activated."
	},
	'next_comments_link(' : {
		'kind' : 'f',
		'menu' : 'string $label, integer $max_page'
	},
	'next_image_link(' : {
		'kind' : 'f',
		'menu' : 'string|array $size, string $text'
	},
	'next_post(' : {
		'kind' : 'f',
		'menu' : 'string $format, string $next, string $title, string $in_same_cat, integer $limitnext, string $excluded_categories'
	},
	'next_post_link(' : {
		'kind' : 'f',
		'menu' : 'string $format, string $link, boolean $in_same_term, array|string $excluded_terms, string $taxonomy'
	},
	'next_post_rel_link(' : {
		'kind' : 'f',
		'menu' : 'string $title, boolean $in_same_term, array|string $excluded_terms, string $taxonomy'
	},
	'next_posts(' : {
		'kind' : 'f',
		'menu' : 'integer $max_page, boolean $echo | string|void'
	},
	'next_posts_link(' : {
		'kind' : 'f',
		'menu' : 'string $label, integer $max_page'
	},
	'next_widget_id_number(' : {
		'kind' : 'f',
		'menu' : 'string $id_base | integer'
	},
	'nocache_headers(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'noindex(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'normalize_whitespace(' : {
		'kind' : 'f',
		'menu' : 'string $str | string'
	},
	'number_format_i18n(' : {
		'kind' : 'f',
		'menu' : 'float $number, integer $decimals | string'
	},
	'option_update_filter(' : {
		'kind' : 'f',
		'menu' : 'array $options | array',
		'info' : "Refreshes the value of the options whitelist available via the 'whitelist_options' hook."
	},
	'options_discussion_add_js(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'options_general_add_js(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'options_permalink_add_js(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'options_reading_add_js(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'options_reading_blog_charset(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'page_attributes_meta_box(' : {
		'kind' : 'f',
		'menu' : 'object $post'
	},
	'page_template_dropdown(' : {
		'kind' : 'f',
		'menu' : 'string $default, string $post_type'
	},
	'paginate_comments_links(' : {
		'kind' : 'f',
		'menu' : 'string|array $args | string|void'
	},
	'paginate_links(' : {
		'kind' : 'f',
		'menu' : 'string|array $args | array|string|void',
		'info' : "Retrieve paginated link for archive post pages."
	},
	'parent_dropdown(' : {
		'kind' : 'f',
		'menu' : 'integer $default, integer $parent, integer $level, integer|\WP_Post $post | null|false'
	},
	'parent_post_rel_link(' : {
		'kind' : 'f',
		'menu' : 'string $title'
	},
	'parse_w3cdtf(' : {
		'kind' : 'f',
		'menu' : '$date_str'
	},
	'path_is_absolute(' : {
		'kind' : 'f',
		'menu' : 'string $path | boolean',
		'info' : "Test if a give filesystem path is absolute."
	},
	'path_join(' : {
		'kind' : 'f',
		'menu' : 'string $base, string $path | string',
		'info' : "Join two filesystem paths together."
	},
	'PclZipUtilCopyBlock(' : {
		'kind' : 'f',
		'menu' : '$p_src, $p_dest, $p_size, $p_mode'
	},
	'PclZipUtilOptionText(' : {
		'kind' : 'f',
		'menu' : '$p_option'
	},
	'PclZipUtilPathInclusion(' : {
		'kind' : 'f',
		'menu' : '$p_dir, $p_path'
	},
	'PclZipUtilPathReduction(' : {
		'kind' : 'f',
		'menu' : '$p_dir'
	},
	'PclZipUtilRename(' : {
		'kind' : 'f',
		'menu' : '$p_src, $p_dest'
	},
	'PclZipUtilTranslateWinPath(' : {
		'kind' : 'f',
		'menu' : '$p_path, $p_remove_disk_letter'
	},
	'permalink_anchor(' : {
		'kind' : 'f',
		'menu' : 'string $mode',
		'info' : "Displays the permalink anchor for the current post."
	},
	'permalink_link(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'permalink_single_rss(' : {
		'kind' : 'f',
		'menu' : 'string $deprecated'
	},
	'pingback(' : {
		'kind' : 'f',
		'menu' : 'string $content, integer|\WP_Post $post_id'
	},
	'pingback_ping_source_uri(' : {
		'kind' : 'f',
		'menu' : 'string $source_uri | string'
	},
	'pings_open(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Post $post_id | boolean'
	},
	'plugin_basename(' : {
		'kind' : 'f',
		'menu' : 'string $file | string',
		'info' : "Gets the basename of a plugin."
	},
	'plugin_dir_path(' : {
		'kind' : 'f',
		'menu' : 'string $file | string'
	},
	'plugin_dir_url(' : {
		'kind' : 'f',
		'menu' : 'string $file | string'
	},
	'plugin_sandbox_scrape(' : {
		'kind' : 'f',
		'menu' : 'string $plugin'
	},
	'plugins_api(' : {
		'kind' : 'f',
		'menu' : 'string $action, array|object $args | object|array|\WP_Error',
		'info' : "Retrieves plugin installer pages from the WordPress.org Plugins API."
	},
	'plugins_url(' : {
		'kind' : 'f',
		'menu' : 'string $path, string $plugin | string',
		'info' : "Retrieves a URL within the plugins or mu-plugins directory."
	},
	'populate_network(' : {
		'kind' : 'f',
		'menu' : 'integer $network_id, string $domain, string $email, string $site_name, string $path, boolean $subdomain_install | boolean|\WP_Error'
	},
	'populate_options(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'populate_roles(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'populate_roles_160(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'populate_roles_210(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'populate_roles_230(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'populate_roles_250(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'populate_roles_260(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'populate_roles_270(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'populate_roles_280(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'populate_roles_300(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'popuplinks(' : {
		'kind' : 'f',
		'menu' : 'string $text | string'
	},
	'post_author_meta_box(' : {
		'kind' : 'f',
		'menu' : 'object $post'
	},
	'post_categories_meta_box(' : {
		'kind' : 'f',
		'menu' : '\WP_Post $post, array $box'
	},
	'post_class(' : {
		'kind' : 'f',
		'menu' : 'string|array $class, integer|\WP_Post $post_id'
	},
	'post_comment_meta_box(' : {
		'kind' : 'f',
		'menu' : 'object $post'
	},
	'post_comment_meta_box_thead(' : {
		'kind' : 'f',
		'menu' : 'array $result | array'
	},
	'post_comment_status_meta_box(' : {
		'kind' : 'f',
		'menu' : 'object $post'
	},
	'post_comments_feed_link(' : {
		'kind' : 'f',
		'menu' : 'string $link_text, integer $post_id, string $feed',
		'info' : "Displays the comment feed link for a post."
	},
	'post_custom(' : {
		'kind' : 'f',
		'menu' : 'string $key | false|string|array'
	},
	'post_custom_meta_box(' : {
		'kind' : 'f',
		'menu' : 'object $post'
	},
	'post_excerpt_meta_box(' : {
		'kind' : 'f',
		'menu' : 'object $post'
	},
	'post_exists(' : {
		'kind' : 'f',
		'menu' : 'string $title, string $content, string $date | integer'
	},
	'post_form_autocomplete_off(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'post_format_meta_box(' : {
		'kind' : 'f',
		'menu' : '\WP_Post $post, array $box'
	},
	'post_password_required(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Post|null $post | boolean'
	},
	'post_permalink(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Post $post_id | string|false'
	},
	'post_preview(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'post_reply_link(' : {
		'kind' : 'f',
		'menu' : 'array $args, integer|\WP_Post $post | string|boolean|null'
	},
	'post_revisions_meta_box(' : {
		'kind' : 'f',
		'menu' : 'object $post'
	},
	'post_slug_meta_box(' : {
		'kind' : 'f',
		'menu' : 'object $post'
	},
	'post_submit_meta_box(' : {
		'kind' : 'f',
		'menu' : '\WP_Post $post, array $args'
	},
	'post_tags_meta_box(' : {
		'kind' : 'f',
		'menu' : '\WP_Post $post, array $box'
	},
	'post_thumbnail_meta_box(' : {
		'kind' : 'f',
		'menu' : '\WP_Post $post'
	},
	'post_trackback_meta_box(' : {
		'kind' : 'f',
		'menu' : 'object $post'
	},
	'post_type_archive_title(' : {
		'kind' : 'f',
		'menu' : 'string $prefix, boolean $display | string|void',
		'info' : "Display or retrieve title for a post type archive."
	},
	'post_type_exists(' : {
		'kind' : 'f',
		'menu' : 'string $post_type | boolean'
	},
	'post_type_supports(' : {
		'kind' : 'f',
		'menu' : 'string $post_type, string $feature | boolean'
	},
	'postbox_classes(' : {
		'kind' : 'f',
		'menu' : 'string $id, string $page | string'
	},
	'posts_nav_link(' : {
		'kind' : 'f',
		'menu' : 'string $sep, string $prelabel, string $nxtlabel'
	},
	'pre_schema_upgrade(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'prep_atom_text_construct(' : {
		'kind' : 'f',
		'menu' : 'string $data | array',
		'info' : "Determine the type of a string of data with the data formatted."
	},
	'prepend_attachment(' : {
		'kind' : 'f',
		'menu' : 'string $content | string'
	},
	'prev_post_rel_link(' : {
		'kind' : 'f',
		'menu' : 'string $title, boolean $in_same_term, array|string $excluded_terms, string $taxonomy'
	},
	'preview_theme(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'preview_theme_ob_filter(' : {
		'kind' : 'f',
		'menu' : 'string $content | string'
	},
	'preview_theme_ob_filter_callback(' : {
		'kind' : 'f',
		'menu' : 'array $matches | string',
		'info' : "Manipulates preview theme links in order to control and maintain location."
	},
	'previous_comments_link(' : {
		'kind' : 'f',
		'menu' : 'string $label'
	},
	'previous_image_link(' : {
		'kind' : 'f',
		'menu' : 'string|array $size, string $text'
	},
	'previous_post(' : {
		'kind' : 'f',
		'menu' : 'string $format, string $previous, string $title, string $in_same_cat, integer $limitprev, string $excluded_categories'
	},
	'previous_post_link(' : {
		'kind' : 'f',
		'menu' : 'string $format, string $link, boolean $in_same_term, array|string $excluded_terms, string $taxonomy'
	},
	'previous_posts(' : {
		'kind' : 'f',
		'menu' : 'boolean $echo | string|void'
	},
	'previous_posts_link(' : {
		'kind' : 'f',
		'menu' : 'string $label'
	},
	'print_admin_styles(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'print_column_headers(' : {
		'kind' : 'f',
		'menu' : 'string|\WP_Screen $screen, boolean $with_id'
	},
	'print_embed_comments_button(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'print_embed_scripts(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'print_embed_sharing_button(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'print_embed_sharing_dialog(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'print_embed_styles(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'print_emoji_detection_script(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'print_emoji_styles(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'print_footer_scripts(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'print_head_scripts(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'print_late_styles(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'privacy_ping_filter(' : {
		'kind' : 'f',
		'menu' : 'mixed $sites | mixed'
	},
	'query_posts(' : {
		'kind' : 'f',
		'menu' : 'array|string $query | array',
		'info' : "Sets up The Loop with query parameters."
	},
	'random_bytes(' : {
		'kind' : 'f',
		'menu' : 'integer $bytes | string',
		'info' : "If the libsodium PHP extension is loaded, we'll use it above any other solution."
	},
	'random_int(' : {
		'kind' : 'f',
		'menu' : 'integer $min, integer $max | integer'
	},
	'RandomCompat_intval(' : {
		'kind' : 'f',
		'menu' : 'integer|float $number, boolean $fail_open | integer',
		'info' : "Cast to an integer if we can, safely."
	},
	'RandomCompat_strlen(' : {
		'kind' : 'f',
		'menu' : 'string $binary_string | integer',
		'info' : "strlen() implementation that isn't brittle to mbstring.func_overload"
	},
	'RandomCompat_substr(' : {
		'kind' : 'f',
		'menu' : 'string $binary_string, integer $start, integer $length | string',
		'info' : "substr() implementation that isn\'t brittle to mbstring.func_overload"
	},
	'rawurlencode_deep(' : {
		'kind' : 'f',
		'menu' : 'mixed $value | mixed'
	},
	'recurse_dirsize(' : {
		'kind' : 'f',
		'menu' : 'string $directory, string $exclude | integer|false',
		'info' : "Get the size of a directory recursively."
	},
	'redirect_canonical(' : {
		'kind' : 'f',
		'menu' : 'string $requested_url, boolean $do_redirect | string|void',
		'info' : "Redirects incoming links to the proper URL based on the site url."
	},
	'redirect_guess_404_permalink(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'redirect_old_akismet_urls(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'redirect_post(' : {
		'kind' : 'f',
		'menu' : 'integer $post_id'
	},
	'redirect_this_site(' : {
		'kind' : 'f',
		'menu' : 'array|string $deprecated | array'
	},
	'refresh_blog_details(' : {
		'kind' : 'f',
		'menu' : 'integer $blog_id'
	},
	'refresh_user_details(' : {
		'kind' : 'f',
		'menu' : 'integer $id | boolean|integer'
	},
	'register_activation_hook(' : {
		'kind' : 'f',
		'menu' : 'string $file, callable $function',
		'info' : "Set the activation hook for a plugin."
	},
	'register_admin_color_schemes(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'register_column_headers(' : {
		'kind' : 'f',
		'menu' : 'string $screen, array $columns'
	},
	'register_deactivation_hook(' : {
		'kind' : 'f',
		'menu' : 'string $file, callable $function',
		'info' : "Set the deactivation hook for a plugin."
	},
	'register_default_headers(' : {
		'kind' : 'f',
		'menu' : 'array $headers'
	},
	'register_importer(' : {
		'kind' : 'f',
		'menu' : 'string $id, string $name, string $description, callable $callback | \WP_Error'
	},
	'register_initial_settings(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'register_meta(' : {
		'kind' : 'f',
		'menu' : 'string $object_type, string $meta_key, array $args, string|array $deprecated | boolean'
	},
	'register_nav_menu(' : {
		'kind' : 'f',
		'menu' : 'string $location, string $description'
	},
	'register_nav_menus(' : {
		'kind' : 'f',
		'menu' : 'array $locations'
	},
	'register_new_user(' : {
		'kind' : 'f',
		'menu' : 'string $user_login, string $user_email | integer|\WP_Error'
	},
	'register_post_status(' : {
		'kind' : 'f',
		'menu' : 'string $post_status, array|string $args | object',
		'info' : "Register a post status. Do not use before init."
	},
	'register_post_type(' : {
		'kind' : 'f',
		'menu' : 'string $post_type, array|string $args | \WP_Post_Type|\WP_Error',
		'info' : "Registers a post type."
	},
	'register_rest_field(' : {
		'kind' : 'f',
		'menu' : 'string|array $object_type, string $attribute, array $args'
	},
	'register_rest_route(' : {
		'kind' : 'f',
		'menu' : 'string $namespace, string $route, array $args, boolean $override | boolean'
	},
	'register_setting(' : {
		'kind' : 'f',
		'menu' : 'string $option_group, string $option_name, array $args'
	},
	'register_sidebar(' : {
		'kind' : 'f',
		'menu' : 'array|string $args | string',
		'info' : "Builds the definition for a single sidebar and returns the ID."
	},
	'register_sidebar_widget(' : {
		'kind' : 'f',
		'menu' : 'string|integer $name, callable $output_callback, string $classname',
		'info' : "Register widget for sidebar with backward compatibility."
	},
	'register_sidebars(' : {
		'kind' : 'f',
		'menu' : 'integer $number, array|string $args',
		'info' : "Creates multiple sidebars."
	},
	'register_taxonomy(' : {
		'kind' : 'f',
		'menu' : 'string $taxonomy, array|string $object_type, array|string $args | \WP_Error|void',
		'info' : "Creates or modifies a taxonomy object."
	},
	'register_taxonomy_for_object_type(' : {
		'kind' : 'f',
		'menu' : 'string $taxonomy, string $object_type | boolean'
	},
	'register_theme_directory(' : {
		'kind' : 'f',
		'menu' : 'string $directory | boolean'
	},
	'register_uninstall_hook(' : {
		'kind' : 'f',
		'menu' : 'string $file, callable $callback',
		'info' : "Set the uninstallation hook for a plugin."
	},
	'register_widget(' : {
		'kind' : 'f',
		'menu' : 'string $widget_class',
		'info' : "Register a widget"
	},
	'register_widget_control(' : {
		'kind' : 'f',
		'menu' : 'integer|string $name, callable $control_callback, integer $width, integer $height',
		'info' : "Registers widget control callback for customizing options."
	},
	'registered_meta_key_exists(' : {
		'kind' : 'f',
		'menu' : 'string $object_type, string $meta_key | boolean'
	},
	'rel_canonical(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'remove_accents(' : {
		'kind' : 'f',
		'menu' : 'string $string | string',
		'info' : "Converts all accent characters to ASCII characters."
	},
	'remove_action(' : {
		'kind' : 'f',
		'menu' : 'string $tag, callable $function_to_remove, integer $priority | boolean',
		'info' : "Removes a function from a specified action hook."
	},
	'remove_all_actions(' : {
		'kind' : 'f',
		'menu' : 'string $tag, integer|boolean $priority | true'
	},
	'remove_all_filters(' : {
		'kind' : 'f',
		'menu' : 'string $tag, integer|boolean $priority | true'
	},
	'remove_all_shortcodes(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'remove_custom_background(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'remove_custom_image_header(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'remove_editor_styles(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'remove_filter(' : {
		'kind' : 'f',
		'menu' : 'string $tag, callable $function_to_remove, integer $priority | boolean',
		'info' : "Removes a function from a specified filter hook."
	},
	'remove_image_size(' : {
		'kind' : 'f',
		'menu' : 'string $name | boolean'
	},
	'remove_menu_page(' : {
		'kind' : 'f',
		'menu' : 'string $menu_slug | array|boolean'
	},
	'remove_meta_box(' : {
		'kind' : 'f',
		'menu' : 'string $id, string|array|\WP_Screen $screen, string $context'
	},
	'remove_option_update_handler(' : {
		'kind' : 'f',
		'menu' : 'string $option_group, string $option_name, callable $sanitize_callback'
	},
	'remove_option_whitelist(' : {
		'kind' : 'f',
		'menu' : 'array $del_options, string|array $options | array'
	},
	'remove_permastruct(' : {
		'kind' : 'f',
		'menu' : 'string $name',
		'info' : "Removes a permalink structure."
	},
	'remove_post_type_support(' : {
		'kind' : 'f',
		'menu' : 'string $post_type, string $feature'
	},
	'remove_query_arg(' : {
		'kind' : 'f',
		'menu' : 'string|array $key, boolean|string $query | string'
	},
	'remove_rewrite_tag(' : {
		'kind' : 'f',
		'menu' : 'string $tag'
	},
	'remove_role(' : {
		'kind' : 'f',
		'menu' : 'string $role'
	},
	'remove_shortcode(' : {
		'kind' : 'f',
		'menu' : 'string $tag'
	},
	'remove_submenu_page(' : {
		'kind' : 'f',
		'menu' : 'string $menu_slug, string $submenu_slug | array|boolean'
	},
	'remove_theme_mod(' : {
		'kind' : 'f',
		'menu' : 'string $name',
		'info' : "Remove theme modification name from current theme list."
	},
	'remove_theme_mods(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'remove_theme_support(' : {
		'kind' : 'f',
		'menu' : 'string $feature | boolean|void',
		'info' : "Allows a theme to de-register its support of a certain feature"
	},
	'remove_user_from_blog(' : {
		'kind' : 'f',
		'menu' : 'integer $user_id, integer $blog_id, string $reassign | true|\WP_Error',
		'info' : "Remove a user from a blog."
	},
	'request_filesystem_credentials(' : {
		'kind' : 'f',
		'menu' : 'string $form_post, string $type, boolean $error, string $context, array $extra_fields, boolean $allow_relaxed_file_ownership | boolean',
		'info' : "Displays a form to the user to request for their FTP/SSH details in order to connect to the filesystem."
	},
	'require_if_theme_supports(' : {
		'kind' : 'f',
		'menu' : 'string $feature, string $include | boolean'
	},
	'require_wp_db(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'reset_mbstring_encoding(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'reset_password(' : {
		'kind' : 'f',
		'menu' : 'object $user, string $new_pass'
	},
	'rest_api_default_filters(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'rest_api_init(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'rest_api_loaded(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'rest_api_register_rewrites(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'rest_authorization_required_code(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'rest_cookie_check_errors(' : {
		'kind' : 'f',
		'menu' : '\WP_Error|mixed $result | \WP_Error|mixed|boolean',
		'info' : "Checks for errors when using cookie-based authentication."
	},
	'rest_cookie_collect_status(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'rest_do_request(' : {
		'kind' : 'f',
		'menu' : '\WP_REST_Request|string $request | \WP_REST_Response',
		'info' : "Do a REST request."
	},
	'rest_ensure_request(' : {
		'kind' : 'f',
		'menu' : 'array|\WP_REST_Request $request | \WP_REST_Request'
	},
	'rest_ensure_response(' : {
		'kind' : 'f',
		'menu' : '\WP_Error|\WP_HTTP_Response|mixed $response | \WP_REST_Response|mixed',
		'info' : "Ensures a REST response is a response object (for consistency)."
	},
	'rest_get_avatar_sizes(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'rest_get_avatar_urls(' : {
		'kind' : 'f',
		'menu' : 'string $email | array'
	},
	'rest_get_date_with_gmt(' : {
		'kind' : 'f',
		'menu' : 'string $date, boolean $force_utc | array|null'
	},
	'rest_get_server(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'rest_get_url_prefix(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'rest_handle_deprecated_argument(' : {
		'kind' : 'f',
		'menu' : 'string $function, string $message, string $version'
	},
	'rest_handle_deprecated_function(' : {
		'kind' : 'f',
		'menu' : 'string $function, string $replacement, string $version'
	},
	'rest_handle_options_request(' : {
		'kind' : 'f',
		'menu' : 'mixed $response, \WP_REST_Server $handler, \WP_REST_Request $request | \WP_REST_Response',
		'info' : "Handles OPTIONS requests for the server."
	},
	'rest_is_boolean(' : {
		'kind' : 'f',
		'menu' : 'boolean|string $maybe_bool | boolean'
	},
	'rest_is_ip_address(' : {
		'kind' : 'f',
		'menu' : 'string $ip | string|false',
		'info' : "Determines if an IP address is valid."
	},
	'rest_output_link_header(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'rest_output_link_wp_head(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'rest_output_rsd(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'rest_parse_date(' : {
		'kind' : 'f',
		'menu' : 'string $date, boolean $force_utc | integer'
	},
	'rest_parse_request_arg(' : {
		'kind' : 'f',
		'menu' : 'mixed $value, \WP_REST_Request $request, string $param | mixed',
		'info' : "Parse a request argument based on details registered to the route."
	},
	'rest_sanitize_boolean(' : {
		'kind' : 'f',
		'menu' : 'boolean|string|integer $value | boolean'
	},
	'rest_sanitize_request_arg(' : {
		'kind' : 'f',
		'menu' : 'mixed $value, \WP_REST_Request $request, string $param | mixed'
	},
	'rest_sanitize_value_from_schema(' : {
		'kind' : 'f',
		'menu' : 'mixed $value, array $args | true|\WP_Error'
	},
	'rest_send_allow_header(' : {
		'kind' : 'f',
		'menu' : '\WP_REST_Response $response, \WP_REST_Server $server, \WP_REST_Request $request | \WP_REST_Response'
	},
	'rest_send_cors_headers(' : {
		'kind' : 'f',
		'menu' : 'mixed $value | mixed'
	},
	'rest_url(' : {
		'kind' : 'f',
		'menu' : 'string $path, string $scheme | string',
		'info' : "Retrieves the URL to a REST endpoint."
	},
	'rest_validate_request_arg(' : {
		'kind' : 'f',
		'menu' : 'mixed $value, \WP_REST_Request $request, string $param | \WP_Error|boolean'
	},
	'rest_validate_value_from_schema(' : {
		'kind' : 'f',
		'menu' : 'mixed $value, array $args, string $param | true|\WP_Error'
	},
	'restore_current_blog(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'restore_current_locale(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'restore_previous_locale(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'retrieve_password(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'retrieve_widgets(' : {
		'kind' : 'f',
		'menu' : 'string|boolean $theme_changed | array|void'
	},
	'revoke_super_admin(' : {
		'kind' : 'f',
		'menu' : 'integer $user_id | boolean'
	},
	'rewind_posts(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'rich_edit_exists(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'rsd_link(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'rss2_site_icon(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'rss_enclosure(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'safecss_filter_attr(' : {
		'kind' : 'f',
		'menu' : 'string $css, string $deprecated | string'
	},
	'sanitize_bookmark(' : {
		'kind' : 'f',
		'menu' : '\stdClass|array $bookmark, string $context | \stdClass|array'
	},
	'sanitize_bookmark_field(' : {
		'kind' : 'f',
		'menu' : 'string $field, mixed $value, integer $bookmark_id, string $context | mixed',
		'info' : "Sanitizes a bookmark field."
	},
	'sanitize_category(' : {
		'kind' : 'f',
		'menu' : 'object|array $category, string $context | object|array'
	},
	'sanitize_category_field(' : {
		'kind' : 'f',
		'menu' : 'string $field, mixed $value, integer $cat_id, string $context | mixed'
	},
	'sanitize_comment_cookies(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'sanitize_email(' : {
		'kind' : 'f',
		'menu' : 'string $email | string'
	},
	'sanitize_file_name(' : {
		'kind' : 'f',
		'menu' : 'string $filename | string',
		'info' : "Sanitizes a filename, replacing whitespace with dashes."
	},
	'sanitize_hex_color(' : {
		'kind' : 'f',
		'menu' : 'string $color | string|void',
		'info' : "Sanitizes a hex color."
	},
	'sanitize_hex_color_no_hash(' : {
		'kind' : 'f',
		'menu' : 'string $color | string|null',
		'info' : "Sanitizes a hex color without a hash. Use sanitize_hex_color() when possible."
	},
	'sanitize_html_class(' : {
		'kind' : 'f',
		'menu' : 'string $class, string $fallback | string',
		'info' : "Sanitizes an HTML classname to ensure it only contains valid characters."
	},
	'sanitize_key(' : {
		'kind' : 'f',
		'menu' : 'string $key | string',
		'info' : "Sanitizes a string key."
	},
	'sanitize_meta(' : {
		'kind' : 'f',
		'menu' : 'string $meta_key, mixed $meta_value, string $object_type | mixed'
	},
	'sanitize_mime_type(' : {
		'kind' : 'f',
		'menu' : 'string $mime_type | string'
	},
	'sanitize_option(' : {
		'kind' : 'f',
		'menu' : 'string $option, string $value | string',
		'info' : "Sanitises various option values based on the nature of the option."
	},
	'sanitize_post(' : {
		'kind' : 'f',
		'menu' : 'object|\WP_Post|array $post, string $context | object|\WP_Post|array',
		'info' : "Sanitize every post field."
	},
	'sanitize_post_field(' : {
		'kind' : 'f',
		'menu' : 'string $field, mixed $value, integer $post_id, string $context | mixed',
		'info' : "Sanitize post field based on context."
	},
	'sanitize_sql_orderby(' : {
		'kind' : 'f',
		'menu' : 'string $orderby | string|false',
		'info' : "Ensures a string is a valid SQL 'order by' clause."
	},
	'sanitize_term(' : {
		'kind' : 'f',
		'menu' : 'array|object $term, string $taxonomy, string $context | array|object',
		'info' : "Sanitize Term all fields."
	},
	'sanitize_term_field(' : {
		'kind' : 'f',
		'menu' : 'string $field, string $value, integer $term_id, string $taxonomy, string $context | mixed',
		'info' : "Cleanse the field value in the term based on the context."
	},
	'sanitize_text_field(' : {
		'kind' : 'f',
		'menu' : 'string $str | string',
		'info' : "Sanitizes a string from user input or from the database."
	},
	'sanitize_textarea_field(' : {
		'kind' : 'f',
		'menu' : 'string $str | string',
		'info' : "Sanitizes a multiline string from user input or from the database."
	},
	'sanitize_title(' : {
		'kind' : 'f',
		'menu' : 'string $title, string $fallback_title, string $context | string',
		'info' : "Sanitizes a title, or returns a fallback title."
	},
	'sanitize_title_for_query(' : {
		'kind' : 'f',
		'menu' : 'string $title | string',
		'info' : "Sanitizes a title with the 'query' context."
	},
	'sanitize_title_with_dashes(' : {
		'kind' : 'f',
		'menu' : 'string $title, string $raw_title, string $context | string',
		'info' : "Sanitizes a title, replacing whitespace and a few other characters with dashes."
	},
	'sanitize_trackback_urls(' : {
		'kind' : 'f',
		'menu' : 'string $to_ping | string'
	},
	'sanitize_url(' : {
		'kind' : 'f',
		'menu' : 'string $url, array $protocols | string'
	},
	'sanitize_user(' : {
		'kind' : 'f',
		'menu' : 'string $username, boolean $strict | string',
		'info' : "Sanitizes a username, stripping out unsafe characters."
	},
	'sanitize_user_field(' : {
		'kind' : 'f',
		'menu' : 'string $field, mixed $value, integer $user_id, string $context | mixed',
		'info' : "Sanitize user field based on context."
	},
	'sanitize_user_object(' : {
		'kind' : 'f',
		'menu' : 'object|array $user, string $context | object|array',
		'info' : "Sanitize every user field."
	},
	'save_mod_rewrite_rules(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'saveDomDocument(' : {
		'kind' : 'f',
		'menu' : '\DOMDocument $doc, string $filename'
	},
	'screen_icon(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'screen_layout(' : {
		'kind' : 'f',
		'menu' : '$screen'
	},
	'screen_meta(' : {
		'kind' : 'f',
		'menu' : '$screen'
	},
	'screen_options(' : {
		'kind' : 'f',
		'menu' : '$screen'
	},
	'script_concat_settings(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'search_theme_directories(' : {
		'kind' : 'f',
		'menu' : 'boolean $force | array|false'
	},
	'seems_utf8(' : {
		'kind' : 'f',
		'menu' : 'string $str | boolean',
		'info' : "Checks to see if a string is utf8 encoded."
	},
	'selected(' : {
		'kind' : 'f',
		'menu' : 'mixed $selected, mixed $current, boolean $echo | string',
		'info' : "Outputs the html selected attribute."
	},
	'self_admin_url(' : {
		'kind' : 'f',
		'menu' : 'string $path, string $scheme | string'
	},
	'self_link(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'send_confirmation_on_profile_email(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'send_frame_options_header(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'send_nosniff_header(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'send_origin_headers(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'separate_comments(' : {
		'kind' : 'f',
		'menu' : 'array $comments | array'
	},
	'set_current_screen(' : {
		'kind' : 'f',
		'menu' : 'mixed $hook_name'
	},
	'set_current_user(' : {
		'kind' : 'f',
		'menu' : 'integer|null $id, string $name | \WP_User',
		'info' : "Changes the current user by ID or name."
	},
	'set_post_format(' : {
		'kind' : 'f',
		'menu' : 'integer|object $post, string $format | array|\WP_Error|false'
	},
	'set_post_thumbnail(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Post $post, integer $thumbnail_id | integer|boolean'
	},
	'set_post_thumbnail_size(' : {
		'kind' : 'f',
		'menu' : 'integer $width, integer $height, boolean|array $crop'
	},
	'set_post_type(' : {
		'kind' : 'f',
		'menu' : 'integer $post_id, string $post_type | integer|false',
		'info' : "Update the post type for the post ID."
	},
	'set_query_var(' : {
		'kind' : 'f',
		'menu' : 'string $var, mixed $value'
	},
	'set_screen_options(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'set_site_transient(' : {
		'kind' : 'f',
		'menu' : 'string $transient, mixed $value, integer $expiration | boolean',
		'info' : "Set/update the value of a site transient."
	},
	'set_theme_mod(' : {
		'kind' : 'f',
		'menu' : 'string $name, mixed $value'
	},
	'set_transient(' : {
		'kind' : 'f',
		'menu' : 'string $transient, mixed $value, integer $expiration | boolean',
		'info' : "Set/update the value of a transient."
	},
	'set_url_scheme(' : {
		'kind' : 'f',
		'menu' : 'string $url, string|null $scheme | string'
	},
	'set_user_setting(' : {
		'kind' : 'f',
		'menu' : 'string $name, string $value | boolean|null',
		'info' : "Add or update user interface setting."
	},
	'settings_errors(' : {
		'kind' : 'f',
		'menu' : 'string $setting, boolean $sanitize, boolean $hide_on_update',
		'info' : "Display settings errors registered by add_settings_error()."
	},
	'settings_fields(' : {
		'kind' : 'f',
		'menu' : 'string $option_group'
	},
	'setup_postdata(' : {
		'kind' : 'f',
		'menu' : '\WP_Post|object|integer $post | boolean'
	},
	'setup_userdata(' : {
		'kind' : 'f',
		'menu' : 'integer $for_user_id',
		'info' : "Set up global user vars."
	},
	'shortcode_atts(' : {
		'kind' : 'f',
		'menu' : 'array $pairs, array $atts, string $shortcode | array',
		'info' : "Combine user attributes with known attributes and fill in defaults when needed."
	},
	'shortcode_exists(' : {
		'kind' : 'f',
		'menu' : 'string $tag | boolean'
	},
	'shortcode_parse_atts(' : {
		'kind' : 'f',
		'menu' : 'string $text | array|string',
		'info' : "Retrieve all attributes from the shortcodes tag."
	},
	'shortcode_unautop(' : {
		'kind' : 'f',
		'menu' : 'string $pee | string',
		'info' : "Don't auto-p wrap shortcodes that stand alone"
	},
	'show_admin_bar(' : {
		'kind' : 'f',
		'menu' : 'boolean $show',
		'info' : "Sets the display status of the admin bar."
	},
	'show_blog_form(' : {
		'kind' : 'f',
		'menu' : 'string $blogname, string $blog_title, \WP_Error|string $errors'
	},
	'show_message(' : {
		'kind' : 'f',
		'menu' : 'string|\WP_Error $message'
	},
	'show_user_form(' : {
		'kind' : 'f',
		'menu' : 'string $user_name, string $user_email, \WP_Error|string $errors'
	},
	'shutdown_action_hook(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'signup_another_blog(' : {
		'kind' : 'f',
		'menu' : 'string $blogname, string $blog_title, \WP_Error|string $errors'
	},
	'signup_blog(' : {
		'kind' : 'f',
		'menu' : 'string $user_name, string $user_email, string $blogname, string $blog_title, \WP_Error|string $errors'
	},
	'signup_get_available_languages(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'signup_nonce_check(' : {
		'kind' : 'f',
		'menu' : 'array $result | array'
	},
	'signup_nonce_fields(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'signup_user(' : {
		'kind' : 'f',
		'menu' : 'string $user_name, string $user_email, \WP_Error|string $errors'
	},
	'single_cat_title(' : {
		'kind' : 'f',
		'menu' : 'string $prefix, boolean $display | string|void',
		'info' : "Display or retrieve page title for category archive."
	},
	'single_month_title(' : {
		'kind' : 'f',
		'menu' : 'string $prefix, boolean $display | string|void',
		'info' : "Display or retrieve page title for post archive based on date."
	},
	'single_post_title(' : {
		'kind' : 'f',
		'menu' : 'string $prefix, boolean $display | string|void',
		'info' : "Display or retrieve page title for post."
	},
	'single_tag_title(' : {
		'kind' : 'f',
		'menu' : 'string $prefix, boolean $display | string|void',
		'info' : "Display or retrieve page title for tag post archive."
	},
	'single_term_title(' : {
		'kind' : 'f',
		'menu' : 'string $prefix, boolean $display | string|void',
		'info' : "Display or retrieve page title for taxonomy term archive."
	},
	'site_admin_notice(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'site_icon_url(' : {
		'kind' : 'f',
		'menu' : 'integer $size, string $url, integer $blog_id'
	},
	'site_url(' : {
		'kind' : 'f',
		'menu' : 'string $path, string $scheme | string',
		'info' : "Retrieves the URL for the current site where WordPress application files (e.g. wp-blog-header.php or the wp-admin/ folder) are accessible."
	},
	'size_format(' : {
		'kind' : 'f',
		'menu' : 'integer|string $bytes, integer $decimals | string|false',
		'info' : "Convert number of bytes largest unit bytes will fit into."
	},
	'smilies_init(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'sort_menu(' : {
		'kind' : 'f',
		'menu' : 'array $a, array $b | integer'
	},
	'spawn_cron(' : {
		'kind' : 'f',
		'menu' : 'integer $gmt_time'
	},
	'spl_autoload_functions(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'spl_autoload_register(' : {
		'kind' : 'f',
		'menu' : 'callable $autoload_function, boolean $throw, boolean $prepend'
	},
	'spl_autoload_unregister(' : {
		'kind' : 'f',
		'menu' : 'callable $function | boolean'
	},
	'start_post_rel_link(' : {
		'kind' : 'f',
		'menu' : 'string $title, boolean $in_same_cat, string $excluded_categories'
	},
	'start_wp(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'startElement(' : {
		'kind' : 'f',
		'menu' : 'mixed $parser, string $tagName, array $attrs'
	},
	'status_header(' : {
		'kind' : 'f',
		'menu' : 'integer $code, string $description'
	},
	'stick_post(' : {
		'kind' : 'f',
		'menu' : 'integer $post_id',
		'info' : "Make a post sticky."
	},
	'sticky_class(' : {
		'kind' : 'f',
		'menu' : 'integer $post_id'
	},
	'stream_preview_image(' : {
		'kind' : 'f',
		'menu' : 'integer $post_id | boolean'
	},
	'strip_fragment_from_url(' : {
		'kind' : 'f',
		'menu' : 'string $url | string'
	},
	'strip_shortcode_tag(' : {
		'kind' : 'f',
		'menu' : 'array $m | string|false'
	},
	'strip_shortcodes(' : {
		'kind' : 'f',
		'menu' : 'string $content | string'
	},
	'stripos(' : {
		'kind' : 'f',
		'menu' : '$haystack, $needle'
	},
	'stripslashes_deep(' : {
		'kind' : 'f',
		'menu' : 'mixed $value | mixed'
	},
	'stripslashes_from_strings_only(' : {
		'kind' : 'f',
		'menu' : 'mixed $value | mixed'
	},
	'submit_button(' : {
		'kind' : 'f',
		'menu' : 'string $text, string $type, string $name, boolean $wrap, array|string $other_attributes'
	},
	'switch_theme(' : {
		'kind' : 'f',
		'menu' : 'string $stylesheet',
		'info' : "Switches the theme."
	},
	'switch_to_blog(' : {
		'kind' : 'f',
		'menu' : 'integer $new_blog, boolean $deprecated | true',
		'info' : "Switch the current blog."
	},
	'switch_to_locale(' : {
		'kind' : 'f',
		'menu' : 'string $locale | boolean'
	},
	'sync_category_tag_slugs(' : {
		'kind' : 'f',
		'menu' : 'object $term, string $taxonomy | object|array'
	},
	'tag_description(' : {
		'kind' : 'f',
		'menu' : 'integer $tag | string'
	},
	'tag_escape(' : {
		'kind' : 'f',
		'menu' : 'string $tag_name | string'
	},
	'tag_exists(' : {
		'kind' : 'f',
		'menu' : 'integer|string $tag_name | mixed'
	},
	'taxonomy_exists(' : {
		'kind' : 'f',
		'menu' : 'string $taxonomy | boolean',
		'info' : "Checks that the taxonomy name exists."
	},
	'term_description(' : {
		'kind' : 'f',
		'menu' : 'integer $term, string $taxonomy | string'
	},
	'term_exists(' : {
		'kind' : 'f',
		'menu' : 'integer|string $term, string $taxonomy, integer $parent | mixed',
		'info' : "Check if Term exists."
	},
	'term_is_ancestor_of(' : {
		'kind' : 'f',
		'menu' : 'integer|object $term1, integer|object $term2, string $taxonomy | boolean',
		'info' : "Check if a term is an ancestor of another term."
	},
	'the_archive_description(' : {
		'kind' : 'f',
		'menu' : 'string $before, string $after'
	},
	'the_archive_title(' : {
		'kind' : 'f',
		'menu' : 'string $before, string $after'
	},
	'the_attachment_link(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Post $id, boolean $fullsize, boolean $deprecated, boolean $permalink'
	},
	'the_attachment_links(' : {
		'kind' : 'f',
		'menu' : 'integer|boolean $id'
	},
	'the_author(' : {
		'kind' : 'f',
		'menu' : 'string $deprecated, string $deprecated_echo | string|null',
		'info' : "Display the name of the author of the current post."
	},
	'the_author_aim(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'the_author_description(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'the_author_email(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'the_author_firstname(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'the_author_icq(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'the_author_ID(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'the_author_lastname(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'the_author_link(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'the_author_login(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'the_author_meta(' : {
		'kind' : 'f',
		'menu' : 'string $field, integer $user_id'
	},
	'the_author_msn(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'the_author_nickname(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'the_author_posts(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'the_author_posts_link(' : {
		'kind' : 'f',
		'menu' : 'string $deprecated'
	},
	'the_author_url(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'the_author_yim(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'the_category(' : {
		'kind' : 'f',
		'menu' : 'string $separator, string $parents, integer $post_id'
	},
	'the_category_head(' : {
		'kind' : 'f',
		'menu' : 'string $before, string $after'
	},
	'the_category_ID(' : {
		'kind' : 'f',
		'menu' : 'boolean $echo | integer'
	},
	'the_category_rss(' : {
		'kind' : 'f',
		'menu' : 'string $type'
	},
	'the_comment(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'the_comments_navigation(' : {
		'kind' : 'f',
		'menu' : 'array $args'
	},
	'the_comments_pagination(' : {
		'kind' : 'f',
		'menu' : 'array $args'
	},
	'the_content(' : {
		'kind' : 'f',
		'menu' : 'string $more_link_text, boolean $strip_teaser'
	},
	'the_content_feed(' : {
		'kind' : 'f',
		'menu' : 'string $feed_type'
	},
	'the_content_rss(' : {
		'kind' : 'f',
		'menu' : 'string $more_link_text, integer $stripteaser, string $more_file, integer $cut, integer $encode_html',
		'info' : "Display the post content for the feed."
	},
	'the_custom_header_markup(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'the_custom_logo(' : {
		'kind' : 'f',
		'menu' : 'integer $blog_id'
	},
	'the_date(' : {
		'kind' : 'f',
		'menu' : 'string $d, string $before, string $after, boolean $echo | string|void',
		'info' : "Display or Retrieve the date the current post was written (once per date)"
	},
	'the_date_xml(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'the_editor(' : {
		'kind' : 'f',
		'menu' : 'string $content, string $id, string $prev_id, boolean $media_buttons, integer $tab_index, boolean $extended'
	},
	'the_embed_site_title(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'the_excerpt(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'the_excerpt_embed(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'the_excerpt_rss(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'the_feed_link(' : {
		'kind' : 'f',
		'menu' : 'string $anchor, string $feed'
	},
	'the_generator(' : {
		'kind' : 'f',
		'menu' : 'string $type',
		'info' : "Display the generator XML or Comment for RSS, ATOM, etc."
	},
	'the_guid(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Post $post',
		'info' : "Display the Post Global Unique Identifier (guid)."
	},
	'the_header_image_tag(' : {
		'kind' : 'f',
		'menu' : 'array $attr'
	},
	'the_header_video_url(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'the_ID(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'the_media_upload_tabs(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'the_modified_author(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'the_modified_date(' : {
		'kind' : 'f',
		'menu' : 'string $d, string $before, string $after, boolean $echo | string|void'
	},
	'the_modified_time(' : {
		'kind' : 'f',
		'menu' : 'string $d'
	},
	'the_permalink(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Post $post'
	},
	'the_permalink_rss(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'the_post(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'the_post_navigation(' : {
		'kind' : 'f',
		'menu' : 'array $args'
	},
	'the_post_password(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'the_post_thumbnail(' : {
		'kind' : 'f',
		'menu' : 'string|array $size, string|array $attr',
		'info' : "Display the post thumbnail."
	},
	'the_post_thumbnail_caption(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Post $post'
	},
	'the_post_thumbnail_url(' : {
		'kind' : 'f',
		'menu' : 'string|array $size'
	},
	'the_posts_navigation(' : {
		'kind' : 'f',
		'menu' : 'array $args'
	},
	'the_posts_pagination(' : {
		'kind' : 'f',
		'menu' : 'array $args'
	},
	'the_search_query(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'the_shortlink(' : {
		'kind' : 'f',
		'menu' : 'string $text, string $title, string $before, string $after',
		'info' : "Displays the shortlink for a post."
	},
	'the_tags(' : {
		'kind' : 'f',
		'menu' : 'string $before, string $sep, string $after'
	},
	'the_taxonomies(' : {
		'kind' : 'f',
		'menu' : 'array $args',
		'info' : "Display the taxonomies of a post with available options."
	},
	'the_terms(' : {
		'kind' : 'f',
		'menu' : 'integer $id, string $taxonomy, string $before, string $sep, string $after | false|void'
	},
	'the_time(' : {
		'kind' : 'f',
		'menu' : 'string $d'
	},
	'the_title(' : {
		'kind' : 'f',
		'menu' : 'string $before, string $after, boolean $echo | string|void'
	},
	'the_title_attribute(' : {
		'kind' : 'f',
		'menu' : 'string|array $args | string|void',
		'info' : "Sanitize the current title when retrieving or displaying."
	},
	'the_title_rss(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'the_weekday(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'the_weekday_date(' : {
		'kind' : 'f',
		'menu' : 'string $before, string $after',
		'info' : "Display the weekday on which the post was written."
	},
	'the_widget(' : {
		'kind' : 'f',
		'menu' : 'string $widget, array $instance, array $args'
	},
	'theme_update_available(' : {
		'kind' : 'f',
		'menu' : '\WP_Theme $theme',
		'info' : "Check if there is an update for a theme available."
	},
	'themes_api(' : {
		'kind' : 'f',
		'menu' : 'string $action, array|object $args | object|array|\WP_Error',
		'info' : "Retrieves theme installer pages from the WordPress.org Themes API."
	},
	'timer_start(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'timer_stop(' : {
		'kind' : 'f',
		'menu' : 'integer|boolean $display, integer $precision | string'
	},
	'tinymce_include(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'touch_time(' : {
		'kind' : 'f',
		'menu' : 'integer|boolean $edit, integer|boolean $for_post, integer $tab_index, integer|boolean $multi'
	},
	'trackback(' : {
		'kind' : 'f',
		'menu' : 'string $trackback_url, string $title, string $excerpt, integer $ID | integer|false|void',
		'info' : "Send a Trackback."
	},
	'trackback_rdf(' : {
		'kind' : 'f',
		'menu' : 'integer $deprecated',
		'info' : "Generate and display the RDF for the trackback information of current post."
	},
	'trackback_response(' : {
		'kind' : 'f',
		'menu' : 'mixed $error, string $error_message',
		'info' : "Response to a trackback."
	},
	'trackback_url(' : {
		'kind' : 'f',
		'menu' : 'boolean $deprecated_echo | void|string'
	},
	'trackback_url_list(' : {
		'kind' : 'f',
		'menu' : 'string $tb_list, integer $post_id'
	},
	'trailingslashit(' : {
		'kind' : 'f',
		'menu' : 'string $string | string',
		'info' : "Appends a trailing slash."
	},
	'translate(' : {
		'kind' : 'f',
		'menu' : 'string $text, string $domain | string',
		'info' : "Retrieve the translation of $text."
	},
	'translate_level_to_role(' : {
		'kind' : 'f',
		'menu' : 'integer $level | string'
	},
	'translate_nooped_plural(' : {
		'kind' : 'f',
		'menu' : 'array $nooped_plural, integer $count, string $domain | string',
		'info' : "Translates and retrieves the singular or plural form of a string that's been registered with _n_noop() or _nx_noop()."
	},
	'translate_smiley(' : {
		'kind' : 'f',
		'menu' : 'array $matches | string',
		'info' : "Convert one smiley code to the icon graphic file equivalent."
	},
	'translate_user_role(' : {
		'kind' : 'f',
		'menu' : 'string $name | string',
		'info' : "Translates role name."
	},
	'translate_with_context(' : {
		'kind' : 'f',
		'menu' : 'string $text, string $domain | string'
	},
	'translate_with_gettext_context(' : {
		'kind' : 'f',
		'menu' : 'string $text, string $context, string $domain | string',
		'info' : "Retrieve the translation of $text in the context defined in $context."
	},
	'translations_api(' : {
		'kind' : 'f',
		'menu' : 'string $type, array|object $args | object|\WP_Error'
	},
	'twentyfifteen_categorized_blog(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentyfifteen_category_transient_flusher(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentyfifteen_color_scheme_css(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentyfifteen_color_scheme_css_template(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentyfifteen_comment_nav(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentyfifteen_custom_header_setup(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentyfifteen_customize(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentyfifteen_customize_control_js(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentyfifteen_customize_partial_blogdescription(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentyfifteen_customize_partial_blogname(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentyfifteen_customize_preview_js(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentyfifteen_customize_register(' : {
		'kind' : 'f',
		'menu' : '\WP_Customize_Manager $wp_customize'
	},
	'twentyfifteen_entry_meta(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentyfifteen_excerpt_more(' : {
		'kind' : 'f',
		'menu' : '$more | string',
		'info' : "Replaces '[."
	},
	'twentyfifteen_fonts_url(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentyfifteen_get_color_scheme(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentyfifteen_get_color_scheme_choices(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentyfifteen_get_color_scheme_css(' : {
		'kind' : 'f',
		'menu' : 'array $colors | string'
	},
	'twentyfifteen_get_color_schemes(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentyfifteen_get_link_url(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentyfifteen_header_background_color_css(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentyfifteen_header_style(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentyfifteen_hex2rgb(' : {
		'kind' : 'f',
		'menu' : 'string $color | array'
	},
	'twentyfifteen_javascript_detection(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentyfifteen_nav_description(' : {
		'kind' : 'f',
		'menu' : 'string $item_output, \WP_Post $item, integer $depth, array $args | string'
	},
	'twentyfifteen_post_nav_background(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentyfifteen_post_thumbnail(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentyfifteen_preview(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentyfifteen_resource_hints(' : {
		'kind' : 'f',
		'menu' : 'array $urls, string $relation_type | array'
	},
	'twentyfifteen_sanitize_color_scheme(' : {
		'kind' : 'f',
		'menu' : 'string $value | string'
	},
	'twentyfifteen_scripts(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentyfifteen_search_form_modify(' : {
		'kind' : 'f',
		'menu' : 'string $html | string'
	},
	'twentyfifteen_setup(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentyfifteen_sidebar_text_color_css(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentyfifteen_switch_theme(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentyfifteen_the_custom_logo(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentyfifteen_upgrade_notice(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentyfifteen_widgets_init(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentyseventeen_body_classes(' : {
		'kind' : 'f',
		'menu' : 'array $classes | array'
	},
	'twentyseventeen_categorized_blog(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentyseventeen_category_transient_flusher(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentyseventeen_colors_css_wrap(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentyseventeen_content_image_sizes_attr(' : {
		'kind' : 'f',
		'menu' : 'string $sizes, array $size | string'
	},
	'twentyseventeen_content_width(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentyseventeen_custom_colors_css(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentyseventeen_custom_header_setup(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentyseventeen_customize(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentyseventeen_customize_partial_blogdescription(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentyseventeen_customize_partial_blogname(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentyseventeen_customize_preview_js(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentyseventeen_customize_register(' : {
		'kind' : 'f',
		'menu' : '\WP_Customize_Manager $wp_customize'
	},
	'twentyseventeen_dropdown_icon_to_menu_link(' : {
		'kind' : 'f',
		'menu' : 'string $title, object $item, array $args, integer $depth | string'
	},
	'twentyseventeen_edit_link(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentyseventeen_entry_footer(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentyseventeen_excerpt_more(' : {
		'kind' : 'f',
		'menu' : '$link | string',
		'info' : "Replaces '[."
	},
	'twentyseventeen_fonts_url(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentyseventeen_front_page_section(' : {
		'kind' : 'f',
		'menu' : '$partial, $id'
	},
	'twentyseventeen_front_page_template(' : {
		'kind' : 'f',
		'menu' : 'string $template | string'
	},
	'twentyseventeen_get_svg(' : {
		'kind' : 'f',
		'menu' : 'array $args | string'
	},
	'twentyseventeen_header_image_tag(' : {
		'kind' : 'f',
		'menu' : 'string $html, object $header, array $attr | string'
	},
	'twentyseventeen_header_style(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentyseventeen_include_svg_icons(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentyseventeen_is_frontpage(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentyseventeen_is_static_front_page(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentyseventeen_is_view_with_layout_option(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentyseventeen_javascript_detection(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentyseventeen_nav_menu_social_icons(' : {
		'kind' : 'f',
		'menu' : 'string $item_output, \WP_Post $item, integer $depth, array $args | string'
	},
	'twentyseventeen_panel_count(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentyseventeen_panels_js(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentyseventeen_pingback_header(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentyseventeen_post_thumbnail_sizes_attr(' : {
		'kind' : 'f',
		'menu' : 'array $attr, integer $attachment, array $size | string'
	},
	'twentyseventeen_posted_on(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentyseventeen_preview(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentyseventeen_resource_hints(' : {
		'kind' : 'f',
		'menu' : 'array $urls, string $relation_type | array'
	},
	'twentyseventeen_sanitize_colorscheme(' : {
		'kind' : 'f',
		'menu' : '$input'
	},
	'twentyseventeen_sanitize_page_layout(' : {
		'kind' : 'f',
		'menu' : '$input'
	},
	'twentyseventeen_scripts(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentyseventeen_setup(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentyseventeen_social_links_icons(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentyseventeen_switch_theme(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentyseventeen_time_link(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentyseventeen_upgrade_notice(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentyseventeen_video_controls(' : {
		'kind' : 'f',
		'menu' : '$settings'
	},
	'twentyseventeen_widgets_init(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentysixteen_body_classes(' : {
		'kind' : 'f',
		'menu' : 'array $classes | array'
	},
	'twentysixteen_categorized_blog(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentysixteen_category_transient_flusher(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentysixteen_color_scheme_css(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentysixteen_color_scheme_css_template(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentysixteen_content_image_sizes_attr(' : {
		'kind' : 'f',
		'menu' : 'string $sizes, array $size | string'
	},
	'twentysixteen_content_width(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentysixteen_custom_header_and_background(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentysixteen_customize(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentysixteen_customize_control_js(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentysixteen_customize_partial_blogdescription(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentysixteen_customize_partial_blogname(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentysixteen_customize_preview_js(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentysixteen_customize_register(' : {
		'kind' : 'f',
		'menu' : '\WP_Customize_Manager $wp_customize'
	},
	'twentysixteen_entry_date(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentysixteen_entry_meta(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentysixteen_entry_taxonomies(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentysixteen_excerpt(' : {
		'kind' : 'f',
		'menu' : 'string $class',
		'info' : "Displays the optional excerpt."
	},
	'twentysixteen_excerpt_more(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentysixteen_fonts_url(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentysixteen_get_color_scheme(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentysixteen_get_color_scheme_choices(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentysixteen_get_color_scheme_css(' : {
		'kind' : 'f',
		'menu' : 'array $colors | string'
	},
	'twentysixteen_get_color_schemes(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentysixteen_header_style(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentysixteen_hex2rgb(' : {
		'kind' : 'f',
		'menu' : 'string $color | array'
	},
	'twentysixteen_javascript_detection(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentysixteen_link_color_css(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentysixteen_main_text_color_css(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentysixteen_page_background_color_css(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentysixteen_post_thumbnail(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentysixteen_post_thumbnail_sizes_attr(' : {
		'kind' : 'f',
		'menu' : 'array $attr, integer $attachment, array $size | string'
	},
	'twentysixteen_preview(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentysixteen_sanitize_color_scheme(' : {
		'kind' : 'f',
		'menu' : 'string $value | string',
		'info' : "Handles sanitization for Twenty Sixteen color schemes."
	},
	'twentysixteen_scripts(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentysixteen_secondary_text_color_css(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentysixteen_setup(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentysixteen_switch_theme(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentysixteen_the_custom_logo(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentysixteen_upgrade_notice(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'twentysixteen_widget_tag_cloud_args(' : {
		'kind' : 'f',
		'menu' : 'array $args | array'
	},
	'twentysixteen_widgets_init(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'type_url_form_audio(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'type_url_form_file(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'type_url_form_image(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'type_url_form_video(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'undismiss_core_update(' : {
		'kind' : 'f',
		'menu' : 'string $version, string $locale | boolean'
	},
	'unescape_invalid_shortcodes(' : {
		'kind' : 'f',
		'menu' : 'string $content | string'
	},
	'uninstall_plugin(' : {
		'kind' : 'f',
		'menu' : 'string $plugin | true',
		'info' : "Uninstall a single plugin."
	},
	'unload_textdomain(' : {
		'kind' : 'f',
		'menu' : 'string $domain | boolean'
	},
	'unregister_default_headers(' : {
		'kind' : 'f',
		'menu' : 'string|array $header | boolean|void',
		'info' : "Unregister default headers."
	},
	'unregister_meta_key(' : {
		'kind' : 'f',
		'menu' : 'string $object_type, string $meta_key | boolean'
	},
	'unregister_nav_menu(' : {
		'kind' : 'f',
		'menu' : 'string $location | boolean'
	},
	'unregister_post_type(' : {
		'kind' : 'f',
		'menu' : 'string $post_type | boolean|\WP_Error',
		'info' : "Unregisters a post type."
	},
	'unregister_setting(' : {
		'kind' : 'f',
		'menu' : 'string $option_group, string $option_name, callable $deprecated'
	},
	'unregister_sidebar(' : {
		'kind' : 'f',
		'menu' : 'string $name'
	},
	'unregister_sidebar_widget(' : {
		'kind' : 'f',
		'menu' : 'integer|string $id'
	},
	'unregister_taxonomy(' : {
		'kind' : 'f',
		'menu' : 'string $taxonomy | boolean|\WP_Error',
		'info' : "Unregisters a taxonomy."
	},
	'unregister_taxonomy_for_object_type(' : {
		'kind' : 'f',
		'menu' : 'string $taxonomy, string $object_type | boolean'
	},
	'unregister_widget(' : {
		'kind' : 'f',
		'menu' : 'string $widget_class',
		'info' : "Unregisters a widget."
	},
	'unregister_widget_control(' : {
		'kind' : 'f',
		'menu' : 'integer|string $id'
	},
	'unstick_post(' : {
		'kind' : 'f',
		'menu' : 'integer $post_id',
		'info' : "Un-stick a post."
	},
	'untrailingslashit(' : {
		'kind' : 'f',
		'menu' : 'string $string | string',
		'info' : "Removes trailing forward slashes and backslashes if they exist."
	},
	'unzip_file(' : {
		'kind' : 'f',
		'menu' : 'string $file, string $to | mixed',
		'info' : "Unzips a specified ZIP file to a location on the Filesystem via the WordPress Filesystem Abstraction."
	},
	'update_archived(' : {
		'kind' : 'f',
		'menu' : 'integer $id, string $archived | string'
	},
	'update_attached_file(' : {
		'kind' : 'f',
		'menu' : 'integer $attachment_id, string $file | boolean',
		'info' : "Update attachment file path based on attachment ID."
	},
	'update_blog_details(' : {
		'kind' : 'f',
		'menu' : 'integer $blog_id, array $details | boolean'
	},
	'update_blog_option(' : {
		'kind' : 'f',
		'menu' : 'integer $id, string $option, mixed $value, mixed $deprecated | boolean'
	},
	'update_blog_public(' : {
		'kind' : 'f',
		'menu' : 'integer $old_value, integer $value',
		'info' : "Update this blog's 'public' setting in the global blogs table."
	},
	'update_blog_status(' : {
		'kind' : 'f',
		'menu' : 'integer $blog_id, string $pref, string $value, null $deprecated | string|false'
	},
	'update_category_cache(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'update_comment_cache(' : {
		'kind' : 'f',
		'menu' : 'array $comments, boolean $update_meta_cache',
		'info' : "Updates the comment cache of given comments."
	},
	'update_comment_meta(' : {
		'kind' : 'f',
		'menu' : 'integer $comment_id, string $meta_key, mixed $meta_value, mixed $prev_value | integer|boolean',
		'info' : "Update comment meta field based on comment ID."
	},
	'update_core(' : {
		'kind' : 'f',
		'menu' : 'string $from, string $to | \WP_Error|null',
		'info' : "Upgrades the core of WordPress."
	},
	'update_gallery_tab(' : {
		'kind' : 'f',
		'menu' : 'array $tabs | array'
	},
	'update_home_siteurl(' : {
		'kind' : 'f',
		'menu' : 'string $old_value, string $value'
	},
	'update_meta(' : {
		'kind' : 'f',
		'menu' : 'integer $meta_id, string $meta_key, string $meta_value | boolean'
	},
	'update_meta_cache(' : {
		'kind' : 'f',
		'menu' : 'string $meta_type, integer|array $object_ids | array|false'
	},
	'update_metadata(' : {
		'kind' : 'f',
		'menu' : 'string $meta_type, integer $object_id, string $meta_key, mixed $meta_value, mixed $prev_value | integer|boolean'
	},
	'update_metadata_by_mid(' : {
		'kind' : 'f',
		'menu' : 'string $meta_type, integer $meta_id, string $meta_value, string $meta_key | boolean'
	},
	'update_nag(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'update_network_cache(' : {
		'kind' : 'f',
		'menu' : 'array $networks',
		'info' : "Updates the network cache of given networks."
	},
	'update_network_option(' : {
		'kind' : 'f',
		'menu' : 'integer $network_id, string $option, mixed $value | boolean'
	},
	'update_object_term_cache(' : {
		'kind' : 'f',
		'menu' : 'string|array $object_ids, array|string $object_type | void|false',
		'info' : "Updates the cache for the given term object ID(s)."
	},
	'update_option(' : {
		'kind' : 'f',
		'menu' : 'string $option, mixed $value, string|boolean $autoload | boolean',
		'info' : "Update the value of an option that was already added."
	},
	'update_option_new_admin_email(' : {
		'kind' : 'f',
		'menu' : 'string $old_value, string $value'
	},
	'update_page_cache(' : {
		'kind' : 'f',
		'menu' : 'array $pages'
	},
	'update_post_cache(' : {
		'kind' : 'f',
		'menu' : 'array $posts'
	},
	'update_post_caches(' : {
		'kind' : 'f',
		'menu' : 'array $posts, string $post_type, boolean $update_term_cache, boolean $update_meta_cache'
	},
	'update_post_meta(' : {
		'kind' : 'f',
		'menu' : 'integer $post_id, string $meta_key, mixed $meta_value, mixed $prev_value | integer|boolean',
		'info' : "Update post meta field based on post ID."
	},
	'update_post_thumbnail_cache(' : {
		'kind' : 'f',
		'menu' : '\WP_Query $wp_query'
	},
	'update_postmeta_cache(' : {
		'kind' : 'f',
		'menu' : 'array $post_ids | array|false',
		'info' : "Updates metadata cache for list of post IDs."
	},
	'update_posts_count(' : {
		'kind' : 'f',
		'menu' : 'string $deprecated',
		'info' : "Update a blog's post count."
	},
	'update_recently_edited(' : {
		'kind' : 'f',
		'menu' : 'string $file'
	},
	'update_right_now_message(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'update_site_cache(' : {
		'kind' : 'f',
		'menu' : 'array $sites'
	},
	'update_site_option(' : {
		'kind' : 'f',
		'menu' : 'string $option, mixed $value | boolean'
	},
	'update_term_cache(' : {
		'kind' : 'f',
		'menu' : 'array $terms, string $taxonomy'
	},
	'update_term_meta(' : {
		'kind' : 'f',
		'menu' : 'integer $term_id, string $meta_key, mixed $meta_value, mixed $prev_value | integer|\WP_Error|boolean',
		'info' : "Updates term metadata."
	},
	'update_termmeta_cache(' : {
		'kind' : 'f',
		'menu' : 'array $term_ids | array|false',
		'info' : "Updates metadata cache for list of term IDs."
	},
	'update_user_caches(' : {
		'kind' : 'f',
		'menu' : 'object|\WP_User $user | boolean|null'
	},
	'update_user_meta(' : {
		'kind' : 'f',
		'menu' : 'integer $user_id, string $meta_key, mixed $meta_value, mixed $prev_value | integer|boolean',
		'info' : "Update user meta field based on user ID."
	},
	'update_user_option(' : {
		'kind' : 'f',
		'menu' : 'integer $user_id, string $option_name, mixed $newvalue, boolean $global | integer|boolean',
		'info' : "Update user option with global blog capability."
	},
	'update_user_status(' : {
		'kind' : 'f',
		'menu' : 'integer $id, string $pref, integer $value, null $deprecated | integer',
		'info' : "Update the status of a user in the database."
	},
	'update_usermeta(' : {
		'kind' : 'f',
		'menu' : 'integer $user_id, string $meta_key, mixed $meta_value | boolean',
		'info' : "Update metadata of user."
	},
	'upgrade_network(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'upload_is_file_too_big(' : {
		'kind' : 'f',
		'menu' : 'array $upload | string|array'
	},
	'upload_is_user_over_quota(' : {
		'kind' : 'f',
		'menu' : 'boolean $echo | boolean'
	},
	'upload_size_limit_filter(' : {
		'kind' : 'f',
		'menu' : 'integer $size | integer'
	},
	'upload_space_setting(' : {
		'kind' : 'f',
		'menu' : 'integer $id'
	},
	'url_is_accessable_via_ssl(' : {
		'kind' : 'f',
		'menu' : 'string $url | boolean',
		'info' : "Determines if the URL can be accessed over SSL."
	},
	'url_shorten(' : {
		'kind' : 'f',
		'menu' : 'string $url, integer $length | string'
	},
	'url_to_postid(' : {
		'kind' : 'f',
		'menu' : 'string $url | integer',
		'info' : "Examine a URL and try to determine the post ID it represents."
	},
	'urldecode_deep(' : {
		'kind' : 'f',
		'menu' : 'mixed $value | mixed'
	},
	'urlencode_deep(' : {
		'kind' : 'f',
		'menu' : 'mixed $value | mixed'
	},
	'use_codepress(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'use_ssl_preference(' : {
		'kind' : 'f',
		'menu' : 'object $user',
		'info' : "Optional SSL preference that can be turned on by hooking to the 'personal_options' action."
	},
	'user_admin_url(' : {
		'kind' : 'f',
		'menu' : 'string $path, string $scheme | string'
	},
	'user_can(' : {
		'kind' : 'f',
		'menu' : 'integer|object $user, string $capability | boolean'
	},
	'user_can_access_admin_page(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'user_can_create_draft(' : {
		'kind' : 'f',
		'menu' : 'integer $user_id, integer $blog_id, integer $category_id | boolean'
	},
	'user_can_create_post(' : {
		'kind' : 'f',
		'menu' : 'integer $user_id, integer $blog_id, integer $category_id | boolean'
	},
	'user_can_delete_post(' : {
		'kind' : 'f',
		'menu' : 'integer $user_id, integer $post_id, integer $blog_id | boolean'
	},
	'user_can_delete_post_comments(' : {
		'kind' : 'f',
		'menu' : 'integer $user_id, integer $post_id, integer $blog_id | boolean'
	},
	'user_can_edit_post(' : {
		'kind' : 'f',
		'menu' : 'integer $user_id, integer $post_id, integer $blog_id | boolean'
	},
	'user_can_edit_post_comments(' : {
		'kind' : 'f',
		'menu' : 'integer $user_id, integer $post_id, integer $blog_id | boolean'
	},
	'user_can_edit_post_date(' : {
		'kind' : 'f',
		'menu' : 'integer $user_id, integer $post_id, integer $blog_id | boolean'
	},
	'user_can_edit_user(' : {
		'kind' : 'f',
		'menu' : 'integer $user_id, integer $other_user | boolean'
	},
	'user_can_richedit(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'user_can_set_post_date(' : {
		'kind' : 'f',
		'menu' : 'integer $user_id, integer $blog_id, integer $category_id | boolean'
	},
	'user_pass_ok(' : {
		'kind' : 'f',
		'menu' : 'string $user_login, string $user_pass | boolean'
	},
	'user_trailingslashit(' : {
		'kind' : 'f',
		'menu' : 'string $string, string $type_of_url | string',
		'info' : "Retrieves a trailing-slashed string if the site is set for adding trailing slashes."
	},
	'username_exists(' : {
		'kind' : 'f',
		'menu' : 'string $username | integer|false'
	},
	'users_can_register_signup_filter(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'utf8_uri_encode(' : {
		'kind' : 'f',
		'menu' : 'string $utf8_string, integer $length | string'
	},
	'valid_unicode(' : {
		'kind' : 'f',
		'menu' : 'integer $i | boolean'
	},
	'validate_active_plugins(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'validate_another_blog_signup(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'validate_blog_form(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'validate_blog_signup(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'validate_current_theme(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'validate_email(' : {
		'kind' : 'f',
		'menu' : 'string $email, boolean $check_domain | string|boolean'
	},
	'validate_file(' : {
		'kind' : 'f',
		'menu' : 'string $file, array $allowed_files | integer',
		'info' : "File validates against allowed set of defined rules."
	},
	'validate_file_to_edit(' : {
		'kind' : 'f',
		'menu' : 'string $file, array $allowed_files | string|null',
		'info' : "Make sure that the file that was requested to edit, is allowed to be edited"
	},
	'validate_plugin(' : {
		'kind' : 'f',
		'menu' : 'string $plugin | \WP_Error|integer',
		'info' : "Validate the plugin path."
	},
	'validate_user_form(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'validate_user_signup(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'validate_username(' : {
		'kind' : 'f',
		'menu' : 'string $username | boolean'
	},
	'verify_file_md5(' : {
		'kind' : 'f',
		'menu' : 'string $filename, string $expected_md5 | boolean|object'
	},
	'walk_category_dropdown_tree(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'walk_category_tree(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'walk_nav_menu_tree(' : {
		'kind' : 'f',
		'menu' : 'array $items, integer $depth, \stdClass $r | string'
	},
	'walk_page_dropdown_tree(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'walk_page_tree(' : {
		'kind' : 'f',
		'menu' : 'array $pages, integer $depth, integer $current_page, array $r | string'
	},
	'weblog_ping(' : {
		'kind' : 'f',
		'menu' : 'string $server, string $path'
	},
	'welcome_user_msg_filter(' : {
		'kind' : 'f',
		'menu' : 'string $text | string'
	},
	'win_is_writable(' : {
		'kind' : 'f',
		'menu' : 'string $path | boolean',
		'info' : "Workaround for Windows bug in is_writable() function"
	},
	'wlwmanifest_link(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp(' : {
		'kind' : 'f',
		'menu' : 'string|array $query_vars'
	},
	'wp_add_dashboard_widget(' : {
		'kind' : 'f',
		'menu' : 'string $widget_id, string $widget_name, callable $callback, callable $control_callback, array $callback_args'
	},
	'wp_add_id3_tag_data(' : {
		'kind' : 'f',
		'menu' : 'array $metadata, array $data'
	},
	'wp_add_inline_script(' : {
		'kind' : 'f',
		'menu' : 'string $handle, string $data, string $position | boolean',
		'info' : "Adds extra code to a registered script."
	},
	'wp_add_inline_style(' : {
		'kind' : 'f',
		'menu' : 'string $handle, string $data | boolean',
		'info' : "Add extra CSS styles to a registered stylesheet."
	},
	'wp_add_object_terms(' : {
		'kind' : 'f',
		'menu' : 'integer $object_id, array|integer|string $terms, array|string $taxonomy | array|\WP_Error'
	},
	'wp_add_post_tags(' : {
		'kind' : 'f',
		'menu' : 'integer $post_id, string|array $tags | array|false|\WP_Error'
	},
	'wp_add_trashed_suffix_to_post_name_for_post(' : {
		'kind' : 'f',
		'menu' : '\WP_Post $post | string',
		'info' : "Adds a trashed suffix for a given post."
	},
	'wp_add_trashed_suffix_to_post_name_for_trashed_posts(' : {
		'kind' : 'f',
		'menu' : 'string $post_name, string $post_ID',
		'info' : "Adds a suffix if any trashed posts have a given slug."
	},
	'wp_admin_bar_add_secondary_groups(' : {
		'kind' : 'f',
		'menu' : '\WP_Admin_Bar $wp_admin_bar'
	},
	'wp_admin_bar_appearance_menu(' : {
		'kind' : 'f',
		'menu' : '\WP_Admin_Bar $wp_admin_bar'
	},
	'wp_admin_bar_comments_menu(' : {
		'kind' : 'f',
		'menu' : '\WP_Admin_Bar $wp_admin_bar'
	},
	'wp_admin_bar_customize_menu(' : {
		'kind' : 'f',
		'menu' : '\WP_Admin_Bar $wp_admin_bar'
	},
	'wp_admin_bar_dashboard_view_site_menu(' : {
		'kind' : 'f',
		'menu' : '\WP_Admin_Bar $wp_admin_bar'
	},
	'wp_admin_bar_edit_menu(' : {
		'kind' : 'f',
		'menu' : '\WP_Admin_Bar $wp_admin_bar'
	},
	'wp_admin_bar_header(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_admin_bar_my_account_item(' : {
		'kind' : 'f',
		'menu' : '\WP_Admin_Bar $wp_admin_bar'
	},
	'wp_admin_bar_my_account_menu(' : {
		'kind' : 'f',
		'menu' : '\WP_Admin_Bar $wp_admin_bar'
	},
	'wp_admin_bar_my_sites_menu(' : {
		'kind' : 'f',
		'menu' : '\WP_Admin_Bar $wp_admin_bar'
	},
	'wp_admin_bar_new_content_menu(' : {
		'kind' : 'f',
		'menu' : '\WP_Admin_Bar $wp_admin_bar'
	},
	'wp_admin_bar_render(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_admin_bar_search_menu(' : {
		'kind' : 'f',
		'menu' : '\WP_Admin_Bar $wp_admin_bar'
	},
	'wp_admin_bar_shortlink_menu(' : {
		'kind' : 'f',
		'menu' : '\WP_Admin_Bar $wp_admin_bar'
	},
	'wp_admin_bar_sidebar_toggle(' : {
		'kind' : 'f',
		'menu' : '\WP_Admin_Bar $wp_admin_bar'
	},
	'wp_admin_bar_site_menu(' : {
		'kind' : 'f',
		'menu' : '\WP_Admin_Bar $wp_admin_bar'
	},
	'wp_admin_bar_updates_menu(' : {
		'kind' : 'f',
		'menu' : '\WP_Admin_Bar $wp_admin_bar'
	},
	'wp_admin_bar_wp_menu(' : {
		'kind' : 'f',
		'menu' : '\WP_Admin_Bar $wp_admin_bar'
	},
	'wp_admin_canonical_url(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_admin_css(' : {
		'kind' : 'f',
		'menu' : 'string $file, boolean $force_echo',
		'info' : "Enqueues or directly prints a stylesheet link to the specified CSS file."
	},
	'wp_admin_css_color(' : {
		'kind' : 'f',
		'menu' : 'string $key, string $name, string $url, array $colors, array $icons',
		'info' : "Registers an admin colour scheme css file."
	},
	'wp_admin_css_uri(' : {
		'kind' : 'f',
		'menu' : 'string $file | string'
	},
	'wp_ajax_add_link_category(' : {
		'kind' : 'f',
		'menu' : 'string $action'
	},
	'wp_ajax_add_menu_item(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_add_meta(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_add_tag(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_add_user(' : {
		'kind' : 'f',
		'menu' : 'string $action'
	},
	'wp_ajax_ajax_tag_search(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_autocomplete_user(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_closed_postboxes(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_crop_image(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_dashboard_widgets(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_date_format(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_delete_comment(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_delete_inactive_widgets(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_delete_link(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_delete_meta(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_delete_page(' : {
		'kind' : 'f',
		'menu' : 'string $action'
	},
	'wp_ajax_delete_plugin(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_delete_post(' : {
		'kind' : 'f',
		'menu' : 'string $action'
	},
	'wp_ajax_delete_tag(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_delete_theme(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_destroy_sessions(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_dim_comment(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_dismiss_wp_pointer(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_edit_comment(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_fetch_list(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_find_posts(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_generate_password(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_get_attachment(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_get_comments(' : {
		'kind' : 'f',
		'menu' : 'string $action'
	},
	'wp_ajax_get_permalink(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_get_post_thumbnail_html(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_get_revision_diffs(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_get_tagcloud(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_heartbeat(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_hidden_columns(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_image_editor(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_imgedit_preview(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_inline_save(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_inline_save_tax(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_install_plugin(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_install_theme(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_logged_in(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_menu_get_metabox(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_menu_locations_save(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_menu_quick_search(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_meta_box_order(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_nopriv_heartbeat(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_oembed_cache(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_parse_embed(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_parse_media_shortcode(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_press_this_add_category(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_press_this_save_post(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_query_attachments(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_query_themes(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_replyto_comment(' : {
		'kind' : 'f',
		'menu' : 'string $action'
	},
	'wp_ajax_sample_permalink(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_save_attachment(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_save_attachment_compat(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_save_attachment_order(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_save_user_color_scheme(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_save_widget(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_save_wporg_username(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_search_install_plugins(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_search_plugins(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_send_attachment_to_editor(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_send_link_to_editor(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_set_attachment_thumbnail(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_set_post_thumbnail(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_time_format(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_trash_post(' : {
		'kind' : 'f',
		'menu' : 'string $action'
	},
	'wp_ajax_untrash_post(' : {
		'kind' : 'f',
		'menu' : 'string $action'
	},
	'wp_ajax_update_plugin(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_update_theme(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_update_welcome_panel(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_update_widget(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_upload_attachment(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_widgets_order(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_wp_compression_test(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_wp_fullscreen_save_post(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_wp_link_ajax(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_ajax_wp_remove_post_lock(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_allow_comment(' : {
		'kind' : 'f',
		'menu' : 'array $commentdata, boolean $avoid_die | integer|string|\WP_Error'
	},
	'wp_allowed_protocols(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_array_slice_assoc(' : {
		'kind' : 'f',
		'menu' : 'array $array, array $keys | array'
	},
	'wp_attachment_is(' : {
		'kind' : 'f',
		'menu' : 'string $type, integer|\WP_Post $post | boolean'
	},
	'wp_attachment_is_image(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Post $post | boolean'
	},
	'wp_audio_shortcode(' : {
		'kind' : 'f',
		'menu' : 'array $attr, string $content | string|void',
		'info' : "Builds the Audio shortcode output."
	},
	'wp_auth_check(' : {
		'kind' : 'f',
		'menu' : 'array $response | array',
		'info' : "Check whether a user is still logged in, for the heartbeat."
	},
	'wp_auth_check_html(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_auth_check_load(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_authenticate(' : {
		'kind' : 'f',
		'menu' : 'string $username, string $password | \WP_User|\WP_Error'
	},
	'wp_authenticate_cookie(' : {
		'kind' : 'f',
		'menu' : '\WP_User|\WP_Error|null $user, string $username, string $password | \WP_User|\WP_Error'
	},
	'wp_authenticate_email_password(' : {
		'kind' : 'f',
		'menu' : '\WP_User|\WP_Error|null $user, string $email, string $password | \WP_User|\WP_Error'
	},
	'wp_authenticate_spam_check(' : {
		'kind' : 'f',
		'menu' : '\WP_User|\WP_Error|null $user | \WP_User|\WP_Error'
	},
	'wp_authenticate_username_password(' : {
		'kind' : 'f',
		'menu' : '\WP_User|\WP_Error|null $user, string $username, string $password | \WP_User|\WP_Error'
	},
	'wp_autosave(' : {
		'kind' : 'f',
		'menu' : 'array $post_data | mixed',
		'info' : "Save a post submitted with XHR"
	},
	'wp_basename(' : {
		'kind' : 'f',
		'menu' : 'string $path, string $suffix | string'
	},
	'wp_blacklist_check(' : {
		'kind' : 'f',
		'menu' : 'string $author, string $email, string $url, string $comment, string $user_ip, string $user_agent | boolean'
	},
	'wp_cache_add(' : {
		'kind' : 'f',
		'menu' : 'integer|string $key, mixed $data, string $group, integer $expire | boolean'
	},
	'wp_cache_add_global_groups(' : {
		'kind' : 'f',
		'menu' : 'string|array $groups'
	},
	'wp_cache_add_non_persistent_groups(' : {
		'kind' : 'f',
		'menu' : 'string|array $groups'
	},
	'wp_cache_close(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_cache_decr(' : {
		'kind' : 'f',
		'menu' : 'integer|string $key, integer $offset, string $group | false|integer'
	},
	'wp_cache_delete(' : {
		'kind' : 'f',
		'menu' : 'integer|string $key, string $group | boolean'
	},
	'wp_cache_flush(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_cache_get(' : {
		'kind' : 'f',
		'menu' : 'integer|string $key, string $group, boolean $force, boolean $found | boolean|mixed'
	},
	'wp_cache_get_last_changed(' : {
		'kind' : 'f',
		'menu' : '$group | string'
	},
	'wp_cache_incr(' : {
		'kind' : 'f',
		'menu' : 'integer|string $key, integer $offset, string $group | false|integer'
	},
	'wp_cache_init(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_cache_replace(' : {
		'kind' : 'f',
		'menu' : 'integer|string $key, mixed $data, string $group, integer $expire | boolean'
	},
	'wp_cache_reset(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_cache_set(' : {
		'kind' : 'f',
		'menu' : 'integer|string $key, mixed $data, string $group, integer $expire | boolean',
		'info' : "Saves the data to the cache."
	},
	'wp_cache_switch_to_blog(' : {
		'kind' : 'f',
		'menu' : 'integer $blog_id',
		'info' : "Switches the internal blog ID."
	},
	'wp_calculate_image_sizes(' : {
		'kind' : 'f',
		'menu' : 'array|string $size, string $image_src, array $image_meta, integer $attachment_id | string|boolean'
	},
	'wp_calculate_image_srcset(' : {
		'kind' : 'f',
		'menu' : 'array $size_array, string $image_src, array $image_meta, integer $attachment_id | string|boolean'
	},
	'wp_can_install_language_pack(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_caption_input_textarea(' : {
		'kind' : 'f',
		'menu' : '\WP_Post $edit_post | string'
	},
	'wp_category_checklist(' : {
		'kind' : 'f',
		'menu' : 'integer $post_id, integer $descendants_and_self, array $selected_cats, array $popular_cats, object $walker, boolean $checked_ontop'
	},
	'wp_check_browser_version(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_check_comment_data_max_lengths(' : {
		'kind' : 'f',
		'menu' : 'array $comment_data | \WP_Error|true'
	},
	'wp_check_comment_flood(' : {
		'kind' : 'f',
		'menu' : 'boolean $is_flood, string $ip, string $email, string $date, boolean $avoid_die | boolean',
		'info' : "Checks whether comment flooding is occurring."
	},
	'wp_check_filetype(' : {
		'kind' : 'f',
		'menu' : 'string $filename, array $mimes | array',
		'info' : "Retrieve the file type from the file name."
	},
	'wp_check_filetype_and_ext(' : {
		'kind' : 'f',
		'menu' : 'string $file, string $filename, array $mimes | array',
		'info' : "Attempt to determine the real file type of a file."
	},
	'wp_check_for_changed_slugs(' : {
		'kind' : 'f',
		'menu' : 'integer $post_id, \WP_Post $post, \WP_Post $post_before',
		'info' : "Check for changed slugs for published post objects and save the old slug."
	},
	'wp_check_invalid_utf8(' : {
		'kind' : 'f',
		'menu' : 'string $string, boolean $strip | string'
	},
	'wp_check_jsonp_callback(' : {
		'kind' : 'f',
		'menu' : 'string $callback | boolean',
		'info' : "Checks that a JSONP callback is a valid JavaScript callback."
	},
	'wp_check_locked_posts(' : {
		'kind' : 'f',
		'menu' : 'array $response, array $data, string $screen_id | array'
	},
	'wp_check_mysql_version(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_check_password(' : {
		'kind' : 'f',
		'menu' : 'string $password, string $hash, string|integer $user_id | boolean',
		'info' : "Checks the plaintext password against the encrypted Password."
	},
	'wp_check_php_mysql_versions(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_check_post_hierarchy_for_loops(' : {
		'kind' : 'f',
		'menu' : 'integer $post_parent, integer $post_ID | integer',
		'info' : "Check the given subset of the post hierarchy for hierarchy loops."
	},
	'wp_check_post_lock(' : {
		'kind' : 'f',
		'menu' : 'integer $post_id | integer'
	},
	'wp_check_term_hierarchy_for_loops(' : {
		'kind' : 'f',
		'menu' : 'integer $parent, integer $term_id, string $taxonomy | integer',
		'info' : "Checks the given subset of the term hierarchy for hierarchy loops."
	},
	'wp_checkdate(' : {
		'kind' : 'f',
		'menu' : 'integer $month, integer $day, integer $year, string $source_date | boolean'
	},
	'wp_clean_plugins_cache(' : {
		'kind' : 'f',
		'menu' : 'boolean $clear_update_cache'
	},
	'wp_clean_themes_cache(' : {
		'kind' : 'f',
		'menu' : 'boolean $clear_update_cache'
	},
	'wp_clean_update_cache(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_clear_auth_cookie(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_clear_scheduled_hook(' : {
		'kind' : 'f',
		'menu' : 'string $hook, array $args'
	},
	'wp_clearcookie(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_clone(' : {
		'kind' : 'f',
		'menu' : 'object $object | object'
	},
	'wp_color_scheme_settings(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_comment_form_unfiltered_html_nonce(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_comment_reply(' : {
		'kind' : 'f',
		'menu' : 'integer $position, boolean $checkbox, string $mode, boolean $table_row'
	},
	'wp_comment_trashnotice(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_constrain_dimensions(' : {
		'kind' : 'f',
		'menu' : 'integer $current_width, integer $current_height, integer $max_width, integer $max_height | array',
		'info' : "Calculates the new dimensions for a down-sampled image."
	},
	'wp_convert_bytes_to_hr(' : {
		'kind' : 'f',
		'menu' : 'integer $bytes | string'
	},
	'wp_convert_hr_to_bytes(' : {
		'kind' : 'f',
		'menu' : 'string $value | integer'
	},
	'wp_convert_widget_settings(' : {
		'kind' : 'f',
		'menu' : 'string $base_name, string $option_name, array $settings | array'
	},
	'wp_cookie_constants(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_count_attachments(' : {
		'kind' : 'f',
		'menu' : 'string|array $mime_type | object',
		'info' : "Count number of attachments for the mime type(s)."
	},
	'wp_count_comments(' : {
		'kind' : 'f',
		'menu' : 'integer $post_id | object|array',
		'info' : "Retrieve total comments for blog or single post."
	},
	'wp_count_posts(' : {
		'kind' : 'f',
		'menu' : 'string $type, string $perm | object',
		'info' : "Count number of posts of a post type and if user has permissions to view."
	},
	'wp_count_terms(' : {
		'kind' : 'f',
		'menu' : 'string $taxonomy, array|string $args | array|integer|\WP_Error',
		'info' : "Count how many terms are in Taxonomy."
	},
	'wp_create_categories(' : {
		'kind' : 'f',
		'menu' : 'array $categories, integer $post_id | array'
	},
	'wp_create_category(' : {
		'kind' : 'f',
		'menu' : 'integer|string $cat_name, integer $parent | integer|\WP_Error'
	},
	'wp_create_nav_menu(' : {
		'kind' : 'f',
		'menu' : 'string $menu_name | integer|\WP_Error',
		'info' : "Creates a navigation menu."
	},
	'wp_create_nonce(' : {
		'kind' : 'f',
		'menu' : 'string|integer $action | string'
	},
	'wp_create_post_autosave(' : {
		'kind' : 'f',
		'menu' : 'mixed $post_data | mixed'
	},
	'wp_create_tag(' : {
		'kind' : 'f',
		'menu' : 'integer|string $tag_name | array|\WP_Error'
	},
	'wp_create_term(' : {
		'kind' : 'f',
		'menu' : 'integer|string $tag_name, string $taxonomy | array|\WP_Error'
	},
	'wp_create_thumbnail(' : {
		'kind' : 'f',
		'menu' : 'mixed $file, integer $max_side, mixed $deprecated | string'
	},
	'wp_create_user(' : {
		'kind' : 'f',
		'menu' : 'string $username, string $password, string $email | integer|\WP_Error',
		'info' : "A simpler way of inserting a user into the database."
	},
	'wp_credits(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_cron(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_crop_image(' : {
		'kind' : 'f',
		'menu' : 'string|integer $src, integer $src_x, integer $src_y, integer $src_w, integer $src_h, integer $dst_w, integer $dst_h, integer $src_abs, string $dst_file | string|\WP_Error'
	},
	'wp_custom_css_cb(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_customize_support_script(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_customize_url(' : {
		'kind' : 'f',
		'menu' : 'string $stylesheet | string'
	},
	'wp_dashboard(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_dashboard_browser_nag(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_dashboard_cached_rss_widget(' : {
		'kind' : 'f',
		'menu' : 'string $widget_id, callable $callback, array $check_urls | boolean',
		'info' : "Checks to see if all of the feed url in $check_urls are cached."
	},
	'wp_dashboard_empty(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_dashboard_incoming_links(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_dashboard_incoming_links_control(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_dashboard_incoming_links_output(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_dashboard_plugins(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_dashboard_plugins_output(' : {
		'kind' : 'f',
		'menu' : 'string $rss, array $args'
	},
	'wp_dashboard_primary(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_dashboard_primary_control(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_dashboard_primary_output(' : {
		'kind' : 'f',
		'menu' : 'string $widget_id, array $feeds'
	},
	'wp_dashboard_quick_press(' : {
		'kind' : 'f',
		'menu' : 'string $error_msg'
	},
	'wp_dashboard_quick_press_output(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_dashboard_quota(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_dashboard_recent_comments(' : {
		'kind' : 'f',
		'menu' : 'integer $total_items | boolean'
	},
	'wp_dashboard_recent_comments_control(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_dashboard_recent_drafts(' : {
		'kind' : 'f',
		'menu' : 'array $drafts'
	},
	'wp_dashboard_recent_posts(' : {
		'kind' : 'f',
		'menu' : 'array $args | boolean'
	},
	'wp_dashboard_right_now(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_dashboard_rss_control(' : {
		'kind' : 'f',
		'menu' : 'string $widget_id, array $form_inputs',
		'info' : "The RSS dashboard widget control."
	},
	'wp_dashboard_rss_output(' : {
		'kind' : 'f',
		'menu' : 'string $widget_id'
	},
	'wp_dashboard_secondary(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_dashboard_secondary_control(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_dashboard_secondary_output(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_dashboard_setup(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_dashboard_site_activity(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_dashboard_trigger_widget_control(' : {
		'kind' : 'f',
		'menu' : 'integer $widget_control_id'
	},
	'wp_debug_backtrace_summary(' : {
		'kind' : 'f',
		'menu' : 'string $ignore_class, integer $skip_frames, boolean $pretty | string|array'
	},
	'wp_debug_mode(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_default_editor(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_default_scripts(' : {
		'kind' : 'f',
		'menu' : '\WP_Scripts $scripts',
		'info' : "Register all WordPress scripts."
	},
	'wp_default_styles(' : {
		'kind' : 'f',
		'menu' : '\WP_Styles $styles',
		'info' : "Assign default styles to $styles object."
	},
	'wp_defer_comment_counting(' : {
		'kind' : 'f',
		'menu' : 'boolean $defer | boolean',
		'info' : "Whether to defer comment counting."
	},
	'wp_defer_term_counting(' : {
		'kind' : 'f',
		'menu' : 'boolean $defer | boolean'
	},
	'wp_delete_attachment(' : {
		'kind' : 'f',
		'menu' : 'integer $post_id, boolean $force_delete | mixed',
		'info' : "Trash or delete an attachment."
	},
	'wp_delete_auto_drafts(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_delete_category(' : {
		'kind' : 'f',
		'menu' : 'integer $cat_ID | boolean|integer|\WP_Error'
	},
	'wp_delete_comment(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Comment $comment_id, boolean $force_delete | boolean',
		'info' : "Trashes or deletes a comment."
	},
	'wp_delete_file(' : {
		'kind' : 'f',
		'menu' : 'string $file'
	},
	'wp_delete_link(' : {
		'kind' : 'f',
		'menu' : 'integer $link_id | true'
	},
	'wp_delete_nav_menu(' : {
		'kind' : 'f',
		'menu' : 'string $menu | boolean|\WP_Error'
	},
	'wp_delete_object_term_relationships(' : {
		'kind' : 'f',
		'menu' : 'integer $object_id, string|array $taxonomies',
		'info' : "Will unlink the object from the taxonomy or taxonomies."
	},
	'wp_delete_post(' : {
		'kind' : 'f',
		'menu' : 'integer $postid, boolean $force_delete | array|false|\WP_Post',
		'info' : "Trash or delete a post or page."
	},
	'wp_delete_post_revision(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Post $revision_id | array|false|\WP_Post|\WP_Error|null',
		'info' : "Deletes a revision."
	},
	'wp_delete_term(' : {
		'kind' : 'f',
		'menu' : 'integer $term, string $taxonomy, array|string $args | boolean|integer|\WP_Error',
		'info' : "Removes a term from the database."
	},
	'wp_delete_user(' : {
		'kind' : 'f',
		'menu' : 'integer $id, integer $reassign | boolean',
		'info' : "Remove user and optionally reassign posts and links to another user."
	},
	'wp_dependencies_unique_hosts(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_dequeue_script(' : {
		'kind' : 'f',
		'menu' : 'string $handle'
	},
	'wp_dequeue_style(' : {
		'kind' : 'f',
		'menu' : 'string $handle'
	},
	'wp_deregister_script(' : {
		'kind' : 'f',
		'menu' : 'string $handle',
		'info' : "Remove a registered script."
	},
	'wp_deregister_style(' : {
		'kind' : 'f',
		'menu' : 'string $handle'
	},
	'wp_destroy_all_sessions(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_destroy_current_session(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_destroy_other_sessions(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_die(' : {
		'kind' : 'f',
		'menu' : 'string|\WP_Error $message, string|integer $title, string|array|integer $args',
		'info' : "Kill WordPress execution and display HTML message with error message."
	},
	'wp_doc_link_parse(' : {
		'kind' : 'f',
		'menu' : 'string $content | array'
	},
	'wp_doing_ajax(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_download_language_pack(' : {
		'kind' : 'f',
		'menu' : 'string $download | string|boolean'
	},
	'wp_dropdown_categories(' : {
		'kind' : 'f',
		'menu' : 'string|array $args | string',
		'info' : "Display or retrieve the HTML dropdown list of categories."
	},
	'wp_dropdown_cats(' : {
		'kind' : 'f',
		'menu' : 'integer $currentcat, integer $currentparent, integer $parent, integer $level, array $categories | boolean|null'
	},
	'wp_dropdown_languages(' : {
		'kind' : 'f',
		'menu' : 'string|array $args | string'
	},
	'wp_dropdown_pages(' : {
		'kind' : 'f',
		'menu' : 'array|string $args | string'
	},
	'wp_dropdown_roles(' : {
		'kind' : 'f',
		'menu' : 'string $selected'
	},
	'wp_dropdown_users(' : {
		'kind' : 'f',
		'menu' : 'array|string $args | string',
		'info' : "Create dropdown HTML content of users."
	},
	'wp_edit_attachments_query(' : {
		'kind' : 'f',
		'menu' : 'array|false $q | array'
	},
	'wp_edit_attachments_query_vars(' : {
		'kind' : 'f',
		'menu' : 'array|false $q | array'
	},
	'wp_edit_posts_query(' : {
		'kind' : 'f',
		'menu' : 'array|boolean $q | array'
	},
	'wp_editor(' : {
		'kind' : 'f',
		'menu' : 'string $content, string $editor_id, array $settings',
		'info' : "Renders an editor."
	},
	'wp_embed_defaults(' : {
		'kind' : 'f',
		'menu' : 'string $url | array',
		'info' : "Creates default array of embed parameters."
	},
	'wp_embed_excerpt_attachment(' : {
		'kind' : 'f',
		'menu' : 'string $content | string',
		'info' : "Filters the post excerpt for the embed template."
	},
	'wp_embed_excerpt_more(' : {
		'kind' : 'f',
		'menu' : 'string $more_string | string',
		'info' : "Filters the string in the 'more' link displayed after a trimmed excerpt."
	},
	'wp_embed_handler_audio(' : {
		'kind' : 'f',
		'menu' : 'array $matches, array $attr, string $url, array $rawattr | string'
	},
	'wp_embed_handler_googlevideo(' : {
		'kind' : 'f',
		'menu' : '$matches, $attr, $url, $rawattr | string',
		'info' : 'The Google Video embed handler callback.'
	},
	'wp_embed_handler_video(' : {
		'kind' : 'f',
		'menu' : 'array $matches, array $attr, string $url, array $rawattr | string'
	},
	'wp_embed_handler_youtube(' : {
		'kind' : 'f',
		'menu' : 'array $matches, array $attr, string $url, array $rawattr | string',
		'info' : 'YouTube iframe embed handler callback.'
	},
	'wp_embed_register_handler(' : {
		'kind' : 'f',
		'menu' : 'string $id, string $regex, callable $callback, integer $priority',
		'info' : "Registers an embed handler."
	},
	'wp_embed_unregister_handler(' : {
		'kind' : 'f',
		'menu' : 'string $id, integer $priority'
	},
	'wp_encode_emoji(' : {
		'kind' : 'f',
		'menu' : 'string $content | string',
		'info' : "Convert any 4 byte emoji in a string to their equivalent HTML entity."
	},
	'wp_enqueue_media(' : {
		'kind' : 'f',
		'menu' : 'array $args'
	},
	'wp_enqueue_script(' : {
		'kind' : 'f',
		'menu' : 'string $handle, string $src, array $deps, string|boolean|null $ver, boolean $in_footer',
		'info' : "Enqueue a script."
	},
	'wp_enqueue_scripts(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_enqueue_style(' : {
		'kind' : 'f',
		'menu' : 'string $handle, string $src, array $deps, string|boolean|null $ver, string $media',
		'info' : "Enqueue a CSS stylesheet."
	},
	'wp_exif_date2ts(' : {
		'kind' : 'f',
		'menu' : 'string $str | integer'
	},
	'wp_exif_frac2dec(' : {
		'kind' : 'f',
		'menu' : 'string $str | integer|float'
	},
	'wp_expand_dimensions(' : {
		'kind' : 'f',
		'menu' : 'integer $example_width, integer $example_height, integer $max_width, integer $max_height | array'
	},
	'wp_explain_nonce(' : {
		'kind' : 'f',
		'menu' : 'string $action | string',
		'info' : "Retrieve nonce action 'Are you sure' message."
	},
	'wp_ext2type(' : {
		'kind' : 'f',
		'menu' : 'string $ext | string|void'
	},
	'wp_extract_urls(' : {
		'kind' : 'f',
		'menu' : 'string $content | array'
	},
	'wp_favicon_request(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'WP_Filesystem(' : {
		'kind' : 'f',
		'menu' : 'array|false $args, string|false $context, boolean $allow_relaxed_file_ownership | null|boolean',
		'info' : "Initialises and connects the WordPress Filesystem Abstraction classes."
	},
	'wp_filter_comment(' : {
		'kind' : 'f',
		'menu' : 'array $commentdata | array',
		'info' : "Filters and sanitizes comment data."
	},
	'wp_filter_kses(' : {
		'kind' : 'f',
		'menu' : 'string $data | string'
	},
	'wp_filter_nohtml_kses(' : {
		'kind' : 'f',
		'menu' : 'string $data | string'
	},
	'wp_filter_object_list(' : {
		'kind' : 'f',
		'menu' : 'array $list, array $args, string $operator, boolean|string $field | array'
	},
	'wp_filter_oembed_result(' : {
		'kind' : 'f',
		'menu' : 'string $result, object $data, string $url | string',
		'info' : "Filters the given oEmbed HTML."
	},
	'wp_filter_post_kses(' : {
		'kind' : 'f',
		'menu' : 'string $data | string',
		'info' : "Sanitize content for allowed HTML tags for post content."
	},
	'wp_filter_pre_oembed_result(' : {
		'kind' : 'f',
		'menu' : 'null|string $result, string $url, array $args | null|string',
		'info' : "Filters the oEmbed result before any HTTP requests are made."
	},
	'wp_find_hierarchy_loop(' : {
		'kind' : 'f',
		'menu' : 'callable $callback, integer $start, integer $start_parent, array $callback_args | array'
	},
	'wp_find_hierarchy_loop_tortoise_hare(' : {
		'kind' : 'f',
		'menu' : 'callable $callback, integer $start, array $override, array $callback_args, boolean $_return_loop | mixed',
		'info' : "Use the 'The Tortoise and the Hare' algorithm to detect loops."
	},
	'wp_fix_server_vars(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_footer(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_functionality_constants(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_generate_attachment_metadata(' : {
		'kind' : 'f',
		'menu' : 'integer $attachment_id, string $file | mixed'
	},
	'wp_generate_auth_cookie(' : {
		'kind' : 'f',
		'menu' : 'integer $user_id, integer $expiration, string $scheme, string $token | string'
	},
	'wp_generate_password(' : {
		'kind' : 'f',
		'menu' : 'integer $length, boolean $special_chars, boolean $extra_special_chars | string'
	},
	'wp_generate_tag_cloud(' : {
		'kind' : 'f',
		'menu' : 'array $tags, string|array $args | string|array'
	},
	'wp_generate_uuid4(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_generator(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_get_active_and_valid_plugins(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_get_active_network_plugins(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_get_additional_image_sizes(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_get_all_sessions(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_get_archives(' : {
		'kind' : 'f',
		'menu' : 'string|array $args | string|void'
	},
	'wp_get_associated_nav_menu_items(' : {
		'kind' : 'f',
		'menu' : 'integer $object_id, string $object_type, string $taxonomy | array'
	},
	'wp_get_attachment_caption(' : {
		'kind' : 'f',
		'menu' : 'integer $post_id | string|false'
	},
	'wp_get_attachment_id3_keys(' : {
		'kind' : 'f',
		'menu' : '\WP_Post $attachment, string $context | array'
	},
	'wp_get_attachment_image(' : {
		'kind' : 'f',
		'menu' : 'integer $attachment_id, string|array $size, boolean $icon, string|array $attr | string',
		'info' : "Get an HTML img element representing an image attachment"
	},
	'wp_get_attachment_image_sizes(' : {
		'kind' : 'f',
		'menu' : 'integer $attachment_id, array|string $size, array $image_meta | string|boolean'
	},
	'wp_get_attachment_image_src(' : {
		'kind' : 'f',
		'menu' : 'integer $attachment_id, string|array $size, boolean $icon | false|array',
		'info' : "Retrieve an image to represent an attachment."
	},
	'wp_get_attachment_image_srcset(' : {
		'kind' : 'f',
		'menu' : 'integer $attachment_id, array|string $size, array $image_meta | string|boolean'
	},
	'wp_get_attachment_image_url(' : {
		'kind' : 'f',
		'menu' : 'integer $attachment_id, string|array $size, boolean $icon | string|false'
	},
	'wp_get_attachment_link(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Post $id, string|array $size, boolean $permalink, boolean $icon, string|false $text, array|string $attr | string'
	},
	'wp_get_attachment_metadata(' : {
		'kind' : 'f',
		'menu' : 'integer $post_id, boolean $unfiltered | mixed'
	},
	'wp_get_attachment_thumb_file(' : {
		'kind' : 'f',
		'menu' : 'integer $post_id | string|false'
	},
	'wp_get_attachment_thumb_url(' : {
		'kind' : 'f',
		'menu' : 'integer $post_id | string|false'
	},
	'wp_get_attachment_url(' : {
		'kind' : 'f',
		'menu' : 'integer $post_id | string|false'
	},
	'wp_get_audio_extensions(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_get_available_translations(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_get_canonical_url(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Post $post | string|false',
		'info' : "Returns the canonical URL for a post."
	},
	'wp_get_comment_fields_max_lengths(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_get_comment_status(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Comment $comment_id | false|string'
	},
	'wp_get_cookie_login(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_get_current_commenter(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_get_current_user(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_get_custom_css(' : {
		'kind' : 'f',
		'menu' : 'string $stylesheet | string'
	},
	'wp_get_custom_css_post(' : {
		'kind' : 'f',
		'menu' : 'string $stylesheet | \WP_Post|null'
	},
	'wp_get_db_schema(' : {
		'kind' : 'f',
		'menu' : 'string $scope, integer $blog_id | string'
	},
	'wp_get_document_title(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_get_ext_types(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_get_http(' : {
		'kind' : 'f',
		'menu' : 'string $url, string|boolean $file_path, integer $red | boolean|string',
		'info' : "Perform a HTTP HEAD or GET request."
	},
	'wp_get_http_headers(' : {
		'kind' : 'f',
		'menu' : 'string $url, boolean $deprecated | boolean|string'
	},
	'wp_get_image_editor(' : {
		'kind' : 'f',
		'menu' : 'string $path, array $args | \WP_Image_Editor|\WP_Error'
	},
	'wp_get_installed_translations(' : {
		'kind' : 'f',
		'menu' : 'string $type | array',
		'info' : "Get installed translations."
	},
	'wp_get_link_cats(' : {
		'kind' : 'f',
		'menu' : 'integer $link_id | array'
	},
	'wp_get_links(' : {
		'kind' : 'f',
		'menu' : 'string $args | null|string'
	},
	'wp_get_linksbyname(' : {
		'kind' : 'f',
		'menu' : 'string $category, string $args | string|null'
	},
	'wp_get_mime_types(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_get_mu_plugins(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_get_nav_menu_items(' : {
		'kind' : 'f',
		'menu' : 'string $menu, array $args | false|array'
	},
	'wp_get_nav_menu_object(' : {
		'kind' : 'f',
		'menu' : 'integer|string|\WP_Term $menu | \WP_Term|false'
	},
	'wp_get_nav_menu_to_edit(' : {
		'kind' : 'f',
		'menu' : 'integer $menu_id | string|\WP_Error'
	},
	'wp_get_nav_menus(' : {
		'kind' : 'f',
		'menu' : 'array $args | array'
	},
	'wp_get_nocache_headers(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_get_object_terms(' : {
		'kind' : 'f',
		'menu' : 'integer|array $object_ids, string|array $taxonomies, array|string $args | array|\WP_Error'
	},
	'wp_get_original_referer(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_get_password_hint(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_get_pomo_file_data(' : {
		'kind' : 'f',
		'menu' : 'string $po_file | array'
	},
	'wp_get_popular_importers(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_get_post_autosave(' : {
		'kind' : 'f',
		'menu' : 'integer $post_id, integer $user_id | \WP_Post|false',
		'info' : "Retrieve the autosaved data of the specified post."
	},
	'wp_get_post_categories(' : {
		'kind' : 'f',
		'menu' : 'integer $post_id, array $args | array',
		'info' : "Retrieve the list of categories for a post."
	},
	'wp_get_post_cats(' : {
		'kind' : 'f',
		'menu' : 'integer $blogid, integer $post_ID | array'
	},
	'wp_get_post_parent_id(' : {
		'kind' : 'f',
		'menu' : 'integer $post_ID | integer|false'
	},
	'wp_get_post_revision(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Post $post, string $output, string $filter | \WP_Post|array|null'
	},
	'wp_get_post_revisions(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Post $post_id, array|null $args | array'
	},
	'wp_get_post_tags(' : {
		'kind' : 'f',
		'menu' : 'integer $post_id, array $args | array',
		'info' : "Retrieve the tags for a post."
	},
	'wp_get_post_terms(' : {
		'kind' : 'f',
		'menu' : 'integer $post_id, string $taxonomy, array $args | array|\WP_Error',
		'info' : "Retrieve the terms for a post."
	},
	'wp_get_raw_referer(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_get_recent_posts(' : {
		'kind' : 'f',
		'menu' : 'array $args, string $output | array|false'
	},
	'wp_get_referer(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_get_revision_ui_diff(' : {
		'kind' : 'f',
		'menu' : 'object|integer $post, integer $compare_from, integer $compare_to | array|boolean'
	},
	'wp_get_schedule(' : {
		'kind' : 'f',
		'menu' : 'string $hook, array $args | string|false'
	},
	'wp_get_schedules(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_get_server_protocol(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_get_session_token(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_get_shortlink(' : {
		'kind' : 'f',
		'menu' : 'integer $id, string $context, boolean $allow_slugs | string',
		'info' : "Returns a shortlink for a post, page, attachment, or site."
	},
	'wp_get_sidebars_widgets(' : {
		'kind' : 'f',
		'menu' : 'boolean $deprecated | array',
		'info' : "Retrieve full list of sidebars and their widget instance IDs."
	},
	'wp_get_single_post(' : {
		'kind' : 'f',
		'menu' : 'integer $postid, string $mode | \WP_Post|null',
		'info' : "Retrieve a single post, based on post ID."
	},
	'wp_get_sites(' : {
		'kind' : 'f',
		'menu' : 'array $args | array'
	},
	'wp_get_split_term(' : {
		'kind' : 'f',
		'menu' : 'integer $old_term_id, string $taxonomy | integer|false'
	},
	'wp_get_split_terms(' : {
		'kind' : 'f',
		'menu' : 'integer $old_term_id | array'
	},
	'wp_get_term_taxonomy_parent_id(' : {
		'kind' : 'f',
		'menu' : 'integer $term_id, string $taxonomy | integer|false'
	},
	'wp_get_theme(' : {
		'kind' : 'f',
		'menu' : 'string $stylesheet, string $theme_root | \WP_Theme'
	},
	'wp_get_themes(' : {
		'kind' : 'f',
		'menu' : 'array $args | array',
		'info' : "Returns an array of WP_Theme objects based on the arguments."
	},
	'wp_get_translation_updates(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_get_update_data(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_get_upload_dir(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_get_user_contact_methods(' : {
		'kind' : 'f',
		'menu' : '\WP_User $user | array',
		'info' : "Set up the user contact methods."
	},
	'wp_get_users_with_no_role(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_get_video_extensions(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_get_widget_defaults(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_guess_url(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_handle_comment_submission(' : {
		'kind' : 'f',
		'menu' : 'array $comment_data | \WP_Comment|\WP_Error',
		'info' : "Handles the submission of a comment, usually posted to wp-comments-post.php via a comment form."
	},
	'wp_handle_sideload(' : {
		'kind' : 'f',
		'menu' : 'array $file, array|boolean $overrides, string $time | array',
		'info' : "Wrapper for _wp_handle_upload()."
	},
	'wp_handle_upload(' : {
		'kind' : 'f',
		'menu' : 'array $file, array|boolean $overrides, string $time | array',
		'info' : "Wrapper for _wp_handle_upload()."
	},
	'wp_handle_upload_error(' : {
		'kind' : 'f',
		'menu' : '$file, $message'
	},
	'wp_hash(' : {
		'kind' : 'f',
		'menu' : 'string $data, string $scheme | string'
	},
	'wp_hash_password(' : {
		'kind' : 'f',
		'menu' : 'string $password | string',
		'info' : "Create a hash (encrypt) of a plain text password."
	},
	'wp_head(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_heartbeat_set_suspension(' : {
		'kind' : 'f',
		'menu' : 'array $settings | array'
	},
	'wp_heartbeat_settings(' : {
		'kind' : 'f',
		'menu' : 'array $settings | array',
		'info' : "Default settings for heartbeat"
	},
	'wp_html_excerpt(' : {
		'kind' : 'f',
		'menu' : 'string $str, integer $count, string $more | string',
		'info' : "Safely extracts not more than the first $count characters from html string."
	},
	'wp_html_split(' : {
		'kind' : 'f',
		'menu' : 'string $input | array'
	},
	'wp_htmledit_pre(' : {
		'kind' : 'f',
		'menu' : 'string $output | string',
		'info' : "Formats text for the HTML editor."
	},
	'wp_http_supports(' : {
		'kind' : 'f',
		'menu' : 'array $capabilities, string $url | boolean'
	},
	'wp_http_validate_url(' : {
		'kind' : 'f',
		'menu' : 'string $url | false|string'
	},
	'wp_iframe(' : {
		'kind' : 'f',
		'menu' : 'string|callable $content_func'
	},
	'wp_image_add_srcset_and_sizes(' : {
		'kind' : 'f',
		'menu' : 'string $image, array $image_meta, integer $attachment_id | string'
	},
	'wp_image_editor(' : {
		'kind' : 'f',
		'menu' : 'integer $post_id, boolean|object $msg'
	},
	'wp_image_editor_supports(' : {
		'kind' : 'f',
		'menu' : 'string|array $args | boolean'
	},
	'wp_image_matches_ratio(' : {
		'kind' : 'f',
		'menu' : 'integer $source_width, integer $source_height, integer $target_width, integer $target_height | boolean'
	},
	'wp_imagecreatetruecolor(' : {
		'kind' : 'f',
		'menu' : 'integer $width, integer $height | resource'
	},
	'wp_import_cleanup(' : {
		'kind' : 'f',
		'menu' : 'string $id',
		'info' : "Cleanup importer."
	},
	'wp_import_handle_upload(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_import_upload_form(' : {
		'kind' : 'f',
		'menu' : 'string $action'
	},
	'wp_initial_constants(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_initial_nav_menu_meta_boxes(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_insert_attachment(' : {
		'kind' : 'f',
		'menu' : 'string|array $args, string $file, integer $parent, boolean $wp_error | integer|\WP_Error',
		'info' : "Insert an attachment."
	},
	'wp_insert_category(' : {
		'kind' : 'f',
		'menu' : 'array $catarr, boolean $wp_error | integer|object'
	},
	'wp_insert_comment(' : {
		'kind' : 'f',
		'menu' : 'array $commentdata | integer|false'
	},
	'wp_insert_link(' : {
		'kind' : 'f',
		'menu' : 'array $linkdata, boolean $wp_error | integer|\WP_Error'
	},
	'wp_insert_post(' : {
		'kind' : 'f',
		'menu' : 'array $postarr, boolean $wp_error | integer|\WP_Error',
		'info' : "Insert or update a post."
	},
	'wp_insert_term(' : {
		'kind' : 'f',
		'menu' : 'string $term, string $taxonomy, array|string $args | array|\WP_Error',
		'info' : "Add a new term to the database."
	},
	'wp_insert_user(' : {
		'kind' : 'f',
		'menu' : 'array|object|\WP_User $userdata | integer|\WP_Error',
		'info' : "Insert a user into the database."
	},
	'wp_install(' : {
		'kind' : 'f',
		'menu' : 'string $blog_title, string $user_name, string $user_email, boolean $public, string $deprecated, string $user_password, string $language | array',
		'info' : "Installs the site."
	},
	'wp_install_defaults(' : {
		'kind' : 'f',
		'menu' : 'integer $user_id',
		'info' : "Creates the initial content for a newly-installed site."
	},
	'wp_install_language_form(' : {
		'kind' : 'f',
		'menu' : 'array $languages'
	},
	'wp_install_maybe_enable_pretty_permalinks(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_installing(' : {
		'kind' : 'f',
		'menu' : 'boolean $is_installing | boolean',
		'info' : "Check or set whether WordPress is in 'installation' mode."
	},
	'wp_is_ini_value_changeable(' : {
		'kind' : 'f',
		'menu' : 'string $setting | boolean'
	},
	'wp_is_large_network(' : {
		'kind' : 'f',
		'menu' : 'string $using | boolean',
		'info' : "Whether or not we have a large network."
	},
	'wp_is_mobile(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_is_numeric_array(' : {
		'kind' : 'f',
		'menu' : 'mixed $data | boolean'
	},
	'wp_is_post_autosave(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Post $post | false|integer'
	},
	'wp_is_post_revision(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Post $post | false|integer'
	},
	'wp_is_stream(' : {
		'kind' : 'f',
		'menu' : 'string $path | boolean'
	},
	'wp_is_writable(' : {
		'kind' : 'f',
		'menu' : 'string $path | boolean',
		'info' : "Determine if a directory is writable."
	},
	'wp_iso_descrambler(' : {
		'kind' : 'f',
		'menu' : 'string $string | string'
	},
	'wp_json_encode(' : {
		'kind' : 'f',
		'menu' : 'mixed $data, integer $options, integer $depth | string|false'
	},
	'wp_just_in_time_script_localization(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_kses(' : {
		'kind' : 'f',
		'menu' : 'string $string, array $allowed_html, array $allowed_protocols | string',
		'info' : "Filters content and keeps only allowable HTML elements."
	},
	'wp_kses_allowed_html(' : {
		'kind' : 'f',
		'menu' : 'string $context | array'
	},
	'wp_kses_array_lc(' : {
		'kind' : 'f',
		'menu' : 'array $inarray | array'
	},
	'wp_kses_attr(' : {
		'kind' : 'f',
		'menu' : 'string $element, string $attr, array $allowed_html, array $allowed_protocols | string',
		'info' : "Removes all attributes, if none are allowed for this element."
	},
	'wp_kses_attr_check(' : {
		'kind' : 'f',
		'menu' : 'string $name, string $value, string $whole, string $vless, string $element, array $allowed_html | boolean'
	},
	'wp_kses_attr_parse(' : {
		'kind' : 'f',
		'menu' : 'string $element | array|boolean',
		'info' : "Finds all attributes of an HTML element."
	},
	'wp_kses_bad_protocol(' : {
		'kind' : 'f',
		'menu' : 'string $string, array $allowed_protocols | string',
		'info' : "Sanitize string from bad protocols."
	},
	'wp_kses_bad_protocol_once(' : {
		'kind' : 'f',
		'menu' : 'string $string, string $allowed_protocols, $count | string',
		'info' : "Sanitizes content from bad protocols and other characters."
	},
	'wp_kses_bad_protocol_once2(' : {
		'kind' : 'f',
		'menu' : 'string $string, string $allowed_protocols | string',
		'info' : "Callback for wp_kses_bad_protocol_once() regular expression."
	},
	'wp_kses_check_attr_val(' : {
		'kind' : 'f',
		'menu' : 'string $value, string $vless, string $checkname, mixed $checkvalue | boolean',
		'info' : "Performs different checks for attribute values."
	},
	'wp_kses_data(' : {
		'kind' : 'f',
		'menu' : 'string $data | string'
	},
	'wp_kses_decode_entities(' : {
		'kind' : 'f',
		'menu' : 'string $string | string',
		'info' : "Convert all entities to their character counterparts."
	},
	'wp_kses_hair(' : {
		'kind' : 'f',
		'menu' : 'string $attr, array $allowed_protocols | array',
		'info' : "Builds an attribute list from string containing attributes."
	},
	'wp_kses_hair_parse(' : {
		'kind' : 'f',
		'menu' : 'string $attr | array|boolean',
		'info' : "Builds an attribute list from string containing attributes."
	},
	'wp_kses_hook(' : {
		'kind' : 'f',
		'menu' : 'string $string, array $allowed_html, array $allowed_protocols | string',
		'info' : "You add any kses hooks here."
	},
	'wp_kses_html_error(' : {
		'kind' : 'f',
		'menu' : 'string $string | string',
		'info' : "Handles parsing errors in wp_kses_hair()."
	},
	'wp_kses_js_entities(' : {
		'kind' : 'f',
		'menu' : 'string $string | string',
		'info' : "Removes the HTML JavaScript entities found in early versions of Netscape 4."
	},
	'wp_kses_named_entities(' : {
		'kind' : 'f',
		'menu' : 'array $matches | string',
		'info' : "Callback for wp_kses_normalize_entities() regular expression."
	},
	'wp_kses_no_null(' : {
		'kind' : 'f',
		'menu' : 'string $string, array $options | string',
		'info' : "Removes any invalid control characters in $string."
	},
	'wp_kses_normalize_entities(' : {
		'kind' : 'f',
		'menu' : 'string $string | string',
		'info' : "Converts and fixes HTML entities."
	},
	'wp_kses_normalize_entities2(' : {
		'kind' : 'f',
		'menu' : 'array $matches | string',
		'info' : "Callback for wp_kses_normalize_entities() regular expression."
	},
	'wp_kses_normalize_entities3(' : {
		'kind' : 'f',
		'menu' : 'array $matches | string',
		'info' : "Callback for wp_kses_normalize_entities() for regular expression."
	},
	'wp_kses_one_attr(' : {
		'kind' : 'f',
		'menu' : 'string $string, string $element | string',
		'info' : "Filters one attribute only and ensures its value is allowed."
	},
	'wp_kses_post(' : {
		'kind' : 'f',
		'menu' : 'string $data | string',
		'info' : "Sanitize content for allowed HTML tags for post content."
	},
	'wp_kses_post_deep(' : {
		'kind' : 'f',
		'menu' : 'mixed $data | mixed'
	},
	'wp_kses_split(' : {
		'kind' : 'f',
		'menu' : 'string $string, array $allowed_html, array $allowed_protocols | string',
		'info' : "Searches for HTML tags, no matter how malformed."
	},
	'wp_kses_split2(' : {
		'kind' : 'f',
		'menu' : 'string $string, array $allowed_html, array $allowed_protocols | string',
		'info' : "Callback for wp_kses_split for fixing malformed HTML tags."
	},
	'wp_kses_stripslashes(' : {
		'kind' : 'f',
		'menu' : 'string $string | string',
		'info' : "Strips slashes from in front of quotes."
	},
	'wp_kses_version(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_link_category_checklist(' : {
		'kind' : 'f',
		'menu' : 'integer $link_id'
	},
	'wp_link_manager_disabled_message(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_link_pages(' : {
		'kind' : 'f',
		'menu' : 'string|array $args | string',
		'info' : "The formatted output of a list of pages."
	},
	'wp_list_authors(' : {
		'kind' : 'f',
		'menu' : 'string|array $args | string|void'
	},
	'wp_list_bookmarks(' : {
		'kind' : 'f',
		'menu' : 'string|array $args | string|void',
		'info' : "Retrieve or echo all of the bookmarks."
	},
	'wp_list_categories(' : {
		'kind' : 'f',
		'menu' : 'string|array $args | false|string'
	},
	'wp_list_cats(' : {
		'kind' : 'f',
		'menu' : 'string|array $args | false|null|string'
	},
	'wp_list_comments(' : {
		'kind' : 'f',
		'menu' : 'string|array $args, array $comments',
		'info' : "List comments."
	},
	'wp_list_filter(' : {
		'kind' : 'f',
		'menu' : 'array $list, array $args, string $operator | array'
	},
	'wp_list_pages(' : {
		'kind' : 'f',
		'menu' : 'array|string $args | string|void'
	},
	'wp_list_pluck(' : {
		'kind' : 'f',
		'menu' : 'array $list, integer|string $field, integer|string $index_key | array',
		'info' : "Pluck a certain field out of each object in a list."
	},
	'wp_list_post_revisions(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Post $post_id, string $type',
		'info' : "Display list of a post's revisions."
	},
	'wp_list_sort(' : {
		'kind' : 'f',
		'menu' : 'array $list, string|array $orderby, string $order, boolean $preserve_keys | array'
	},
	'wp_list_widget_controls(' : {
		'kind' : 'f',
		'menu' : 'string $sidebar, string $sidebar_name',
		'info' : "Show the widgets and their settings for a sidebar."
	},
	'wp_list_widget_controls_dynamic_sidebar(' : {
		'kind' : 'f',
		'menu' : 'array $params | array'
	},
	'wp_list_widgets(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_load_alloptions(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_load_core_site_options(' : {
		'kind' : 'f',
		'menu' : 'integer $site_id'
	},
	'wp_load_image(' : {
		'kind' : 'f',
		'menu' : 'string $file | resource'
	},
	'wp_load_translations_early(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_localize_jquery_ui_datepicker(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_localize_script(' : {
		'kind' : 'f',
		'menu' : 'string $handle, string $object_name, array $l10n | boolean',
		'info' : "Localize a script."
	},
	'wp_login(' : {
		'kind' : 'f',
		'menu' : 'string $username, string $password, string $deprecated | boolean',
		'info' : "Checks a users login information and logs them in if it checks out. This function is deprecated."
	},
	'wp_login_form(' : {
		'kind' : 'f',
		'menu' : 'array $args | string|void',
		'info' : "Provides a simple login form for use anywhere within WordPress."
	},
	'wp_login_url(' : {
		'kind' : 'f',
		'menu' : 'string $redirect, boolean $force_reauth | string'
	},
	'wp_login_viewport_meta(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_loginout(' : {
		'kind' : 'f',
		'menu' : 'string $redirect, boolean $echo | string|void',
		'info' : "Display the Log In/Out link."
	},
	'wp_logout(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_logout_url(' : {
		'kind' : 'f',
		'menu' : 'string $redirect | string',
		'info' : "Retrieves the logout URL."
	},
	'wp_lostpassword_url(' : {
		'kind' : 'f',
		'menu' : 'string $redirect | string'
	},
	'wp_magic_quotes(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_mail(' : {
		'kind' : 'f',
		'menu' : 'string|array $to, string $subject, string $message, string|array $headers, string|array $attachments | boolean',
		'info' : "Send mail, similar to PHP's mail"
	},
	'wp_maintenance(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_make_content_images_responsive(' : {
		'kind' : 'f',
		'menu' : 'string $content | string'
	},
	'wp_make_link_relative(' : {
		'kind' : 'f',
		'menu' : 'string $link | string',
		'info' : "Convert full URL paths to absolute paths."
	},
	'wp_match_mime_types(' : {
		'kind' : 'f',
		'menu' : 'string|array $wildcard_mime_types, string|array $real_mime_types | array',
		'info' : "Check a MIME-Type against a list."
	},
	'wp_max_upload_size(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_maybe_auto_update(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_maybe_decline_date(' : {
		'kind' : 'f',
		'menu' : 'string $date | string',
		'info' : "Determines if the date should be declined."
	},
	'wp_maybe_generate_attachment_metadata(' : {
		'kind' : 'f',
		'menu' : '\WP_Post $attachment'
	},
	'wp_maybe_load_embeds(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_maybe_load_widgets(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_maybe_update_network_site_counts(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_maybe_update_network_user_counts(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_media_attach_action(' : {
		'kind' : 'f',
		'menu' : 'integer $parent_id, string $action'
	},
	'wp_media_insert_url_form(' : {
		'kind' : 'f',
		'menu' : 'string $default_view | string'
	},
	'wp_media_upload_handler(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_mediaelement_fallback(' : {
		'kind' : 'f',
		'menu' : 'string $url | string'
	},
	'wp_meta(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_metadata_lazyloader(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_mime_type_icon(' : {
		'kind' : 'f',
		'menu' : 'string|integer $mime | string|false'
	},
	'wp_mkdir_p(' : {
		'kind' : 'f',
		'menu' : 'string $target | boolean',
		'info' : "Recursive directory creation based on full path."
	},
	'wp_nav_menu(' : {
		'kind' : 'f',
		'menu' : 'array $args | object|false|void'
	},
	'wp_nav_menu_disabled_check(' : {
		'kind' : 'f',
		'menu' : 'integer|string $nav_menu_selected_id | string'
	},
	'wp_nav_menu_item_link_meta_box(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_nav_menu_item_post_type_meta_box(' : {
		'kind' : 'f',
		'menu' : 'string $object, array $box'
	},
	'wp_nav_menu_item_taxonomy_meta_box(' : {
		'kind' : 'f',
		'menu' : 'string $object, array $box'
	},
	'wp_nav_menu_locations_meta_box(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_nav_menu_manage_columns(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_nav_menu_max_depth(' : {
		'kind' : 'f',
		'menu' : 'string $classes | string'
	},
	'wp_nav_menu_post_type_meta_boxes(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_nav_menu_setup(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_nav_menu_taxonomy_meta_boxes(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_nav_menu_update_menu_items(' : {
		'kind' : 'f',
		'menu' : 'integer|string $nav_menu_selected_id, string $nav_menu_selected_title | array'
	},
	'wp_network_dashboard_right_now(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_new_blog_notification(' : {
		'kind' : 'f',
		'menu' : 'string $blog_title, string $blog_url, integer $user_id, string $password',
		'info' : "Notifies the site admin that the setup is complete."
	},
	'wp_new_comment(' : {
		'kind' : 'f',
		'menu' : 'array $commentdata, boolean $avoid_die | integer|false|\WP_Error',
		'info' : "Adds a new comment to the database."
	},
	'wp_new_comment_notify_moderator(' : {
		'kind' : 'f',
		'menu' : 'integer $comment_ID | boolean'
	},
	'wp_new_comment_notify_postauthor(' : {
		'kind' : 'f',
		'menu' : 'integer $comment_ID | boolean'
	},
	'wp_new_user_notification(' : {
		'kind' : 'f',
		'menu' : 'integer $user_id, null $deprecated, string $notify',
		'info' : "Email login credentials to a newly-registered user."
	},
	'wp_next_scheduled(' : {
		'kind' : 'f',
		'menu' : 'string $hook, array $args | false|integer'
	},
	'wp_no_robots(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_nonce_ays(' : {
		'kind' : 'f',
		'menu' : 'string $action',
		'info' : "Display 'Are You Sure' message to confirm the action being taken."
	},
	'wp_nonce_field(' : {
		'kind' : 'f',
		'menu' : 'integer|string $action, string $name, boolean $referer, boolean $echo | string',
		'info' : "Retrieve or display nonce hidden field for forms."
	},
	'wp_nonce_tick(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_nonce_url(' : {
		'kind' : 'f',
		'menu' : 'string $actionurl, integer|string $action, string $name | string'
	},
	'wp_normalize_path(' : {
		'kind' : 'f',
		'menu' : 'string $path | string',
		'info' : "Normalize a filesystem path."
	},
	'wp_not_installed(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_notify_moderator(' : {
		'kind' : 'f',
		'menu' : 'integer $comment_id | true'
	},
	'wp_notify_postauthor(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Comment $comment_id, string $deprecated | boolean'
	},
	'wp_ob_end_flush_all(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_oembed_add_discovery_links(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_oembed_add_host_js(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_oembed_add_provider(' : {
		'kind' : 'f',
		'menu' : 'string $format, string $provider, boolean $regex'
	},
	'wp_oembed_ensure_format(' : {
		'kind' : 'f',
		'menu' : 'string $format | string'
	},
	'wp_oembed_get(' : {
		'kind' : 'f',
		'menu' : 'string $url, array $args | false|string'
	},
	'wp_oembed_register_route(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_oembed_remove_provider(' : {
		'kind' : 'f',
		'menu' : 'string $format | boolean'
	},
	'wp_old_slug_redirect(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_original_referer_field(' : {
		'kind' : 'f',
		'menu' : 'boolean $echo, string $jump_back_to | string',
		'info' : "Retrieve or display original referer hidden field for forms."
	},
	'wp_page_menu(' : {
		'kind' : 'f',
		'menu' : 'array|string $args | string|void',
		'info' : "Displays or retrieves a list of pages with an optional home link."
	},
	'wp_page_reload_on_back_button_js(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_parse_args(' : {
		'kind' : 'f',
		'menu' : 'string|array|object $args, array $defaults | array',
		'info' : "Merge user defined arguments into defaults array."
	},
	'wp_parse_auth_cookie(' : {
		'kind' : 'f',
		'menu' : 'string $cookie, string $scheme | array|false'
	},
	'wp_parse_id_list(' : {
		'kind' : 'f',
		'menu' : 'array|string $list | array'
	},
	'wp_parse_slug_list(' : {
		'kind' : 'f',
		'menu' : 'array|string $list | array'
	},
	'wp_parse_str(' : {
		'kind' : 'f',
		'menu' : 'string $string, array $array',
		'info' : "Parses a string into variables to be stored in an array."
	},
	'wp_parse_url(' : {
		'kind' : 'f',
		'menu' : 'string $url, integer $component | mixed',
		'info' : "A wrapper for PHP's parse_url() function that handles consistency in the return values across PHP versions."
	},
	'wp_password_change_notification(' : {
		'kind' : 'f',
		'menu' : '\WP_User $user'
	},
	'wp_playlist_scripts(' : {
		'kind' : 'f',
		'menu' : 'string $type'
	},
	'wp_playlist_shortcode(' : {
		'kind' : 'f',
		'menu' : 'array $attr | string',
		'info' : "Builds the Playlist shortcode output."
	},
	'wp_plugin_directory_constants(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_plugin_update_row(' : {
		'kind' : 'f',
		'menu' : 'string $file, array $plugin_data | false|void'
	},
	'wp_plugin_update_rows(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_plupload_default_settings(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_popular_terms_checklist(' : {
		'kind' : 'f',
		'menu' : 'string $taxonomy, integer $default, integer $number, boolean $echo | array',
		'info' : "Retrieve a list of the most popular terms from the specified taxonomy."
	},
	'wp_post_mime_type_where(' : {
		'kind' : 'f',
		'menu' : 'string|array $post_mime_types, string $table_alias | string'
	},
	'wp_post_preview_js(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_post_revision_title(' : {
		'kind' : 'f',
		'menu' : 'integer|object $revision, boolean $link | string|false'
	},
	'wp_post_revision_title_expanded(' : {
		'kind' : 'f',
		'menu' : 'integer|object $revision, boolean $link | string|false'
	},
	'wp_pre_kses_less_than(' : {
		'kind' : 'f',
		'menu' : 'string $text | string',
		'info' : "Convert lone less than signs."
	},
	'wp_pre_kses_less_than_callback(' : {
		'kind' : 'f',
		'menu' : 'array $matches | string'
	},
	'wp_preload_dialogs(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_prepare_attachment_for_js(' : {
		'kind' : 'f',
		'menu' : 'mixed $attachment | array|void'
	},
	'wp_prepare_revisions_for_js(' : {
		'kind' : 'f',
		'menu' : 'object|integer $post, integer $selected_revision_id, integer $from | array'
	},
	'wp_prepare_themes_for_js(' : {
		'kind' : 'f',
		'menu' : 'array $themes | array'
	},
	'wp_print_admin_notice_templates(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_print_editor_js(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_print_footer_scripts(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_print_head_scripts(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_print_media_templates(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_print_request_filesystem_credentials_modal(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_print_revision_templates(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_print_scripts(' : {
		'kind' : 'f',
		'menu' : 'string|boolean|array $handles | array',
		'info' : "Prints scripts in document head that are in the $handles queue."
	},
	'wp_print_styles(' : {
		'kind' : 'f',
		'menu' : 'string|boolean|array $handles | array',
		'info' : "Display styles that are in the $handles queue."
	},
	'wp_print_update_row_templates(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_protect_special_option(' : {
		'kind' : 'f',
		'menu' : 'string $option',
		'info' : "Protect WordPress special option from being modified."
	},
	'wp_prototype_before_jquery(' : {
		'kind' : 'f',
		'menu' : 'array $js_array | array'
	},
	'wp_publish_post(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Post $post'
	},
	'wp_queue_comments_for_comment_meta_lazyload(' : {
		'kind' : 'f',
		'menu' : 'array $comments'
	},
	'wp_queue_posts_for_term_meta_lazyload(' : {
		'kind' : 'f',
		'menu' : 'array $posts'
	},
	'wp_quicktags(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_raise_memory_limit(' : {
		'kind' : 'f',
		'menu' : 'string $context | boolean|integer|string',
		'info' : "Attempts to raise the PHP memory limit for memory intensive processes."
	},
	'wp_rand(' : {
		'kind' : 'f',
		'menu' : 'integer $min, integer $max | integer'
	},
	'wp_read_audio_metadata(' : {
		'kind' : 'f',
		'menu' : 'string $file | array|boolean'
	},
	'wp_read_image_metadata(' : {
		'kind' : 'f',
		'menu' : 'string $file | boolean|array',
		'info' : "Get extended image metadata, exif or iptc as available."
	},
	'wp_read_video_metadata(' : {
		'kind' : 'f',
		'menu' : 'string $file | array|boolean'
	},
	'wp_redirect(' : {
		'kind' : 'f',
		'menu' : 'string $location, integer $status | boolean',
		'info' : "Redirects to another page."
	},
	'wp_redirect_admin_locations(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_referer_field(' : {
		'kind' : 'f',
		'menu' : 'boolean $echo | string',
		'info' : "Retrieve or display referer hidden field for forms."
	},
	'wp_refresh_post_lock(' : {
		'kind' : 'f',
		'menu' : 'array $response, array $data, string $screen_id | array'
	},
	'wp_refresh_post_nonces(' : {
		'kind' : 'f',
		'menu' : 'array $response, array $data, string $screen_id | array'
	},
	'wp_register(' : {
		'kind' : 'f',
		'menu' : 'string $before, string $after, boolean $echo | string|void',
		'info' : "Display the Registration or Admin link."
	},
	'wp_register_plugin_realpath(' : {
		'kind' : 'f',
		'menu' : 'string $file | boolean',
		'info' : "Register a plugin's real path."
	},
	'wp_register_script(' : {
		'kind' : 'f',
		'menu' : 'string $handle, string $src, array $deps, string|boolean|null $ver, boolean $in_footer | boolean',
		'info' : "Register a new script."
	},
	'wp_register_sidebar_widget(' : {
		'kind' : 'f',
		'menu' : 'integer|string $id, string $name, callable $output_callback, array $options',
		'info' : "Register an instance of a widget."
	},
	'wp_register_style(' : {
		'kind' : 'f',
		'menu' : 'string $handle, string $src, array $deps, string|boolean|null $ver, string $media | boolean'
	},
	'wp_register_widget_control(' : {
		'kind' : 'f',
		'menu' : 'integer|string $id, string $name, callable $control_callback, array $options'
	},
	'wp_registration_url(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_rel_nofollow(' : {
		'kind' : 'f',
		'menu' : 'string $text | string'
	},
	'wp_rel_nofollow_callback(' : {
		'kind' : 'f',
		'menu' : 'array $matches | string',
		'info' : "Callback to add rel=nofollow string to HTML A element."
	},
	'wp_remote_fopen(' : {
		'kind' : 'f',
		'menu' : 'string $uri | false|string'
	},
	'wp_remote_get(' : {
		'kind' : 'f',
		'menu' : 'string $url, array $args | \WP_Error|array'
	},
	'wp_remote_head(' : {
		'kind' : 'f',
		'menu' : 'string $url, array $args | \WP_Error|array'
	},
	'wp_remote_post(' : {
		'kind' : 'f',
		'menu' : 'string $url, array $args | \WP_Error|array'
	},
	'wp_remote_request(' : {
		'kind' : 'f',
		'menu' : 'string $url, array $args | \WP_Error|array',
		'info' : "Retrieve the raw response from the HTTP request."
	},
	'wp_remote_retrieve_body(' : {
		'kind' : 'f',
		'menu' : 'array $response | string'
	},
	'wp_remote_retrieve_cookie(' : {
		'kind' : 'f',
		'menu' : 'array $response, string $name | \WP_Http_Cookie|string'
	},
	'wp_remote_retrieve_cookie_value(' : {
		'kind' : 'f',
		'menu' : 'array $response, string $name | string'
	},
	'wp_remote_retrieve_cookies(' : {
		'kind' : 'f',
		'menu' : 'array $response | array'
	},
	'wp_remote_retrieve_header(' : {
		'kind' : 'f',
		'menu' : 'array $response, string $header | string'
	},
	'wp_remote_retrieve_headers(' : {
		'kind' : 'f',
		'menu' : 'array $response | array|\Requests_Utility_CaseInsensitiveDictionary'
	},
	'wp_remote_retrieve_response_code(' : {
		'kind' : 'f',
		'menu' : 'array $response | integer|string',
		'info' : "Retrieve only the response code from the raw response."
	},
	'wp_remote_retrieve_response_message(' : {
		'kind' : 'f',
		'menu' : 'array $response | string',
		'info' : "Retrieve only the response message from the raw response."
	},
	'wp_removable_query_args(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_remove_object_terms(' : {
		'kind' : 'f',
		'menu' : 'integer $object_id, array|integer|string $terms, array|string $taxonomy | boolean|\WP_Error'
	},
	'wp_replace_in_html_tags(' : {
		'kind' : 'f',
		'menu' : 'string $haystack, array $replace_pairs | string'
	},
	'wp_reschedule_event(' : {
		'kind' : 'f',
		'menu' : 'integer $timestamp, string $recurrence, string $hook, array $args | false|void'
	},
	'wp_reset_postdata(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_reset_query(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_reset_vars(' : {
		'kind' : 'f',
		'menu' : 'array $vars',
		'info' : "Resets global variables based on $_GET and $_POST"
	},
	'wp_resolve_numeric_slug_conflicts(' : {
		'kind' : 'f',
		'menu' : 'array $query_vars | array',
		'info' : "Resolve numeric slugs that collide with date permalinks."
	},
	'wp_resource_hints(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_restore_image(' : {
		'kind' : 'f',
		'menu' : 'integer $post_id | \stdClass'
	},
	'wp_restore_post_revision(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Post $revision_id, array $fields | integer|false|null',
		'info' : "Restores a post to the specified revision."
	},
	'wp_revisions_enabled(' : {
		'kind' : 'f',
		'menu' : '\WP_Post $post | boolean'
	},
	'wp_revisions_to_keep(' : {
		'kind' : 'f',
		'menu' : '\WP_Post $post | integer',
		'info' : "Determine how many revisions to retain for a given post."
	},
	'wp_revoke_user(' : {
		'kind' : 'f',
		'menu' : 'integer $id'
	},
	'wp_richedit_pre(' : {
		'kind' : 'f',
		'menu' : 'string $text | string',
		'info' : "Formats text for the rich text editor."
	},
	'wp_roles(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_rss(' : {
		'kind' : 'f',
		'menu' : 'string $url, integer $num_items'
	},
	'wp_safe_redirect(' : {
		'kind' : 'f',
		'menu' : 'string $location, integer $status',
		'info' : "Performs a safe (local) redirect, using wp_redirect()."
	},
	'wp_safe_remote_get(' : {
		'kind' : 'f',
		'menu' : 'string $url, array $args | \WP_Error|array',
		'info' : "Retrieve the raw response from a safe HTTP request using the GET method."
	},
	'wp_safe_remote_head(' : {
		'kind' : 'f',
		'menu' : 'string $url, array $args | \WP_Error|array',
		'info' : "Retrieve the raw response from a safe HTTP request using the HEAD method."
	},
	'wp_safe_remote_post(' : {
		'kind' : 'f',
		'menu' : 'string $url, array $args | \WP_Error|array',
		'info' : "Retrieve the raw response from a safe HTTP request using the POST method."
	},
	'wp_safe_remote_request(' : {
		'kind' : 'f',
		'menu' : 'string $url, array $args | \WP_Error|array',
		'info' : "Retrieve the raw response from a safe HTTP request."
	},
	'wp_salt(' : {
		'kind' : 'f',
		'menu' : 'string $scheme | string',
		'info' : "Get salt to add to hashes."
	},
	'wp_sanitize_redirect(' : {
		'kind' : 'f',
		'menu' : 'string $location | string'
	},
	'wp_save_image(' : {
		'kind' : 'f',
		'menu' : 'integer $post_id | \stdClass'
	},
	'wp_save_image_file(' : {
		'kind' : 'f',
		'menu' : 'string $filename, \WP_Image_Editor $image, string $mime_type, integer $post_id | boolean'
	},
	'wp_save_nav_menu_items(' : {
		'kind' : 'f',
		'menu' : 'integer $menu_id, array $menu_data | array'
	},
	'wp_save_post_revision(' : {
		'kind' : 'f',
		'menu' : 'integer $post_id | integer|\WP_Error|void',
		'info' : "Creates a revision for the current version of a post."
	},
	'wp_schedule_event(' : {
		'kind' : 'f',
		'menu' : 'integer $timestamp, string $recurrence, string $hook, array $args | false|void',
		'info' : "Schedule a recurring event."
	},
	'wp_schedule_single_event(' : {
		'kind' : 'f',
		'menu' : 'integer $timestamp, string $hook, array $args | false|void',
		'info' : "Schedules an event to run only once."
	},
	'wp_schedule_update_checks(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_schedule_update_network_counts(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_scheduled_delete(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_script_add_data(' : {
		'kind' : 'f',
		'menu' : 'string $handle, string $key, mixed $value | boolean',
		'info' : "Add metadata to a script."
	},
	'wp_script_is(' : {
		'kind' : 'f',
		'menu' : 'string $handle, string $list | boolean'
	},
	'wp_scripts(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_send_json(' : {
		'kind' : 'f',
		'menu' : 'mixed $response, integer $status_code'
	},
	'wp_send_json_error(' : {
		'kind' : 'f',
		'menu' : 'mixed $data, integer $status_code',
		'info' : "Send a JSON response back to an Ajax request, indicating failure."
	},
	'wp_send_json_success(' : {
		'kind' : 'f',
		'menu' : 'mixed $data, integer $status_code'
	},
	'wp_send_new_user_notifications(' : {
		'kind' : 'f',
		'menu' : 'integer $user_id, string $notify',
		'info' : "Initiates email notifications related to the creation of new users."
	},
	'wp_set_all_user_settings(' : {
		'kind' : 'f',
		'menu' : 'array $user_settings | boolean|null'
	},
	'wp_set_auth_cookie(' : {
		'kind' : 'f',
		'menu' : 'integer $user_id, boolean $remember, mixed $secure, string $token',
		'info' : "Log in a user by setting authentication cookies."
	},
	'wp_set_comment_cookies(' : {
		'kind' : 'f',
		'menu' : '\WP_Comment $comment, object $user'
	},
	'wp_set_comment_status(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Comment $comment_id, string $comment_status, boolean $wp_error | boolean|\WP_Error',
		'info' : "Sets the status of a comment."
	},
	'wp_set_current_user(' : {
		'kind' : 'f',
		'menu' : 'integer $id, string $name | \WP_User',
		'info' : "Changes the current user by ID or name."
	},
	'wp_set_internal_encoding(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_set_lang_dir(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_set_link_cats(' : {
		'kind' : 'f',
		'menu' : 'integer $link_id, array $link_categories'
	},
	'wp_set_object_terms(' : {
		'kind' : 'f',
		'menu' : 'integer $object_id, array|integer|string $terms, string $taxonomy, boolean $append | array|\WP_Error',
		'info' : "Create Term and Taxonomy Relationships."
	},
	'wp_set_password(' : {
		'kind' : 'f',
		'menu' : 'string $password, integer $user_id',
		'info' : "Updates the user's password with a new encrypted one."
	},
	'wp_set_post_categories(' : {
		'kind' : 'f',
		'menu' : 'integer $post_ID, array|integer $post_categories, boolean $append | array|false|\WP_Error',
		'info' : "Set categories for a post."
	},
	'wp_set_post_cats(' : {
		'kind' : 'f',
		'menu' : 'integer $blogid, integer $post_ID, array $post_categories | boolean|mixed'
	},
	'wp_set_post_lock(' : {
		'kind' : 'f',
		'menu' : 'integer $post_id | boolean|array'
	},
	'wp_set_post_tags(' : {
		'kind' : 'f',
		'menu' : 'integer $post_id, string|array $tags, boolean $append | array|false|\WP_Error'
	},
	'wp_set_post_terms(' : {
		'kind' : 'f',
		'menu' : 'integer $post_id, string|array $tags, string $taxonomy, boolean $append | array|false|\WP_Error'
	},
	'wp_set_sidebars_widgets(' : {
		'kind' : 'f',
		'menu' : 'array $sidebars_widgets'
	},
	'wp_set_wpdb_vars(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_setcookie(' : {
		'kind' : 'f',
		'menu' : 'string $username, string $password, boolean $already_md5, string $home, string $siteurl, boolean $remember'
	},
	'wp_setup_nav_menu_item(' : {
		'kind' : 'f',
		'menu' : 'object $menu_item | object',
		'info' : "Decorates a menu item object with the shared navigation menu item properties."
	},
	'wp_shake_js(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_shortlink_header(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_shortlink_wp_head(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_should_upgrade_global_tables(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_shrink_dimensions(' : {
		'kind' : 'f',
		'menu' : 'integer $width, integer $height, integer $wmax, integer $hmax | array'
	},
	'wp_sidebar_description(' : {
		'kind' : 'f',
		'menu' : 'string $id | string|void',
		'info' : "Retrieve description for a sidebar."
	},
	'wp_signon(' : {
		'kind' : 'f',
		'menu' : 'array $credentials, string|boolean $secure_cookie | \WP_User|\WP_Error',
		'info' : "Authenticates and logs a user in with 'remember' capability."
	},
	'wp_simplepie_autoload(' : {
		'kind' : 'f',
		'menu' : '$class'
	},
	'wp_site_icon(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_slash(' : {
		'kind' : 'f',
		'menu' : 'string|array $value | string|array',
		'info' : "Add slashes to a string or array of strings."
	},
	'wp_spaces_regexp(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_spam_comment(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Comment $comment_id | boolean'
	},
	'wp_specialchars(' : {
		'kind' : 'f',
		'menu' : 'string $string, string $quote_style, false|string $charset, false $double_encode | string'
	},
	'wp_specialchars_decode(' : {
		'kind' : 'f',
		'menu' : 'string $string, string|integer $quote_style | string',
		'info' : "Converts a number of HTML entities into their special characters."
	},
	'wp_sprintf(' : {
		'kind' : 'f',
		'menu' : 'string $pattern | string'
	},
	'wp_sprintf_l(' : {
		'kind' : 'f',
		'menu' : 'string $pattern, array $args | string',
		'info' : "Localize list items before the rest of the content."
	},
	'wp_ssl_constants(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_star_rating(' : {
		'kind' : 'f',
		'menu' : 'array $args',
		'info' : "Output a HTML element with a star rating for a given rating."
	},
	'wp_start_object_cache(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_staticize_emoji(' : {
		'kind' : 'f',
		'menu' : 'string $text | string'
	},
	'wp_staticize_emoji_for_email(' : {
		'kind' : 'f',
		'menu' : 'array $mail | array'
	},
	'wp_stream_image(' : {
		'kind' : 'f',
		'menu' : '\WP_Image_Editor $image, string $mime_type, integer $post_id | boolean',
		'info' : "Streams image in WP_Image_Editor to browser."
	},
	'wp_strip_all_tags(' : {
		'kind' : 'f',
		'menu' : 'string $string, boolean $remove_breaks | string',
		'info' : "Properly strip all HTML tags including script and style"
	},
	'wp_style_add_data(' : {
		'kind' : 'f',
		'menu' : 'string $handle, string $key, mixed $value | boolean',
		'info' : "Add metadata to a CSS stylesheet."
	},
	'wp_style_is(' : {
		'kind' : 'f',
		'menu' : 'string $handle, string $list | boolean'
	},
	'wp_style_loader_src(' : {
		'kind' : 'f',
		'menu' : 'string $src, string $handle | string|false',
		'info' : "Administration Screen CSS for changing the styles."
	},
	'wp_styles(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_suspend_cache_addition(' : {
		'kind' : 'f',
		'menu' : 'boolean $suspend | boolean',
		'info' : "Temporarily suspend cache additions."
	},
	'wp_suspend_cache_invalidation(' : {
		'kind' : 'f',
		'menu' : 'boolean $suspend | boolean',
		'info' : "Suspend cache invalidation."
	},
	'wp_tag_cloud(' : {
		'kind' : 'f',
		'menu' : 'array|string|null $args | void|array',
		'info' : "Display tag cloud."
	},
	'wp_templating_constants(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_tempnam(' : {
		'kind' : 'f',
		'menu' : 'string $filename, string $dir | string',
		'info' : "Returns a filename of a Temporary unique file."
	},
	'wp_term_is_shared(' : {
		'kind' : 'f',
		'menu' : 'integer $term_id | boolean',
		'info' : "Determine whether a term is shared between multiple taxonomies."
	},
	'wp_terms_checklist(' : {
		'kind' : 'f',
		'menu' : 'integer $post_id, array|string $args',
		'info' : "Output an unordered list of checkbox input elements labelled with term names."
	},
	'wp_text_diff(' : {
		'kind' : 'f',
		'menu' : 'string $left_string, string $right_string, string|array $args | string',
		'info' : "Displays a human readable HTML representation of the difference between two strings."
	},
	'wp_theme_update_row(' : {
		'kind' : 'f',
		'menu' : 'string $theme_key, \WP_Theme $theme | false|void'
	},
	'wp_theme_update_rows(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_throttle_comment_flood(' : {
		'kind' : 'f',
		'menu' : 'boolean $block, integer $time_lastcomment, integer $time_newcomment | boolean'
	},
	'wp_timezone_choice(' : {
		'kind' : 'f',
		'menu' : 'string $selected_zone, string $locale | string'
	},
	'wp_timezone_override_offset(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_timezone_supported(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_tiny_mce(' : {
		'kind' : 'f',
		'menu' : '$teeny, $settings'
	},
	'wp_title(' : {
		'kind' : 'f',
		'menu' : 'string $sep, boolean $display, string $seplocation | string|null',
		'info' : "Display or retrieve page title for all areas of blog."
	},
	'wp_title_rss(' : {
		'kind' : 'f',
		'menu' : 'string $deprecated'
	},
	'wp_transition_comment_status(' : {
		'kind' : 'f',
		'menu' : 'string $new_status, string $old_status, object $comment',
		'info' : "Call hooks for when a comment status transition occurs."
	},
	'wp_transition_post_status(' : {
		'kind' : 'f',
		'menu' : 'string $new_status, string $old_status, \WP_Post $post',
		'info' : "Fires actions related to the transitioning of a post's status."
	},
	'wp_trash_comment(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Comment $comment_id | boolean',
		'info' : "Moves a comment to the Trash"
	},
	'wp_trash_post(' : {
		'kind' : 'f',
		'menu' : 'integer $post_id | false|array|\WP_Post|null',
		'info' : "Move a post or page to the Trash"
	},
	'wp_trash_post_comments(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Post|null $post | mixed|void'
	},
	'wp_trim_excerpt(' : {
		'kind' : 'f',
		'menu' : 'string $text | string',
		'info' : "Generates an excerpt from the content, if needed."
	},
	'wp_trim_words(' : {
		'kind' : 'f',
		'menu' : 'string $text, integer $num_words, string $more | string',
		'info' : "Trims text to a certain number of words."
	},
	'wp_underscore_audio_template(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_underscore_playlist_templates(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_underscore_video_template(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_unique_filename(' : {
		'kind' : 'f',
		'menu' : 'string $dir, string $filename, callable $unique_filename_callback | string',
		'info' : "Get a filename that is sanitized and unique for the given directory."
	},
	'wp_unique_post_slug(' : {
		'kind' : 'f',
		'menu' : 'string $slug, integer $post_ID, string $post_status, string $post_type, integer $post_parent | string'
	},
	'wp_unique_term_slug(' : {
		'kind' : 'f',
		'menu' : 'string $slug, object $term | string',
		'info' : "Will make slug unique, if it isn't already."
	},
	'wp_unregister_GLOBALS(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_unregister_sidebar_widget(' : {
		'kind' : 'f',
		'menu' : 'integer|string $id'
	},
	'wp_unregister_widget_control(' : {
		'kind' : 'f',
		'menu' : 'integer|string $id'
	},
	'wp_unschedule_event(' : {
		'kind' : 'f',
		'menu' : 'integer $timestamp, string $hook, array $args | false|void',
		'info' : "Unschedule a previously scheduled event."
	},
	'wp_unslash(' : {
		'kind' : 'f',
		'menu' : 'string|array $value | string|array',
		'info' : "Remove slashes from a string or array of strings."
	},
	'wp_unspam_comment(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Comment $comment_id | boolean'
	},
	'wp_untrash_comment(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Comment $comment_id | boolean'
	},
	'wp_untrash_post(' : {
		'kind' : 'f',
		'menu' : 'integer $post_id | \WP_Post|false'
	},
	'wp_untrash_post_comments(' : {
		'kind' : 'f',
		'menu' : 'integer|\WP_Post|null $post | true|void'
	},
	'wp_update_attachment_metadata(' : {
		'kind' : 'f',
		'menu' : 'integer $post_id, array $data | integer|boolean'
	},
	'wp_update_category(' : {
		'kind' : 'f',
		'menu' : 'array $catarr | integer|boolean',
		'info' : "Aliases wp_insert_category() with minimal args."
	},
	'wp_update_comment(' : {
		'kind' : 'f',
		'menu' : 'array $commentarr | integer',
		'info' : "Updates an existing comment in the database."
	},
	'wp_update_comment_count(' : {
		'kind' : 'f',
		'menu' : 'integer|null $post_id, boolean $do_deferred | boolean|void',
		'info' : "Updates the comment count for post(s)."
	},
	'wp_update_comment_count_now(' : {
		'kind' : 'f',
		'menu' : 'integer $post_id | boolean'
	},
	'wp_update_core(' : {
		'kind' : 'f',
		'menu' : '$current, $feedback',
		'info' : "This was once used to kick-off the Core Updater."
	},
	'wp_update_custom_css_post(' : {
		'kind' : 'f',
		'menu' : 'string $css, array $args | \WP_Post|\WP_Error',
		'info' : "Update the `custom_css` post for a given theme."
	},
	'wp_update_link(' : {
		'kind' : 'f',
		'menu' : 'array $linkdata | integer|\WP_Error'
	},
	'wp_update_nav_menu_item(' : {
		'kind' : 'f',
		'menu' : 'integer $menu_id, integer $menu_item_db_id, array $menu_item_data | integer|\WP_Error',
		'info' : "Save the properties of a menu item or create a new one."
	},
	'wp_update_nav_menu_object(' : {
		'kind' : 'f',
		'menu' : 'integer $menu_id, array $menu_data | integer|\WP_Error',
		'info' : "Save the properties of a menu or create a new menu with those properties."
	},
	'wp_update_network_counts(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_update_network_site_counts(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_update_network_user_counts(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_update_plugin(' : {
		'kind' : 'f',
		'menu' : '$plugin, $feedback',
		'info' : "This was once used to kick-off the Plugin Updater."
	},
	'wp_update_plugins(' : {
		'kind' : 'f',
		'menu' : 'array $extra_stats',
		'info' : "Check plugin versions against the latest versions hosted on WordPress.org."
	},
	'wp_update_post(' : {
		'kind' : 'f',
		'menu' : 'array|object $postarr, boolean $wp_error | integer|\WP_Error',
		'info' : "Update a post with new post data."
	},
	'wp_update_term(' : {
		'kind' : 'f',
		'menu' : 'integer $term_id, string $taxonomy, array|string $args | array|\WP_Error',
		'info' : "Update term based on arguments provided."
	},
	'wp_update_term_count(' : {
		'kind' : 'f',
		'menu' : 'integer|array $terms, string $taxonomy, boolean $do_deferred | boolean',
		'info' : "Updates the amount of terms in taxonomy."
	},
	'wp_update_term_count_now(' : {
		'kind' : 'f',
		'menu' : 'array $terms, string $taxonomy | true'
	},
	'wp_update_theme(' : {
		'kind' : 'f',
		'menu' : '$theme, $feedback',
		'info' : "This was once used to kick-off the Theme Updater."
	},
	'wp_update_themes(' : {
		'kind' : 'f',
		'menu' : 'array $extra_stats',
		'info' : "Check theme versions against the latest versions hosted on WordPress.org."
	},
	'wp_update_user(' : {
		'kind' : 'f',
		'menu' : 'mixed $userdata | integer|\WP_Error',
		'info' : "Update a user in the database."
	},
	'wp_upgrade(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_upload_bits(' : {
		'kind' : 'f',
		'menu' : 'string $name, null|string $deprecated, mixed $bits, string $time | array',
		'info' : "Create a file in the upload folder with given content."
	},
	'wp_upload_dir(' : {
		'kind' : 'f',
		'menu' : 'string $time, boolean $create_dir, boolean $refresh_cache | array',
		'info' : "Get an array containing the current upload directory's path and url."
	},
	'wp_user_settings(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_using_ext_object_cache(' : {
		'kind' : 'f',
		'menu' : 'boolean $using | boolean'
	},
	'wp_validate_auth_cookie(' : {
		'kind' : 'f',
		'menu' : 'string $cookie, string $scheme | false|integer',
		'info' : "Validates authentication cookie."
	},
	'wp_validate_boolean(' : {
		'kind' : 'f',
		'menu' : 'mixed $var | boolean',
		'info' : "Filter/validate a variable as a boolean."
	},
	'wp_validate_logged_in_cookie(' : {
		'kind' : 'f',
		'menu' : 'integer|boolean $user_id | integer|false',
		'info' : "Validates the logged-in cookie."
	},
	'wp_validate_redirect(' : {
		'kind' : 'f',
		'menu' : 'string $location, string $default | string',
		'info' : "Validates a URL for use in a redirect."
	},
	'wp_verify_nonce(' : {
		'kind' : 'f',
		'menu' : 'string $nonce, string|integer $action | false|integer',
		'info' : "Verify that correct nonce was used with time limit."
	},
	'wp_version_check(' : {
		'kind' : 'f',
		'menu' : 'array $extra_stats, boolean $force_check',
		'info' : "Check WordPress version against the newest version."
	},
	'wp_video_shortcode(' : {
		'kind' : 'f',
		'menu' : 'array $attr, string $content | string|void',
		'info' : "Builds the Video shortcode output."
	},
	'wp_welcome_panel(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_widget_control(' : {
		'kind' : 'f',
		'menu' : 'array $sidebar_args | array',
		'info' : "Meta widget used to display the control form for a widget."
	},
	'wp_widget_description(' : {
		'kind' : 'f',
		'menu' : 'integer|string $id | string|void',
		'info' : "Retrieve description for widget."
	},
	'wp_widget_rss_form(' : {
		'kind' : 'f',
		'menu' : 'array|string $args, array $inputs',
		'info' : "Display RSS widget options form."
	},
	'wp_widget_rss_output(' : {
		'kind' : 'f',
		'menu' : 'string|array|object $rss, array $args'
	},
	'wp_widget_rss_process(' : {
		'kind' : 'f',
		'menu' : 'array $widget_rss, boolean $check_feed | array',
		'info' : "Process RSS feed widget data and optionally retrieve feed items."
	},
	'wp_widgets_access_body_class(' : {
		'kind' : 'f',
		'menu' : 'string $classes | string'
	},
	'wp_widgets_add_menu(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_widgets_init(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wp_write_post(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wpautop(' : {
		'kind' : 'f',
		'menu' : 'string $pee, boolean $br | string',
		'info' : "Replaces double line-breaks with paragraph elements."
	},
	'wpmu_activate_signup(' : {
		'kind' : 'f',
		'menu' : 'string $key | array|\WP_Error',
		'info' : "Activate a signup."
	},
	'wpmu_activate_stylesheet(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wpmu_admin_do_redirect(' : {
		'kind' : 'f',
		'menu' : 'string $url',
		'info' : "Redirect a user based on $_GET or $_POST arguments."
	},
	'wpmu_admin_redirect_add_updated_param(' : {
		'kind' : 'f',
		'menu' : 'string $url | string'
	},
	'wpmu_checkAvailableSpace(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wpmu_create_blog(' : {
		'kind' : 'f',
		'menu' : 'string $domain, string $path, string $title, integer $user_id, array $meta, integer $site_id | integer|\WP_Error',
		'info' : "Create a site."
	},
	'wpmu_create_user(' : {
		'kind' : 'f',
		'menu' : 'string $user_name, string $password, string $email | integer|false',
		'info' : "Create a user."
	},
	'wpmu_current_site(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wpmu_delete_blog(' : {
		'kind' : 'f',
		'menu' : 'integer $blog_id, boolean $drop'
	},
	'wpmu_delete_user(' : {
		'kind' : 'f',
		'menu' : 'integer $id | boolean'
	},
	'wpmu_get_blog_allowedthemes(' : {
		'kind' : 'f',
		'menu' : '$blog_id'
	},
	'wpmu_log_new_registrations(' : {
		'kind' : 'f',
		'menu' : 'integer $blog_id, integer $user_id'
	},
	'wpmu_menu(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wpmu_signup_blog(' : {
		'kind' : 'f',
		'menu' : 'string $domain, string $path, string $title, string $user, string $user_email, array $meta'
	},
	'wpmu_signup_blog_notification(' : {
		'kind' : 'f',
		'menu' : 'string $domain, string $path, string $title, string $user_login, string $user_email, string $key, array $meta | boolean',
		'info' : "Notify user of signup success."
	},
	'wpmu_signup_stylesheet(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wpmu_signup_user(' : {
		'kind' : 'f',
		'menu' : 'string $user, string $user_email, array $meta',
		'info' : "Record user signup information for future activation."
	},
	'wpmu_signup_user_notification(' : {
		'kind' : 'f',
		'menu' : 'string $user_login, string $user_email, string $key, array $meta | boolean',
		'info' : "Notify user of signup success."
	},
	'wpmu_update_blogs_date(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wpmu_validate_blog_signup(' : {
		'kind' : 'f',
		'menu' : 'string $blogname, string $blog_title, \WP_User|string $user | array',
		'info' : "Processes new site registrations."
	},
	'wpmu_validate_user_signup(' : {
		'kind' : 'f',
		'menu' : 'string $user_name, string $user_email | array',
		'info' : "Sanitize and validate data required for a user sign-up."
	},
	'wpmu_welcome_notification(' : {
		'kind' : 'f',
		'menu' : 'integer $blog_id, integer $user_id, string $password, string $title, array $meta | boolean',
		'info' : "Notify a user that their blog activation has been successful."
	},
	'wpmu_welcome_user_notification(' : {
		'kind' : 'f',
		'menu' : 'integer $user_id, string $password, array $meta | boolean',
		'info' : "Notify a user that their account activation has been successful."
	},
	'wptexturize(' : {
		'kind' : 'f',
		'menu' : 'string $text, boolean $reset | string',
		'info' : "Replaces common plain text characters into formatted entities"
	},
	'wptexturize_primes(' : {
		'kind' : 'f',
		'menu' : 'string $haystack, string $needle, string $prime, string $open_quote, string $close_quote | string'
	},
	'wpview_media_sandbox_styles(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'write_post(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wxr_authors_list(' : {
		'kind' : 'f',
		'menu' : 'array $post_ids'
	},
	'wxr_cat_name(' : {
		'kind' : 'f',
		'menu' : 'object $category'
	},
	'wxr_category_description(' : {
		'kind' : 'f',
		'menu' : 'object $category'
	},
	'wxr_cdata(' : {
		'kind' : 'f',
		'menu' : 'string $str | string'
	},
	'wxr_filter_postmeta(' : {
		'kind' : 'f',
		'menu' : 'boolean $return_me, string $meta_key | boolean'
	},
	'wxr_nav_menu_terms(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wxr_post_taxonomy(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wxr_site_url(' : {
		'kind' : 'f',
		'menu' : ''
	},
	'wxr_tag_description(' : {
		'kind' : 'f',
		'menu' : 'object $tag'
	},
	'wxr_tag_name(' : {
		'kind' : 'f',
		'menu' : 'object $tag'
	},
	'wxr_term_description(' : {
		'kind' : 'f',
		'menu' : 'object $term'
	},
	'wxr_term_meta(' : {
		'kind' : 'f',
		'menu' : '\WP_Term $term'
	},
	'wxr_term_name(' : {
		'kind' : 'f',
		'menu' : 'object $term'
	},
	'xfn_check(' : {
		'kind' : 'f',
		'menu' : 'string $class, string $value, mixed $deprecated'
	},
	'xmlrpc_getpostcategory(' : {
		'kind' : 'f',
		'menu' : 'string $content | string|array',
		'info' : "Retrieve the post category or categories from XMLRPC XML."
	},
	'xmlrpc_getposttitle(' : {
		'kind' : 'f',
		'menu' : 'string $content | string',
		'info' : "Retrieve post title from XMLRPC XML."
	},
	'xmlrpc_pingback_error(' : {
		'kind' : 'f',
		'menu' : '\IXR_Error $ixr_error | \IXR_Error',
		'info' : "Default filter attached to xmlrpc_pingback_error."
	},
	'xmlrpc_removepostdata(' : {
		'kind' : 'f',
		'menu' : 'string $content | string'
	},
	'zeroise(' : {
		'kind' : 'f',
		'menu' : 'integer $number, integer $threshold | string',
		'info' : "Add leading zeros when necessary."
	},
}
